Complexity metrics,sábado, 4 dez 2021 22:17:09 GMT
Method,CogC,ev(G),iv(G),v(G)
"null.addResultToList(Path,boolean,String)",0,n/a,n/a,n/a
"null.call()",4,n/a,n/a,n/a
"null.changed(ObservableValue<? extends Boolean>,Boolean,Boolean)",9,n/a,n/a,n/a
"null.checkClientTrusted(X509Certificate[],String)",0,n/a,n/a,n/a
"null.checkServerTrusted(X509Certificate[],String)",0,n/a,n/a,n/a
"null.compare(Integer,Integer)",0,n/a,n/a,n/a
"null.computeValue()",0,n/a,n/a,n/a
"null.containsKey(String)",0,n/a,n/a,n/a
"null.createDetailsButton()",0,n/a,n/a,n/a
"null.error(SAXParseException)",0,n/a,n/a,n/a
"null.execute()",0,n/a,n/a,n/a
"null.execute(BstEntry)",0,n/a,n/a,n/a
"null.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",0,n/a,n/a,n/a
"null.fatalError(SAXParseException)",0,n/a,n/a,n/a
"null.format(String)",0,1,1,1
"null.fromString(String)",0,1,1,1
"null.getAcceptedIssuers()",0,n/a,n/a,n/a
"null.getDescription()",0,1,1,1
"null.getIcon()",0,1,1,1
"null.getKeyBinding()",0,n/a,n/a,n/a
"null.getKeys()",0,n/a,n/a,n/a
"null.getStyleableProperty(TitledPane)",1,2,1,2
"null.getText()",0,1,1,1
"null.getUserText()",0,n/a,n/a,n/a
"null.handleGetObject(String)",0,n/a,n/a,n/a
"null.interpolate(double)",0,n/a,n/a,n/a
"null.invalidated()",0,1,1,1
"null.isCancelled()",0,n/a,n/a,n/a
"null.isSettable(TitledPane)",1,1,2,2
"null.load(BibEntry)",2,n/a,n/a,n/a
"null.lookupTextField()",8,n/a,n/a,n/a
"null.onSuccess(Consumer<Void>)",1,n/a,n/a,n/a
"null.run()",0,n/a,n/a,n/a
"null.startEdit()",0,n/a,n/a,n/a
"null.succeeded()",3,n/a,n/a,n/a
"null.toString(Field)",1,1,2,2
"null.toString(MainTableColumnModel)",2,2,2,2
"null.toString(Month)",5,n/a,n/a,n/a
"null.toString(ParsedEntryLink)",1,n/a,n/a,n/a
"null.toString(T)",1,n/a,n/a,n/a
"null.toString(TemporalAccessor)",2,n/a,n/a,n/a
"null.toString(TreeItem<T>)",2,n/a,n/a,n/a
"null.updateItem(BibEntryType,boolean)",1,n/a,n/a,n/a
"null.updateItem(LogEventViewModel,boolean)",3,n/a,n/a,n/a
"null.updateItem(S,boolean)",14,n/a,n/a,n/a
"null.updateItem(T,boolean)",5,n/a,n/a,n/a
"null.warning(SAXParseException)",0,n/a,n/a,n/a
"org.jabref.JabRefPreferencesTest.getDefaultEncodingReturnsPreviouslyStoredEncoding()",0,1,1,1
"org.jabref.JabRefPreferencesTest.setUp()",0,1,1,1
"org.jabref.TestIconsProperties.testExistenceOfIconImagesReferencedFromIconsProperties()",2,1,3,3
"org.jabref.architecture.MainArchitectureTests.doNotUseApacheCommonsLang3(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUseAssertJ(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUseGlazedLists(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUseGlyphsDirectly(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUseJGoodies(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUseJavaAWT(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUseLogicInModel(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUsePaths(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.doNotUseSwing(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.respectLayeredArchitecture(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.restrictUsagesInLogic(JavaClasses)",0,1,1,1
"org.jabref.architecture.MainArchitectureTests.restrictUsagesInModel(JavaClasses)",0,1,1,1
"org.jabref.architecture.TestArchitectureTests.TestArchitectureTests()",0,1,1,1
"org.jabref.architecture.TestArchitectureTests.data()",0,1,1,1
"org.jabref.architecture.TestArchitectureTests.testsAreIndependent(String)",4,1,1,3
"org.jabref.benchmarks.Benchmarks.getOutputWriter()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.htmlToLatexConversion()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.inferBibDatabaseMode()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.init()",1,1,2,2
"org.jabref.benchmarks.Benchmarks.keywordGroupContains()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.latexToHTMLConversion()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.latexToUnicodeConversion()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.main(String[])",0,1,1,1
"org.jabref.benchmarks.Benchmarks.parallelSearch()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.parse()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.search()",0,1,1,1
"org.jabref.benchmarks.Benchmarks.write()",0,1,1,1
"org.jabref.cli.ArgumentProcessor.ArgumentProcessor(String[],Mode,PreferencesService)",0,1,1,1
"org.jabref.cli.ArgumentProcessor.automaticallySetFileLinks(List<ParserResult>)",1,1,2,2
"org.jabref.cli.ArgumentProcessor.doAuxImport(List<ParserResult>)",3,1,3,3
"org.jabref.cli.ArgumentProcessor.exportFile(List<ParserResult>,String[])",14,1,7,7
"org.jabref.cli.ArgumentProcessor.exportMatches(List<ParserResult>)",10,1,4,6
"org.jabref.cli.ArgumentProcessor.fetch(String)",9,4,6,6
"org.jabref.cli.ArgumentProcessor.generateAux(List<ParserResult>,String[])",7,2,5,5
"org.jabref.cli.ArgumentProcessor.getParserResults()",0,1,1,1
"org.jabref.cli.ArgumentProcessor.hasParserResults()",0,1,1,1
"org.jabref.cli.ArgumentProcessor.importAndOpenFiles()",28,1,16,16
"org.jabref.cli.ArgumentProcessor.importBibtexToOpenBase(String,ImportFormatPreferences)",1,1,2,2
"org.jabref.cli.ArgumentProcessor.importFile(Path,String)",3,2,3,3
"org.jabref.cli.ArgumentProcessor.importFile(String)",12,2,7,8
"org.jabref.cli.ArgumentProcessor.importPreferences()",1,1,2,2
"org.jabref.cli.ArgumentProcessor.importToOpenBase(String)",0,1,1,1
"org.jabref.cli.ArgumentProcessor.isBlank()",0,1,1,1
"org.jabref.cli.ArgumentProcessor.processArguments()",39,5,33,33
"org.jabref.cli.ArgumentProcessor.regenerateCitationKeys(List<ParserResult>)",3,1,3,3
"org.jabref.cli.ArgumentProcessor.resetPreferences(String)",9,1,5,5
"org.jabref.cli.ArgumentProcessor.saveDatabase(BibDatabase,String)",2,1,3,3
"org.jabref.cli.ArgumentProcessor.shouldShutDown()",1,1,3,3
"org.jabref.cli.ArgumentProcessor.writeMetadatatoPDFsOfEntry(BibDatabaseContext,String,BibEntry,Charset,FilePreferences,XmpPdfExporter,EmbeddedBibFilePdfExporter,boolean,boolean)",9,1,6,6
"org.jabref.cli.ArgumentProcessor.writeMetadatatoPdf(List<ParserResult>,String,Charset,XmpPreferences,FilePreferences,BibDatabaseMode,BibEntryTypesManager,FieldWriterPreferences,boolean,boolean)",8,3,6,6
"org.jabref.cli.ArgumentProcessor.writeMetadatatoPdfByCitekey(BibDatabaseContext,BibDatabase,Vector<String>,Charset,FilePreferences,XmpPdfExporter,EmbeddedBibFilePdfExporter,boolean,boolean)",5,3,4,4
"org.jabref.cli.ArgumentProcessor.writeMetadatatoPdfByFileNames(BibDatabaseContext,BibDatabase,Vector<String>,Charset,FilePreferences,XmpPdfExporter,EmbeddedBibFilePdfExporter,boolean,boolean)",28,1,10,10
"org.jabref.cli.AuxCommandLine.AuxCommandLine(String,BibDatabase)",0,1,1,1
"org.jabref.cli.AuxCommandLine.perform()",2,1,3,3
"org.jabref.cli.AuxCommandLineTest.setUp()",0,1,1,1
"org.jabref.cli.AuxCommandLineTest.test()",0,1,1,1
"org.jabref.cli.CrossrefFetcherEvaluator.CrossrefFetcherEvaluator()",0,1,1,1
"org.jabref.cli.CrossrefFetcherEvaluator.main(String[])",28,1,8,8
"org.jabref.cli.GenerateCharacterTable.GenerateCharacterTable()",0,1,1,1
"org.jabref.cli.GenerateCharacterTable.main(String[])",3,1,3,3
"org.jabref.cli.JabRefCLI.JabRefCLI(String[])",0,1,1,1
"org.jabref.cli.JabRefCLI.displayVersion()",0,1,1,1
"org.jabref.cli.JabRefCLI.getAuxImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.getBibtexImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.getExportMatches()",0,1,1,1
"org.jabref.cli.JabRefCLI.getExportMatchesSyntax()",0,1,1,1
"org.jabref.cli.JabRefCLI.getFetcherEngine()",0,1,1,1
"org.jabref.cli.JabRefCLI.getFileExport()",0,1,1,1
"org.jabref.cli.JabRefCLI.getFileImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.getImportToOpenBase()",0,1,1,1
"org.jabref.cli.JabRefCLI.getLeftOver()",0,1,1,1
"org.jabref.cli.JabRefCLI.getOptions()",0,1,1,1
"org.jabref.cli.JabRefCLI.getPreferencesExport()",0,1,1,1
"org.jabref.cli.JabRefCLI.getPreferencesImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.getPreferencesReset()",0,1,1,1
"org.jabref.cli.JabRefCLI.getVersionInfo()",0,1,1,1
"org.jabref.cli.JabRefCLI.getWriteMetadatatoPdf()",6,1,4,4
"org.jabref.cli.JabRefCLI.isAutomaticallySetFileLinks()",0,1,1,1
"org.jabref.cli.JabRefCLI.isAuxImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.isBibtexImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.isBlank()",0,1,1,1
"org.jabref.cli.JabRefCLI.isDebugLogging()",0,1,1,1
"org.jabref.cli.JabRefCLI.isDisableGui()",0,1,1,1
"org.jabref.cli.JabRefCLI.isEmbeddBibfileInPdf()",0,1,1,1
"org.jabref.cli.JabRefCLI.isExportMatches()",0,1,1,1
"org.jabref.cli.JabRefCLI.isFetcherEngine()",0,1,1,1
"org.jabref.cli.JabRefCLI.isFileExport()",0,1,1,1
"org.jabref.cli.JabRefCLI.isFileImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.isGenerateCitationKeys()",0,1,1,1
"org.jabref.cli.JabRefCLI.isHelp()",0,1,1,1
"org.jabref.cli.JabRefCLI.isImportToOpenBase()",0,1,1,1
"org.jabref.cli.JabRefCLI.isLoadSession()",0,1,1,1
"org.jabref.cli.JabRefCLI.isPreferencesExport()",0,1,1,1
"org.jabref.cli.JabRefCLI.isPreferencesImport()",0,1,1,1
"org.jabref.cli.JabRefCLI.isPreferencesReset()",0,1,1,1
"org.jabref.cli.JabRefCLI.isShowVersion()",0,1,1,1
"org.jabref.cli.JabRefCLI.isWriteMetadatatoPdf()",0,1,1,1
"org.jabref.cli.JabRefCLI.isWriteXMPtoPdf()",0,1,1,1
"org.jabref.cli.JabRefCLI.printUsage()",0,1,1,1
"org.jabref.cli.JabRefCLITest.emptyCLILeftOversLongOptions()",0,1,1,1
"org.jabref.cli.JabRefCLITest.emptyCLILeftOversShortOptions()",0,1,1,1
"org.jabref.cli.JabRefCLITest.emptyLeftOversCLILongImportingBibtex()",0,1,1,1
"org.jabref.cli.JabRefCLITest.emptyLeftOversCLIShortImportingBibtex()",0,1,1,1
"org.jabref.cli.JabRefCLITest.emptyPreferencesLeftOver()",0,1,1,1
"org.jabref.cli.JabRefCLITest.guiDisabledForPreferencesExport()",0,1,1,1
"org.jabref.cli.JabRefCLITest.guiIsDisabledLongOptions()",0,1,1,1
"org.jabref.cli.JabRefCLITest.guiIsDisabledShortOptions()",0,1,1,1
"org.jabref.cli.JabRefCLITest.recognizesImportBibtexLong()",0,1,1,1
"org.jabref.cli.JabRefCLITest.recognizesImportBibtexShort()",0,1,1,1
"org.jabref.cli.JabRefCLITest.successfulExportOfPreferences()",0,1,1,1
"org.jabref.cli.JabRefCLITest.successfulParsingOfBibtexImportLong()",0,1,1,1
"org.jabref.cli.JabRefCLITest.successfulParsingOfBibtexImportShort()",0,1,1,1
"org.jabref.cli.JabRefCLITest.successfulParsingOfFileExportCLILongOptions()",0,1,1,1
"org.jabref.cli.JabRefCLITest.successfulParsingOfFileExportShortOptions()",0,1,1,1
"org.jabref.cli.JabRefCLITest.successfulParsingOfFileImportCLILongOptions()",0,1,1,1
"org.jabref.cli.JabRefCLITest.successfulParsingOfFileImportShortOptions()",0,1,1,1
"org.jabref.cli.SystemOutputPrinter.setStatus(String)",0,1,1,1
"org.jabref.cli.SystemOutputPrinter.showMessage(String)",0,1,1,1
"org.jabref.cli.SystemOutputPrinter.showMessage(String,String,int)",0,1,1,1
"org.jabref.gui.ClipBoardManager.ClipBoardManager(Clipboard,Clipboard,ImportFormatReader,PreferencesService)",0,1,1,1
"org.jabref.gui.ClipBoardManager.ClipBoardManager(PreferencesService)",0,1,1,1
"org.jabref.gui.ClipBoardManager.addX11Support(TextInputControl)",6,1,4,4
"org.jabref.gui.ClipBoardManager.extractData()",1,2,2,2
"org.jabref.gui.ClipBoardManager.fetchByArXiv(ArXivIdentifier)",1,1,2,2
"org.jabref.gui.ClipBoardManager.fetchByDOI(DOI)",1,1,2,2
"org.jabref.gui.ClipBoardManager.getContents()",1,2,1,2
"org.jabref.gui.ClipBoardManager.getContentsPrimary()",7,3,5,5
"org.jabref.gui.ClipBoardManager.handleBibTeXData(String)",1,1,2,2
"org.jabref.gui.ClipBoardManager.handleStringData(String)",4,4,5,5
"org.jabref.gui.ClipBoardManager.setContent(ClipboardContent)",0,1,1,1
"org.jabref.gui.ClipBoardManager.setContent(List<BibEntry>)",0,1,1,1
"org.jabref.gui.ClipBoardManager.setContent(String)",0,1,1,1
"org.jabref.gui.ClipBoardManager.setHtmlContent(String,String)",0,1,1,1
"org.jabref.gui.ClipBoardManager.setPrimaryClipboardContent(ClipboardContent)",1,1,2,2
"org.jabref.gui.ClipBoardManager.tryImportFormats(String)",1,1,2,2
"org.jabref.gui.DefaultInjector.createDependency(Class<?>)",14,12,13,13
"org.jabref.gui.DefaultInjector.injectMembers(Object,Function<String, Object>)",0,1,1,1
"org.jabref.gui.DefaultInjector.instantiatePresenter(Class<T>,Function<String, Object>)",0,1,1,1
"org.jabref.gui.DialogService.showChoiceDialogAndWait(String,String,String,Collection<T>)",0,1,1,1
"org.jabref.gui.DialogService.showErrorDialogAndWait(Exception)",0,1,1,1
"org.jabref.gui.DragAndDropHelper.getBibFiles(Dragboard)",2,2,2,2
"org.jabref.gui.DragAndDropHelper.hasBibFiles(Dragboard)",0,1,1,1
"org.jabref.gui.EntryTypeView.EntryTypeView(LibraryTab,DialogService,PreferencesService)",4,1,3,3
"org.jabref.gui.EntryTypeView.addEntriesToPane(FlowPane,Collection<? extends BibEntryType>)",3,1,3,3
"org.jabref.gui.EntryTypeView.focusTextField(Event)",0,1,1,1
"org.jabref.gui.EntryTypeView.getChoice()",0,1,1,1
"org.jabref.gui.EntryTypeView.getDescription(EntryType)",4,34,34,34
"org.jabref.gui.EntryTypeView.initialize()",10,1,5,6
"org.jabref.gui.EntryTypeView.runFetcherWorker(Event)",0,1,1,1
"org.jabref.gui.EntryTypeView.setEntryTypeForReturnAndClose(Optional<BibEntryType>)",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.EntryTypeViewModel(PreferencesService,LibraryTab,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.FetcherWorker.call()",1,2,2,2
"org.jabref.gui.EntryTypeViewModel.fetcherItemsProperty()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.getFocusAndSelectAllProperty()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.getLastSelectedFetcher()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.idFieldValidationStatus()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.idTextProperty()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.runFetcherWorker()",18,1,7,10
"org.jabref.gui.EntryTypeViewModel.searchSuccesfulProperty()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.searchingProperty()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.selectedItemProperty()",0,1,1,1
"org.jabref.gui.EntryTypeViewModel.stopFetching()",1,1,2,2
"org.jabref.gui.EntryTypeViewModel.storeSelectedFetcher()",0,1,1,1
"org.jabref.gui.FXDialog.FXDialog(AlertType)",0,1,1,1
"org.jabref.gui.FXDialog.FXDialog(AlertType,String)",0,1,1,1
"org.jabref.gui.FXDialog.FXDialog(AlertType,String,Image)",0,1,1,1
"org.jabref.gui.FXDialog.FXDialog(AlertType,String,Image,boolean)",0,1,1,1
"org.jabref.gui.FXDialog.FXDialog(AlertType,String,boolean)",0,1,1,1
"org.jabref.gui.FXDialog.FXDialog(AlertType,boolean)",4,1,3,3
"org.jabref.gui.FXDialog.getDialogWindow()",0,1,1,1
"org.jabref.gui.FXDialog.setDialogIcon(Image)",0,1,1,1
"org.jabref.gui.FallbackExceptionHandler.installExceptionHandler()",0,1,1,1
"org.jabref.gui.FallbackExceptionHandler.uncaughtException(Thread,Throwable)",0,1,1,1
"org.jabref.gui.Globals.Globals()",0,1,1,1
"org.jabref.gui.Globals.getClipboardManager()",1,1,1,2
"org.jabref.gui.Globals.getFileUpdateMonitor()",0,1,1,1
"org.jabref.gui.Globals.getKeyPrefs()",1,1,2,2
"org.jabref.gui.Globals.getTelemetryClient()",0,1,1,1
"org.jabref.gui.Globals.shutdownThreadPools()",0,1,1,1
"org.jabref.gui.Globals.startBackgroundTasks()",2,1,3,3
"org.jabref.gui.Globals.startTelemetryClient()",1,1,2,2
"org.jabref.gui.Globals.stopBackgroundTasks()",0,1,1,1
"org.jabref.gui.Globals.stopTelemetryClient()",0,1,1,1
"org.jabref.gui.JabRefDialogService.JabRefDialogService(Window,Pane,PreferencesService)",0,1,1,1
"org.jabref.gui.JabRefDialogService.createDialog(AlertType,String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.createDialogWithOptOut(AlertType,String,String,String,Consumer<Boolean>)",0,1,1,1
"org.jabref.gui.JabRefDialogService.getConfiguredDirectoryChooser(DirectoryDialogConfiguration)",0,1,1,1
"org.jabref.gui.JabRefDialogService.getConfiguredFileChooser(FileDialogConfiguration)",0,1,1,1
"org.jabref.gui.JabRefDialogService.notify(String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.shortenDialogMessage(String)",1,2,2,2
"org.jabref.gui.JabRefDialogService.showBackgroundProgressDialogAndWait(String,String,StateManager)",2,1,2,2
"org.jabref.gui.JabRefDialogService.showChoiceDialogAndWait(String,String,String,T,Collection<T>)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showConfirmationDialogAndWait(String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showConfirmationDialogAndWait(String,String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showConfirmationDialogAndWait(String,String,String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showConfirmationDialogWithOptOutAndWait(String,String,String,Consumer<Boolean>)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showConfirmationDialogWithOptOutAndWait(String,String,String,String,String,Consumer<Boolean>)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showCustomButtonDialogAndWait(AlertType,String,String,ButtonType...)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showCustomDialog(BaseDialog<?>)",1,1,2,2
"org.jabref.gui.JabRefDialogService.showCustomDialogAndWait(Dialog<R>)",1,1,2,2
"org.jabref.gui.JabRefDialogService.showCustomDialogAndWait(String,DialogPane,ButtonType...)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showDirectorySelectionDialog(DirectoryDialogConfiguration)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showErrorDialogAndWait(String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showErrorDialogAndWait(String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showErrorDialogAndWait(String,String,Throwable)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showErrorDialogAndWait(String,Throwable)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showFileOpenDialog(FileDialogConfiguration)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showFileOpenDialogAndGetMultipleFiles(FileDialogConfiguration)",1,1,2,2
"org.jabref.gui.JabRefDialogService.showFileOpenFromArchiveDialog(Path)",1,1,1,2
"org.jabref.gui.JabRefDialogService.showFileSaveDialog(FileDialogConfiguration)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showInformationDialogAndWait(String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showInputDialogAndWait(String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showInputDialogWithDefaultAndWait(String,String,String)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showPrintDialog(PrinterJob)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showProgressDialog(String,String,Task<V>)",0,1,1,1
"org.jabref.gui.JabRefDialogService.showWarningDialogAndWait(String,String)",0,1,1,1
"org.jabref.gui.JabRefExecutorService.JabRefExecutorService()",0,1,1,1
"org.jabref.gui.JabRefExecutorService.NamedRunnable.NamedRunnable(String,Runnable)",0,1,1,1
"org.jabref.gui.JabRefExecutorService.NamedRunnable.run()",0,1,1,1
"org.jabref.gui.JabRefExecutorService.execute(Callable<T>)",0,1,1,1
"org.jabref.gui.JabRefExecutorService.execute(Runnable)",0,1,1,1
"org.jabref.gui.JabRefExecutorService.executeAll(Collection<Callable<T>>)",1,1,2,2
"org.jabref.gui.JabRefExecutorService.executeAll(Collection<Callable<T>>,int,TimeUnit)",1,1,2,2
"org.jabref.gui.JabRefExecutorService.executeAndWait(Runnable)",2,1,2,3
"org.jabref.gui.JabRefExecutorService.executeInterruptableTask(Runnable,String)",0,1,1,1
"org.jabref.gui.JabRefExecutorService.executeInterruptableTaskAndWait(Runnable)",2,1,2,3
"org.jabref.gui.JabRefExecutorService.gracefullyShutdown(ExecutorService)",5,1,4,4
"org.jabref.gui.JabRefExecutorService.manageRemoteThread(Thread)",2,2,2,2
"org.jabref.gui.JabRefExecutorService.shutdownEverything()",0,1,1,1
"org.jabref.gui.JabRefExecutorService.stopRemoteThread()",1,1,2,2
"org.jabref.gui.JabRefExecutorService.submit(TimerTask,long)",0,1,1,1
"org.jabref.gui.JabRefFrame.CloseAction.execute()",0,1,1,1
"org.jabref.gui.JabRefFrame.CloseAllDatabaseAction.execute()",1,1,2,2
"org.jabref.gui.JabRefFrame.CloseDatabaseAction.CloseDatabaseAction()",0,1,1,1
"org.jabref.gui.JabRefFrame.CloseDatabaseAction.CloseDatabaseAction(LibraryTab)",0,1,1,1
"org.jabref.gui.JabRefFrame.CloseDatabaseAction.execute()",0,1,1,1
"org.jabref.gui.JabRefFrame.CloseOthersDatabaseAction.CloseOthersDatabaseAction(LibraryTab)",0,1,1,1
"org.jabref.gui.JabRefFrame.CloseOthersDatabaseAction.execute()",3,1,3,3
"org.jabref.gui.JabRefFrame.JabRefFrame(Stage)",5,1,3,3
"org.jabref.gui.JabRefFrame.OpenDatabaseFolder.OpenDatabaseFolder(BibDatabaseContext)",0,1,1,1
"org.jabref.gui.JabRefFrame.OpenDatabaseFolder.execute()",2,1,2,2
"org.jabref.gui.JabRefFrame.UndoRedoEventManager.listen(AddUndoableActionEvent)",0,1,1,1
"org.jabref.gui.JabRefFrame.UndoRedoEventManager.listen(UndoRedoEvent)",0,1,1,1
"org.jabref.gui.JabRefFrame.UndoRedoEventManager.updateTexts(UndoChangeEvent)",0,1,1,1
"org.jabref.gui.JabRefFrame.about()",0,1,1,1
"org.jabref.gui.JabRefFrame.addImportedEntries(LibraryTab,ParserResult)",0,1,1,1
"org.jabref.gui.JabRefFrame.addParserResult(ParserResult,boolean)",8,1,4,4
"org.jabref.gui.JabRefFrame.addTab(BibDatabaseContext,boolean)",0,1,1,1
"org.jabref.gui.JabRefFrame.addTab(LibraryTab,boolean)",2,1,3,3
"org.jabref.gui.JabRefFrame.closeCurrentTab()",0,1,1,1
"org.jabref.gui.JabRefFrame.closeTab(LibraryTab)",11,6,6,8
"org.jabref.gui.JabRefFrame.confirmClose(LibraryTab)",7,3,5,6
"org.jabref.gui.JabRefFrame.confirmEmptyEntry(LibraryTab,BibDatabaseContext)",11,3,6,7
"org.jabref.gui.JabRefFrame.createMenu()",2,1,3,3
"org.jabref.gui.JabRefFrame.createNewEntryFromIdButton()",4,1,3,3
"org.jabref.gui.JabRefFrame.createTabContextMenuFor(LibraryTab,KeyBindingRepository)",0,1,1,1
"org.jabref.gui.JabRefFrame.createTaskIndicator()",11,1,6,6
"org.jabref.gui.JabRefFrame.createToolbar()",0,1,1,1
"org.jabref.gui.JabRefFrame.getBasePanelCount()",0,1,1,1
"org.jabref.gui.JabRefFrame.getCurrentLibraryTab()",2,2,2,3
"org.jabref.gui.JabRefFrame.getDialogService()",0,1,1,1
"org.jabref.gui.JabRefFrame.getFileHistory()",0,1,1,1
"org.jabref.gui.JabRefFrame.getGlobalSearchBar()",0,1,1,1
"org.jabref.gui.JabRefFrame.getLibraryTabAt(int)",0,1,1,1
"org.jabref.gui.JabRefFrame.getLibraryTabs()",0,1,1,1
"org.jabref.gui.JabRefFrame.getOpenDatabaseAction()",0,1,1,1
"org.jabref.gui.JabRefFrame.getPushToApplicationsManager()",0,1,1,1
"org.jabref.gui.JabRefFrame.getTabbedPane()",0,1,1,1
"org.jabref.gui.JabRefFrame.getUndoManager()",0,1,1,1
"org.jabref.gui.JabRefFrame.init()",11,2,5,5
"org.jabref.gui.JabRefFrame.initDragAndDrop()",10,2,3,4
"org.jabref.gui.JabRefFrame.initKeyBindings()",15,1,6,19
"org.jabref.gui.JabRefFrame.initLayout()",12,1,4,4
"org.jabref.gui.JabRefFrame.initShowTrackingNotification()",1,1,2,2
"org.jabref.gui.JabRefFrame.openAction(String)",0,1,1,1
"org.jabref.gui.JabRefFrame.quit()",17,8,8,11
"org.jabref.gui.JabRefFrame.readyForAutosave(BibDatabaseContext)",3,1,4,4
"org.jabref.gui.JabRefFrame.removeTab(LibraryTab)",0,1,1,1
"org.jabref.gui.JabRefFrame.setDividerPosition()",1,1,2,2
"org.jabref.gui.JabRefFrame.setupAllTables()",2,1,2,2
"org.jabref.gui.JabRefFrame.showLibraryTab(LibraryTab)",0,1,1,1
"org.jabref.gui.JabRefFrame.showLibraryTabAt(int)",0,1,1,1
"org.jabref.gui.JabRefFrame.showTrackingNotification()",1,1,2,2
"org.jabref.gui.JabRefFrame.tearDownJabRef(List<String>)",4,1,3,3
"org.jabref.gui.JabRefFrame.trackOpenNewDatabase(LibraryTab)",0,1,1,1
"org.jabref.gui.JabRefGUI.JabRefGUI(Stage,List<ParserResult>,boolean,PreferencesService)",0,1,1,1
"org.jabref.gui.JabRefGUI.debugLogWindowState(Stage)",1,1,2,2
"org.jabref.gui.JabRefGUI.getMainFrame()",0,1,1,1
"org.jabref.gui.JabRefGUI.isLoaded(Path)",1,1,2,2
"org.jabref.gui.JabRefGUI.isWindowPositionOutOfBounds()",0,1,1,1
"org.jabref.gui.JabRefGUI.openDatabases()",17,1,12,13
"org.jabref.gui.JabRefGUI.openLastEditedDatabases()",9,4,5,7
"org.jabref.gui.JabRefGUI.openWindow(Stage)",9,1,7,7
"org.jabref.gui.JabRefGUI.saveWindowState(Stage)",0,1,1,1
"org.jabref.gui.JabRefLauncher.main(String[])",0,1,1,1
"org.jabref.gui.JabRefMain.applyPreferences(PreferencesService)",0,1,1,1
"org.jabref.gui.JabRefMain.clearOldSearchIndices()",5,1,5,5
"org.jabref.gui.JabRefMain.configureProxy(ProxyPreferences)",2,1,3,3
"org.jabref.gui.JabRefMain.handleMultipleAppInstances(String[],PreferencesService)",8,4,4,4
"org.jabref.gui.JabRefMain.main(String[])",0,1,1,1
"org.jabref.gui.JabRefMain.start(Stage)",4,2,5,5
"org.jabref.gui.JabRefMain.stop()",0,1,1,1
"org.jabref.gui.LibraryTab.EntriesRemovedListener.listen(EntriesRemovedEvent)",0,1,1,1
"org.jabref.gui.LibraryTab.Factory.createLibraryTab(JabRefFrame,PreferencesService,StateManager,Path,BackgroundTask<ParserResult>)",0,1,1,1
"org.jabref.gui.LibraryTab.GroupTreeListener.listen(EntriesAddedEvent)",2,2,2,3
"org.jabref.gui.LibraryTab.IndexUpdateListener.IndexUpdateListener()",1,1,2,2
"org.jabref.gui.LibraryTab.IndexUpdateListener.listen(EntriesAddedEvent)",2,1,3,3
"org.jabref.gui.LibraryTab.IndexUpdateListener.listen(EntriesRemovedEvent)",2,1,3,3
"org.jabref.gui.LibraryTab.IndexUpdateListener.listen(FieldChangedEvent)",3,1,3,3
"org.jabref.gui.LibraryTab.LibraryTab(JabRefFrame,PreferencesService,StateManager,BibDatabaseContext,ExternalFileTypes)",0,1,1,1
"org.jabref.gui.LibraryTab.SearchListener.listen(EntriesAddedEvent)",0,1,1,1
"org.jabref.gui.LibraryTab.SearchListener.listen(EntriesRemovedEvent)",0,1,1,1
"org.jabref.gui.LibraryTab.SearchListener.listen(EntryChangedEvent)",0,1,1,1
"org.jabref.gui.LibraryTab.addChangedInformation(StringBuilder,String)",0,1,1,1
"org.jabref.gui.LibraryTab.addModeInfo(StringBuilder,BibDatabaseContext)",0,1,1,1
"org.jabref.gui.LibraryTab.addSharedDbInformation(StringBuilder,BibDatabaseContext)",0,1,1,1
"org.jabref.gui.LibraryTab.changedProperty()",0,1,1,1
"org.jabref.gui.LibraryTab.cleanUp()",0,1,1,1
"org.jabref.gui.LibraryTab.clearAndSelect(BibEntry)",0,1,1,1
"org.jabref.gui.LibraryTab.closeBottomPane()",0,1,1,1
"org.jabref.gui.LibraryTab.collectAllDatabasePaths()",0,1,1,1
"org.jabref.gui.LibraryTab.copy()",0,1,1,1
"org.jabref.gui.LibraryTab.createLoadingAnimationLayout()",0,1,1,1
"org.jabref.gui.LibraryTab.createMainTable()",0,1,1,1
"org.jabref.gui.LibraryTab.cut()",0,1,1,1
"org.jabref.gui.LibraryTab.delete(BibEntry)",0,1,1,1
"org.jabref.gui.LibraryTab.delete(boolean)",0,1,1,1
"org.jabref.gui.LibraryTab.delete(boolean,List<BibEntry>)",4,3,3,5
"org.jabref.gui.LibraryTab.editEntryAndFocusField(BibEntry,Field)",0,1,1,1
"org.jabref.gui.LibraryTab.ensureNotShowingBottomPanel(List<BibEntry>)",2,1,3,3
"org.jabref.gui.LibraryTab.entryEditorClosing()",0,1,1,1
"org.jabref.gui.LibraryTab.feedData(BibDatabaseContext)",1,1,2,2
"org.jabref.gui.LibraryTab.formatOutputMessage(String,int)",1,1,2,2
"org.jabref.gui.LibraryTab.frame()",0,1,1,1
"org.jabref.gui.LibraryTab.getAnnotationCache()",0,1,1,1
"org.jabref.gui.LibraryTab.getBibDatabaseContext()",0,1,1,1
"org.jabref.gui.LibraryTab.getCitationStyleCache()",0,1,1,1
"org.jabref.gui.LibraryTab.getCurrentSearchQuery()",0,1,1,1
"org.jabref.gui.LibraryTab.getDataLoadingTask()",0,1,1,1
"org.jabref.gui.LibraryTab.getDatabase()",0,1,1,1
"org.jabref.gui.LibraryTab.getEntryEditor()",0,1,1,1
"org.jabref.gui.LibraryTab.getIndexingTaskManager()",0,1,1,1
"org.jabref.gui.LibraryTab.getMainTable()",0,1,1,1
"org.jabref.gui.LibraryTab.getMode()",0,1,1,1
"org.jabref.gui.LibraryTab.getSelectedEntries()",0,1,1,1
"org.jabref.gui.LibraryTab.getShowing()",0,1,1,1
"org.jabref.gui.LibraryTab.getSuggestionProviders()",0,1,1,1
"org.jabref.gui.LibraryTab.getUndoManager()",0,1,1,1
"org.jabref.gui.LibraryTab.insertEntries(List<BibEntry>)",5,1,4,4
"org.jabref.gui.LibraryTab.insertEntry(BibEntry)",1,1,2,2
"org.jabref.gui.LibraryTab.isDatabaseReadyForAutoSave(BibDatabaseContext)",3,1,4,4
"org.jabref.gui.LibraryTab.isModified()",0,1,1,1
"org.jabref.gui.LibraryTab.isSaving()",0,1,1,1
"org.jabref.gui.LibraryTab.listen(BibDatabaseContextChangedEvent)",0,1,1,1
"org.jabref.gui.LibraryTab.markBaseChanged()",0,1,1,1
"org.jabref.gui.LibraryTab.markChangedOrUnChanged()",3,1,4,4
"org.jabref.gui.LibraryTab.markNonUndoableBaseChanged()",0,1,1,1
"org.jabref.gui.LibraryTab.nonUndoableChangeProperty()",0,1,1,1
"org.jabref.gui.LibraryTab.onDatabaseLoadingFailed(Exception)",0,1,1,1
"org.jabref.gui.LibraryTab.onDatabaseLoadingStarted()",0,1,1,1
"org.jabref.gui.LibraryTab.onDatabaseLoadingSucceed(ParserResult)",0,1,1,1
"org.jabref.gui.LibraryTab.paste()",0,1,1,1
"org.jabref.gui.LibraryTab.registerUndoableChanges(List<FieldChange>)",2,1,3,3
"org.jabref.gui.LibraryTab.resetChangeMonitorAndChangePane()",0,1,1,1
"org.jabref.gui.LibraryTab.resetChangedProperties()",0,1,1,1
"org.jabref.gui.LibraryTab.saveDividerLocation(Number)",1,1,2,2
"org.jabref.gui.LibraryTab.selectNextEntry()",0,1,1,1
"org.jabref.gui.LibraryTab.selectPreviousEntry()",0,1,1,1
"org.jabref.gui.LibraryTab.setCurrentSearchQuery(Optional<SearchQuery>)",0,1,1,1
"org.jabref.gui.LibraryTab.setDataLoadingTask(BackgroundTask<ParserResult>)",0,1,1,1
"org.jabref.gui.LibraryTab.setMode(BasePanelMode)",0,1,1,1
"org.jabref.gui.LibraryTab.setSaving(boolean)",0,1,1,1
"org.jabref.gui.LibraryTab.setupAutoCompletion()",2,1,2,2
"org.jabref.gui.LibraryTab.setupMainPanel()",4,1,3,3
"org.jabref.gui.LibraryTab.showAndEdit(BibEntry)",1,1,2,2
"org.jabref.gui.LibraryTab.showBottomPane(BasePanelMode)",3,2,3,3
"org.jabref.gui.LibraryTab.showDeleteConfirmationDialog(int)",4,2,3,3
"org.jabref.gui.LibraryTab.updateEntryEditorIfShowing()",1,1,2,2
"org.jabref.gui.LibraryTab.updateSearchManager()",0,1,1,1
"org.jabref.gui.LibraryTab.updateTabTitle(boolean)",19,1,9,11
"org.jabref.gui.OpenConsoleAction.OpenConsoleAction(BibDatabaseContext,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.OpenConsoleAction.OpenConsoleAction(StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.OpenConsoleAction.execute()",2,1,2,2
"org.jabref.gui.SendAsEMailAction.SendAsEMailAction(DialogService,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.SendAsEMailAction.execute()",0,1,1,1
"org.jabref.gui.SendAsEMailAction.sendEmail()",13,3,10,10
"org.jabref.gui.StateManager.StateManager()",0,1,1,1
"org.jabref.gui.StateManager.activeDatabaseProperty()",0,1,1,1
"org.jabref.gui.StateManager.activeGroupProperty()",0,1,1,1
"org.jabref.gui.StateManager.activeSearchQueryProperty()",0,1,1,1
"org.jabref.gui.StateManager.addBackgroundTask(Task<?>)",0,1,1,1
"org.jabref.gui.StateManager.clearSearchQuery()",0,1,1,1
"org.jabref.gui.StateManager.clearSelectedGroups(BibDatabaseContext)",0,1,1,1
"org.jabref.gui.StateManager.focusOwnerProperty()",0,1,1,1
"org.jabref.gui.StateManager.getActiveDatabase()",0,1,1,1
"org.jabref.gui.StateManager.getAnyTaskRunning()",0,1,1,1
"org.jabref.gui.StateManager.getBackgroundTasks()",0,1,1,1
"org.jabref.gui.StateManager.getDialogWindowState(String)",0,1,1,1
"org.jabref.gui.StateManager.getEntriesInCurrentDatabase()",0,1,1,1
"org.jabref.gui.StateManager.getFocusOwner()",0,1,1,1
"org.jabref.gui.StateManager.getLocalDragboard()",0,1,1,1
"org.jabref.gui.StateManager.getOpenDatabases()",0,1,1,1
"org.jabref.gui.StateManager.getSearchResultSize()",0,1,1,1
"org.jabref.gui.StateManager.getSelectedEntries()",0,1,1,1
"org.jabref.gui.StateManager.getSelectedGroup(BibDatabaseContext)",1,1,2,2
"org.jabref.gui.StateManager.getTasksProgress()",0,1,1,1
"org.jabref.gui.StateManager.setActiveSearchResultSize(BibDatabaseContext,IntegerProperty)",0,1,1,1
"org.jabref.gui.StateManager.setDialogWindowState(String,DialogWindowState)",0,1,1,1
"org.jabref.gui.StateManager.setSearchQuery(SearchQuery)",0,1,1,1
"org.jabref.gui.StateManager.setSelectedEntries(List<BibEntry>)",0,1,1,1
"org.jabref.gui.StateManager.setSelectedGroups(BibDatabaseContext,List<GroupTreeNode>)",0,1,1,1
"org.jabref.gui.UpdateTimestampListener.UpdateTimestampListener(PreferencesService)",0,1,1,1
"org.jabref.gui.UpdateTimestampListener.listen(EntryChangedEvent)",2,1,3,3
"org.jabref.gui.UpdateTimestampListenerTest.setUp()",0,1,1,1
"org.jabref.gui.UpdateTimestampListenerTest.updateTimestampDisabled()",0,1,1,1
"org.jabref.gui.UpdateTimestampListenerTest.updateTimestampEnabled()",0,1,1,1
"org.jabref.gui.WaitForSaveFinishedDialog.WaitForSaveFinishedDialog(DialogService)",0,1,1,1
"org.jabref.gui.WaitForSaveFinishedDialog.showAndWait(List<LibraryTab>)",9,3,4,4
"org.jabref.gui.actions.Action.getDescription()",0,1,1,1
"org.jabref.gui.actions.Action.getIcon()",0,1,1,1
"org.jabref.gui.actions.Action.getKeyBinding()",0,1,1,1
"org.jabref.gui.actions.ActionFactory.ActionFactory(KeyBindingRepository)",0,1,1,1
"org.jabref.gui.actions.ActionFactory.configureIconButton(Action,Command,ButtonBase)",0,1,1,1
"org.jabref.gui.actions.ActionFactory.configureMenuItem(Action,Command,MenuItem)",9,1,4,4
"org.jabref.gui.actions.ActionFactory.createCheckMenuItem(Action,Command,boolean)",0,1,1,1
"org.jabref.gui.actions.ActionFactory.createIconButton(Action,Command)",0,1,1,1
"org.jabref.gui.actions.ActionFactory.createMenu(Action)",0,1,1,1
"org.jabref.gui.actions.ActionFactory.createMenuItem(Action,Command)",0,1,1,1
"org.jabref.gui.actions.ActionFactory.createSubMenu(Action,MenuItem...)",0,1,1,1
"org.jabref.gui.actions.ActionFactory.getAssociatedNode(MenuItem)",4,2,3,3
"org.jabref.gui.actions.ActionFactory.setGraphic(MenuItem,Action)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.hasLinkedFileForSelectedEntries(StateManager)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.isAnyFieldSetForSelectedEntry(List<Field>,StateManager)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.isFieldSetForSelectedEntry(Field,StateManager)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.isFilePresentForSelectedEntry(StateManager,PreferencesService)",7,3,3,4
"org.jabref.gui.actions.ActionHelper.isOpenMultiDatabase(TabPane)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.needsDatabase(StateManager)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.needsEntriesSelected(StateManager)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.needsEntriesSelected(int,StateManager)",0,1,1,1
"org.jabref.gui.actions.ActionHelper.needsSharedDatabase(StateManager)",0,1,1,1
"org.jabref.gui.actions.JabRefAction.JabRefAction(Action,Command,KeyBindingRepository)",0,1,1,1
"org.jabref.gui.actions.JabRefAction.JabRefAction(Action,Command,KeyBindingRepository,Sources)",4,1,3,3
"org.jabref.gui.actions.JabRefAction.JabRefAction(Action,KeyBindingRepository)",0,1,1,1
"org.jabref.gui.actions.JabRefAction.getActionName(Action,Command)",6,3,7,7
"org.jabref.gui.actions.JabRefAction.trackExecute(String)",0,1,1,1
"org.jabref.gui.actions.JabRefAction.trackUserActionSource(String,Sources)",0,1,1,1
"org.jabref.gui.actions.SimpleCommand.getProgress()",0,1,1,1
"org.jabref.gui.actions.SimpleCommand.getStatusMessage()",0,1,1,1
"org.jabref.gui.actions.SimpleCommand.progressProperty()",0,1,1,1
"org.jabref.gui.actions.SimpleCommand.setExecutable(boolean)",0,1,1,1
"org.jabref.gui.actions.SimpleCommand.statusMessageProperty()",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String)",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String,JabRefIcons)",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String,JabRefIcons,KeyBinding)",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String,KeyBinding)",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String,String)",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String,String,JabRefIcons)",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String,String,JabRefIcons,KeyBinding)",0,1,1,1
"org.jabref.gui.actions.StandardActions.StandardActions(String,String,KeyBinding)",0,1,1,1
"org.jabref.gui.actions.StandardActions.getDescription()",0,1,1,1
"org.jabref.gui.actions.StandardActions.getIcon()",0,1,1,1
"org.jabref.gui.actions.StandardActions.getKeyBinding()",0,1,1,1
"org.jabref.gui.actions.StandardActions.getText()",0,1,1,1
"org.jabref.gui.autocompleter.AppendPersonNamesStrategy.AppendPersonNamesStrategy()",0,1,1,1
"org.jabref.gui.autocompleter.AppendPersonNamesStrategy.AppendPersonNamesStrategy(boolean)",0,1,1,1
"org.jabref.gui.autocompleter.AppendPersonNamesStrategy.getDelimiter()",2,2,1,2
"org.jabref.gui.autocompleter.AppendPersonNamesStrategyTest.testWithParam(boolean,String)",0,1,1,1
"org.jabref.gui.autocompleter.AppendPersonNamesStrategyTest.testWithoutParam()",0,1,1,1
"org.jabref.gui.autocompleter.AppendWordsStrategy.analyze(String)",0,1,1,1
"org.jabref.gui.autocompleter.AppendWordsStrategy.determinePrefixAndReturnRemainder(String,String)",2,2,2,2
"org.jabref.gui.autocompleter.AppendWordsStrategy.getDelimiter()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompleteFirstNameMode.parse(String)",1,1,1,2
"org.jabref.gui.autocompleter.AutoCompletePreferences.AutoCompletePreferences(boolean,AutoCompleteFirstNameMode,NameFormat,Set<Field>,JournalAbbreviationPreferences)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletePreferences.getCompleteFields()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletePreferences.getCompleteNamesAsString()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletePreferences.getFirstNameMode()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletePreferences.getJournalAbbreviationPreferences()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletePreferences.getNameFormat()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletePreferences.shouldAutoComplete()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompleterUtil.getRequest(String)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionInput.AutoCompletionInput(String,String)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionInput.getPrefix()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionInput.getUnfinishedPart()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.AutoCompletionTextInputBinding(TextInputControl,Callback<ISuggestionRequest, Collection<T>>)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.AutoCompletionTextInputBinding(TextInputControl,Callback<ISuggestionRequest, Collection<T>>,StringConverter<T>)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.AutoCompletionTextInputBinding(TextInputControl,Callback<ISuggestionRequest, Collection<T>>,StringConverter<T>,AutoCompletionStrategy)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.autoComplete(TextInputControl,Callback<ISuggestionRequest, Collection<T>>)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.autoComplete(TextInputControl,Callback<ISuggestionRequest, Collection<T>>,AutoCompletionStrategy)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.autoComplete(TextInputControl,Callback<ISuggestionRequest, Collection<T>>,StringConverter<T>)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.autoComplete(TextInputControl,Callback<ISuggestionRequest, Collection<T>>,StringConverter<T>,AutoCompletionStrategy)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.completeUserInput(T)",1,1,1,2
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.defaultStringConverter()",2,1,2,2
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.dispose()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.getCompletionTarget()",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.setShowOnFocus(boolean)",0,1,1,1
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding.setUserInputText(String)",1,1,1,2
"org.jabref.gui.autocompleter.BibEntrySuggestionProvider.BibEntrySuggestionProvider(BibDatabase)",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProvider.getComparator()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProvider.getEquivalence()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProvider.getSource()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProvider.isMatch(BibEntry,ISuggestionRequest)",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeAfterAddingEmptyEntryReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeBeginningOfKeyReturnsKey()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeEmptyStringReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeKeyReturnsKey()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeLowercaseKeyReturnsKey()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeNullThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeReturnsMultipleResults()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeShortKeyReturnsKey()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.completeWithoutAddingAnythingReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest.setUp()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProvider.ContentSelectorSuggestionProvider(SuggestionProvider<String>,List<String>)",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProvider.getPossibleSuggestions()",1,1,2,2
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProvider.getSource()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeBeginningOfKeywordReturnsKeyword()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeEmptyStringReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeKeywordReturnsKeyword()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeKeywordReturnsKeywordFromDatabase()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeNullThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeReturnsKeywordsInAlphabeticalOrder()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeReturnsMultipleResults()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeUppercaseBeginningOfNameReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest.completeWithoutAddingAnythingReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeAfterAddingEmptyEntryReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeAfterAddingEntryWithoutFieldReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeBeginnigOfSecondWordReturnsWord()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeBeginningOfValueReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeEmptyStringReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeLowercaseValueReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeNullThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completePartOfWordReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeReturnsMultipleResults()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeShortStringReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeValueReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.completeWithoutAddingAnythingReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.initAutoCompleterWithNullFieldThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest.setUp()",0,1,1,1
"org.jabref.gui.autocompleter.EmptySuggestionProvider.getComparator()",0,1,1,1
"org.jabref.gui.autocompleter.EmptySuggestionProvider.getEquivalence()",0,1,1,1
"org.jabref.gui.autocompleter.EmptySuggestionProvider.getSource()",0,1,1,1
"org.jabref.gui.autocompleter.EmptySuggestionProvider.isMatch(String,ISuggestionRequest)",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProvider.FieldValueSuggestionProvider(Field,BibDatabase)",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProvider.getSource()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeAfterAddingEmptyEntryReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeAfterAddingEntryWithoutFieldReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeBeginnigOfSecondWordReturnsWholeFieldValue()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeBeginnigOfValueReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeEmptyStringReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeLowercaseValueReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeNullThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeOnIgnoredFieldReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completePartOfWordReturnsWholeFieldValue()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeReturnsMultipleResults()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeReturnsWholeFieldValue()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeShortStringReturnsFieldValue()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeValueReturnsValue()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.completeWithoutAddingAnythingReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.initAutoCompleterWithNullFieldThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest.setUp()",0,1,1,1
"org.jabref.gui.autocompleter.JournalsSuggestionProvider.JournalsSuggestionProvider(Field,BibDatabase,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.autocompleter.JournalsSuggestionProvider.getSource()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameStringConverter.PersonNameStringConverter(AutoCompletePreferences)",1,1,1,4
"org.jabref.gui.autocompleter.PersonNameStringConverter.PersonNameStringConverter(boolean,boolean,AutoCompleteFirstNameMode)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameStringConverter.fromString(String)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameStringConverter.toString(Author)",6,9,9,9
"org.jabref.gui.autocompleter.PersonNameStringConverterTest.setUp()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameStringConverterTest.testToStringWithAutoCompletePreferences(boolean,AutoCompleteFirstNameMode,NameFormat,String)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameStringConverterTest.testToStringWithoutAutoCompletePreferences(boolean,boolean,AutoCompleteFirstNameMode,String)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider.PersonNameSuggestionProvider(Collection<Field>,BibDatabase)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider.PersonNameSuggestionProvider(Field,BibDatabase)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider.getAuthors(BibEntry)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider.getComparator()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider.getEquivalence()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider.getSource()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider.isMatch(Author,ISuggestionRequest)",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeAfterAddingEmptyEntryReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeAfterAddingEntryWithoutFieldReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeBeginningOfFirstNameReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeBeginningOfFirstNameReturnsNameWithJr()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeBeginningOfFirstNameReturnsNameWithVon()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeBeginningOfFullNameReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeBeginningOfLastNameReturnsNameWithUmlauts()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeBeginningOfNameReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeEmptyStringReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeLowercaseBeginningOfNameReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeNameReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeNullThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completePartOfNameReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeReturnsMultipleResults()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeVonReturnsName()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.completeWithoutAddingAnythingReturnsNothing()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.initAutoCompleterWithNullFieldThrowsException()",0,1,1,1
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest.setUp()",0,1,1,1
"org.jabref.gui.autocompleter.ReplaceStrategy.analyze(String)",0,1,1,1
"org.jabref.gui.autocompleter.StringSuggestionProvider.getComparator()",0,1,1,1
"org.jabref.gui.autocompleter.StringSuggestionProvider.getEquivalence()",0,1,1,1
"org.jabref.gui.autocompleter.StringSuggestionProvider.isMatch(String,ISuggestionRequest)",0,1,1,1
"org.jabref.gui.autocompleter.SuggestionProvider.getPossibleSuggestions()",0,1,1,1
"org.jabref.gui.autocompleter.SuggestionProvider.provideSuggestions(ISuggestionRequest)",2,2,2,2
"org.jabref.gui.autocompleter.SuggestionProviders.SuggestionProviders()",0,1,1,1
"org.jabref.gui.autocompleter.SuggestionProviders.SuggestionProviders(BibDatabase,JournalAbbreviationRepository,AutoCompletePreferences)",0,1,1,1
"org.jabref.gui.autocompleter.SuggestionProviders.getForField(Field)",8,5,6,8
"org.jabref.gui.autocompleter.SuggestionProvidersTest.emptySuggestionProviderReturnedForEmptySuggestionProviderList()",0,1,1,1
"org.jabref.gui.autocompleter.SuggestionProvidersTest.getTestPairs()",0,1,1,1
"org.jabref.gui.autocompleter.SuggestionProvidersTest.initializeSuggestionProviders()",0,1,1,1
"org.jabref.gui.autocompleter.SuggestionProvidersTest.testAppropriateCompleterReturned(Class<SuggestionProvider<BibEntry>>,Field)",0,1,1,1
"org.jabref.gui.autocompleter.WordSuggestionProvider.WordSuggestionProvider(Field,BibDatabase)",0,1,1,1
"org.jabref.gui.autocompleter.WordSuggestionProvider.getSource()",0,1,1,1
"org.jabref.gui.auximport.AuxParserResultViewModel.AuxParserResultViewModel(AuxParserResult)",0,1,1,1
"org.jabref.gui.auximport.AuxParserResultViewModel.getInformation(boolean)",5,1,5,5
"org.jabref.gui.auximport.FromAuxDialog.FromAuxDialog(JabRefFrame)",2,1,2,2
"org.jabref.gui.auximport.FromAuxDialog.browseButtonClicked()",0,1,1,1
"org.jabref.gui.auximport.FromAuxDialog.parseActionPerformed()",6,1,5,5
"org.jabref.gui.auximport.NewSubLibraryAction.NewSubLibraryAction(JabRefFrame,StateManager)",0,1,1,1
"org.jabref.gui.auximport.NewSubLibraryAction.execute()",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractor.GenerateAuthor(String,String)",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractor.extract(String)",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractor.findAuthors(String)",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractor.findAuthorsByPattern(String,Pattern)",1,1,2,2
"org.jabref.gui.bibtexextractor.BibtexExtractor.findPages(String)",1,1,2,2
"org.jabref.gui.bibtexextractor.BibtexExtractor.findParts(String)",10,4,6,8
"org.jabref.gui.bibtexextractor.BibtexExtractor.findUrls(String)",1,1,2,2
"org.jabref.gui.bibtexextractor.BibtexExtractor.findYear(String)",4,3,4,4
"org.jabref.gui.bibtexextractor.BibtexExtractor.fixSpaces(String)",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractor.generateEntity(String)",3,1,2,3
"org.jabref.gui.bibtexextractor.BibtexExtractorViewModel.BibtexExtractorViewModel(BibDatabaseContext,DialogService,PreferencesService,FileUpdateMonitor,TaskExecutor,UndoManager,StateManager)",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractorViewModel.inputTextProperty()",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractorViewModel.parseUsingBibtexExtractor()",0,1,1,1
"org.jabref.gui.bibtexextractor.BibtexExtractorViewModel.parseUsingGrobid()",5,1,3,3
"org.jabref.gui.bibtexextractor.BibtexExtractorViewModel.startParsing()",2,1,2,2
"org.jabref.gui.bibtexextractor.BibtexExtractorViewModel.trackNewEntry(BibEntry,String)",0,1,1,1
"org.jabref.gui.bibtexextractor.ExtractBibtexAction.ExtractBibtexAction(DialogService,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.bibtexextractor.ExtractBibtexAction.execute()",0,1,1,1
"org.jabref.gui.bibtexextractor.ExtractBibtexDialog.ExtractBibtexDialog()",0,1,1,1
"org.jabref.gui.bibtexextractor.ExtractBibtexDialog.initialize()",0,1,1,1
"org.jabref.gui.citationkeypattern.CitationKeyPatternAction.CitationKeyPatternAction(JabRefFrame,StateManager)",0,1,1,1
"org.jabref.gui.citationkeypattern.CitationKeyPatternAction.execute()",0,1,1,1
"org.jabref.gui.citationkeypattern.CitationKeyPatternDialog.CitationKeyPatternDialog(LibraryTab)",0,1,1,1
"org.jabref.gui.citationkeypattern.CitationKeyPatternDialog.init()",2,1,2,2
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel.CitationKeyPatternPanel(BibDatabaseContext)",0,1,1,1
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel.buildGUI()",7,1,4,5
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel.fillPatternUsingPanelData(AbstractCitationKeyPattern)",4,1,4,4
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel.getKeyPatternAsDatabaseKeyPattern()",0,1,1,1
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel.getPanel()",0,1,1,1
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel.setValue(TextField,EntryType,AbstractCitationKeyPattern)",2,1,2,2
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel.setValues(AbstractCitationKeyPattern)",4,1,4,4
"org.jabref.gui.citationkeypattern.GenerateCitationKeyAction.GenerateCitationKeyAction(JabRefFrame,DialogService,StateManager,TaskExecutor,PreferencesService)",0,1,1,1
"org.jabref.gui.citationkeypattern.GenerateCitationKeyAction.checkOverwriteKeysChosen()",4,1,3,4
"org.jabref.gui.citationkeypattern.GenerateCitationKeyAction.confirmOverwriteKeys(DialogService,PreferencesService)",2,2,2,2
"org.jabref.gui.citationkeypattern.GenerateCitationKeyAction.execute()",2,2,3,3
"org.jabref.gui.citationkeypattern.GenerateCitationKeyAction.formatOutputMessage(String,int)",1,1,2,2
"org.jabref.gui.citationkeypattern.GenerateCitationKeyAction.generateKeysInBackground()",7,2,3,4
"org.jabref.gui.citationkeypattern.GenerateCitationKeySingleAction.GenerateCitationKeySingleAction(BibEntry,BibDatabaseContext,DialogService,PreferencesService,UndoManager)",1,1,2,2
"org.jabref.gui.citationkeypattern.GenerateCitationKeySingleAction.execute()",2,1,3,3
"org.jabref.gui.cleanup.CleanupAction.CleanupAction(JabRefFrame,PreferencesService,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.cleanup.CleanupAction.cleanup(BibDatabaseContext,CleanupPreset)",3,1,3,3
"org.jabref.gui.cleanup.CleanupAction.doCleanup(BibDatabaseContext,CleanupPreset,BibEntry,NamedCompound)",1,1,2,2
"org.jabref.gui.cleanup.CleanupAction.execute()",8,5,4,6
"org.jabref.gui.cleanup.CleanupAction.showResults()",5,2,4,5
"org.jabref.gui.cleanup.CleanupDialog.CleanupDialog(BibDatabaseContext,CleanupPreset,FilePreferences)",3,2,2,2
"org.jabref.gui.cleanup.CleanupPresetPanel.CleanupPresetPanel(BibDatabaseContext,CleanupPreset,FilePreferences)",0,1,1,1
"org.jabref.gui.cleanup.CleanupPresetPanel.getCleanupPreset()",14,1,13,13
"org.jabref.gui.cleanup.CleanupPresetPanel.init(CleanupPreset,FilePreferences)",10,1,6,6
"org.jabref.gui.cleanup.CleanupPresetPanel.updateDisplay(CleanupPreset)",1,1,2,2
"org.jabref.gui.collab.ChangeDisplayDialog.ChangeDisplayDialog(BibDatabaseContext,List<DatabaseChangeViewModel>)",15,2,7,7
"org.jabref.gui.collab.ChangeDisplayDialog.selectedChangeChanged(DatabaseChangeViewModel)",4,1,3,3
"org.jabref.gui.collab.ChangeScanner.ChangeScanner(BibDatabaseContext,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.collab.ChangeScanner.createBibEntryDiff(BibEntryDiff)",2,3,3,3
"org.jabref.gui.collab.ChangeScanner.createBibStringDiff(BibStringDiff)",3,4,4,4
"org.jabref.gui.collab.ChangeScanner.scanForChanges()",2,2,3,3
"org.jabref.gui.collab.DatabaseChangeMonitor.DatabaseChangeMonitor(BibDatabaseContext,FileUpdateMonitor,TaskExecutor,PreferencesService,StateManager)",2,1,2,2
"org.jabref.gui.collab.DatabaseChangeMonitor.addListener(DatabaseChangeListener)",0,1,1,1
"org.jabref.gui.collab.DatabaseChangeMonitor.fileUpdated()",2,1,2,2
"org.jabref.gui.collab.DatabaseChangeMonitor.unregister()",0,1,1,1
"org.jabref.gui.collab.DatabaseChangePane.DatabaseChangePane(Node,BibDatabaseContext,DatabaseChangeMonitor)",0,1,1,1
"org.jabref.gui.collab.DatabaseChangePane.onDatabaseChanged(List<DatabaseChangeViewModel>)",0,1,1,1
"org.jabref.gui.collab.DatabaseChangeViewModel.DatabaseChangeViewModel()",0,1,1,1
"org.jabref.gui.collab.DatabaseChangeViewModel.DatabaseChangeViewModel(String)",0,1,1,1
"org.jabref.gui.collab.DatabaseChangeViewModel.acceptedProperty()",0,1,1,1
"org.jabref.gui.collab.DatabaseChangeViewModel.isAccepted()",0,1,1,1
"org.jabref.gui.collab.DatabaseChangeViewModel.setAccepted(boolean)",0,1,1,1
"org.jabref.gui.collab.DatabaseChangeViewModel.toString()",0,1,1,1
"org.jabref.gui.collab.EntryAddChangeViewModel.EntryAddChangeViewModel(BibEntry,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.collab.EntryAddChangeViewModel.description()",0,1,1,1
"org.jabref.gui.collab.EntryAddChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",0,1,1,1
"org.jabref.gui.collab.EntryChangeViewModel.EntryChangeViewModel(BibEntry,BibEntry)",0,1,1,1
"org.jabref.gui.collab.EntryChangeViewModel.description()",0,1,1,1
"org.jabref.gui.collab.EntryChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",0,1,1,1
"org.jabref.gui.collab.EntryChangeViewModel.setAccepted(boolean)",2,1,2,2
"org.jabref.gui.collab.EntryDeleteChangeViewModel.EntryDeleteChangeViewModel(BibEntry)",0,1,1,1
"org.jabref.gui.collab.EntryDeleteChangeViewModel.description()",0,1,1,1
"org.jabref.gui.collab.EntryDeleteChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",0,1,1,1
"org.jabref.gui.collab.GroupChangeViewModel.GroupChangeViewModel(GroupDiff)",1,1,2,2
"org.jabref.gui.collab.GroupChangeViewModel.description()",1,1,2,2
"org.jabref.gui.collab.GroupChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",4,1,3,3
"org.jabref.gui.collab.MetaDataChangeViewModel.MetaDataChangeViewModel(MetaDataDiff,PreferencesService)",0,1,1,1
"org.jabref.gui.collab.MetaDataChangeViewModel.description()",1,1,2,2
"org.jabref.gui.collab.MetaDataChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",0,1,1,1
"org.jabref.gui.collab.PreambleChangeViewModel.PreambleChangeViewModel(PreambleDiff)",0,1,1,1
"org.jabref.gui.collab.PreambleChangeViewModel.description()",3,1,3,3
"org.jabref.gui.collab.PreambleChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",0,1,1,1
"org.jabref.gui.collab.StringAddChangeViewModel.StringAddChangeViewModel(BibtexString)",0,1,1,1
"org.jabref.gui.collab.StringAddChangeViewModel.description()",0,1,1,1
"org.jabref.gui.collab.StringAddChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",1,1,2,2
"org.jabref.gui.collab.StringChangeViewModel.StringChangeViewModel(BibtexString,BibtexString)",0,1,1,1
"org.jabref.gui.collab.StringChangeViewModel.description()",0,1,1,1
"org.jabref.gui.collab.StringChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",0,1,1,1
"org.jabref.gui.collab.StringNameChangeViewModel.StringNameChangeViewModel(BibtexString,BibtexString)",0,1,1,1
"org.jabref.gui.collab.StringNameChangeViewModel.description()",0,1,1,1
"org.jabref.gui.collab.StringNameChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",1,1,2,2
"org.jabref.gui.collab.StringRemoveChangeViewModel.StringRemoveChangeViewModel(BibtexString)",0,1,1,1
"org.jabref.gui.collab.StringRemoveChangeViewModel.description()",0,1,1,1
"org.jabref.gui.collab.StringRemoveChangeViewModel.makeChange(BibDatabaseContext,NamedCompound)",1,1,2,2
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.CitationKeyPatternPanel()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.HighlightTableRow.updateItem(CitationKeyPatternPanelItemModel,boolean)",5,1,5,5
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.defaultKeyPatternProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.initialize()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.jumpToSearchKey(KeyEvent)",3,2,2,3
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.patternListProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.resetAll()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.setValues(Collection<BibEntryType>,AbstractCitationKeyPattern)",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel.CitationKeyPatternPanelItemModel(EntryType,String)",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel.entryType()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel.getEntryType()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel.getPattern()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel.pattern()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel.setPattern(String)",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel.toString()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.CitationKeyPatternPanelViewModel(PreferencesService)",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.DefaultEntryType.getDisplayName()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.DefaultEntryType.getName()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.defaultKeyPatternProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.patternListProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.resetAll()",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.setItemToDefaultPattern(CitationKeyPatternPanelItemModel)",0,1,1,1
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.setValues(Collection<BibEntryType>,AbstractCitationKeyPattern)",6,1,4,4
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.FieldFormatterCleanupsPanel()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.addCleanup()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.cleanupsDisableProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.cleanupsProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.clearAll()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.initialize()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.resetToRecommended()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.setupBindings()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.setupCombos()",5,1,4,4
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel.setupTable()",2,1,2,2
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.FieldFormatterCleanupsPanelViewModel()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.addCleanup()",3,2,3,4
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.availableFieldsProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.availableFormattersProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.cleanupsDisableProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.cleanupsListProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.clearAll()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.removeCleanup(FieldFormatterCleanup)",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.resetToRecommended()",3,1,2,2
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.selectedCleanupProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.selectedFieldProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel.selectedFormatterProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.SaveOrderConfigPanel()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.addCriterion()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.clearCriterionRow(int)",2,1,2,2
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.createCriterionRow(SortCriterionViewModel,int)",2,1,2,2
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.createRowButtons(SortCriterionViewModel)",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.initialize()",15,1,7,7
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.moveCriterionDown(SortCriterionViewModel)",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.moveCriterionUp(SortCriterionViewModel)",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.removeCriterion(SortCriterionViewModel)",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.saveInOriginalProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.saveInSpecifiedOrderProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.saveInTableOrderProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.setCriteriaLimit(int)",1,1,2,2
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.sortCriteriaProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel.sortableFieldsProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.SaveOrderConfigPanelViewModel()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.addCriterion()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.moveCriterionDown(SortCriterionViewModel)",4,1,4,4
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.moveCriterionUp(SortCriterionViewModel)",3,1,3,3
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.removeCriterion(SortCriterionViewModel)",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.saveInOriginalProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.saveInSpecifiedOrderProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.saveInTableOrderProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.sortCriteriaProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel.sortableFieldsProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModelTest.addCriterion()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModelTest.moveCriterionDown()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModelTest.moveCriterionUp()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModelTest.removeCriterion()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SortCriterionViewModel.SortCriterionViewModel(SortCriterion)",0,1,1,1
"org.jabref.gui.commonfxcontrols.SortCriterionViewModel.descendingProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SortCriterionViewModel.fieldProperty()",0,1,1,1
"org.jabref.gui.commonfxcontrols.SortCriterionViewModel.getCriterion()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.ContentSelectorDialogView(LibraryTab)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.addNewFieldName()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.addNewKeyword()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.getSelectedField()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.getSelectedKeyword()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.initFieldNameComponents()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.initKeywordsComponents()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.initListView(ListView<T>,Supplier<ListProperty<T>>)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.initialize()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.removeFieldName()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogView.removeKeyword()",2,1,3,3
"org.jabref.gui.contentselector.ContentSelectorDialogView.saveChangesAndClose()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.ContentSelectorDialogViewModel(LibraryTab,DialogService)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.addFieldIfUnique(Field)",1,2,2,2
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.addKeywordIfUnique(Field,String)",1,2,2,2
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.asHashSet(List<String>)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.filterFieldsToRemove()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.getFieldNamesBackingList()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.getKeywordsBackingList()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.isFieldNameListEmpty()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.isNoFieldNameSelected()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.isNoKeywordSelected()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.keywordsHaveChanged(Field,List<String>)",2,2,2,3
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.populateFieldNameKeywordsMapWithExistingValues()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.populateFieldNamesListWithValues()",1,1,2,2
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.populateKeywords(Field)",1,1,2,2
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.removeFieldName(Field)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.removeKeyword(Field,String)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.saveChanges()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.selectedFieldProperty()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.selectedKeywordProperty()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.showInputFieldNameDialog()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.showInputKeywordDialog(Field)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.showRemoveFieldNameConfirmationDialog(Field)",2,2,3,3
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.showRemoveKeywordConfirmationDialog(Field,String)",1,1,2,2
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel.updateMetaDataContentSelector(List<Field>,Field,List<String>)",2,1,3,3
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.addField(Field)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.addKeyword(Field,String)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.addsKeywordOnlyIfUnique()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.addsNewField()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.addsNewKeyword()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.displaysKeywordsInAlphabeticalOrder()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.initHasDefaultFieldNames()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.removeField(Field)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.removeKeyword(Field,String)",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.removesField()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.removesKeyword()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.savingPersistsDataInDatabase()",0,1,1,1
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.contentselector.ManageContentSelectorAction.ManageContentSelectorAction(JabRefFrame,StateManager)",0,1,1,1
"org.jabref.gui.contentselector.ManageContentSelectorAction.execute()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesAction.CopyFilesAction(DialogService,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesAction.execute()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesAction.showDialog(List<CopyFilesResultItemViewModel>)",1,2,2,2
"org.jabref.gui.copyfiles.CopyFilesDialogView.CopyFilesDialogView(CopyFilesResultListDependency)",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesDialogView.initialize()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesDialogView.setupTable()",4,1,3,3
"org.jabref.gui.copyfiles.CopyFilesDialogViewModel.CopyFilesDialogViewModel(CopyFilesResultListDependency)",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesDialogViewModel.copyFilesResultListProperty()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultItemViewModel.CopyFilesResultItemViewModel(Path,boolean,String)",1,1,2,2
"org.jabref.gui.copyfiles.CopyFilesResultItemViewModel.getFile()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultItemViewModel.getIcon()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultItemViewModel.getMessage()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultItemViewModel.toString()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultListDependency.CopyFilesResultListDependency()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultListDependency.CopyFilesResultListDependency(List<CopyFilesResultItemViewModel>)",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultListDependency.getResults()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesResultListDependency.toString()",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesTask.CopyFilesTask(BibDatabaseContext,List<BibEntry>,Path,PreferencesService)",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesTask.addResultToList(Path,boolean,String)",0,1,1,1
"org.jabref.gui.copyfiles.CopyFilesTask.call()",25,7,7,9
"org.jabref.gui.copyfiles.CopyFilesTask.writeLogMessage(Path,BufferedWriter,String)",1,1,2,2
"org.jabref.gui.copyfiles.CopySingleFileAction.CopySingleFileAction(LinkedFile,DialogService,BibDatabaseContext,PreferencesService)",1,1,2,2
"org.jabref.gui.copyfiles.CopySingleFileAction.copyFileToDestination(Path)",6,1,4,4
"org.jabref.gui.copyfiles.CopySingleFileAction.execute()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.CustomEntryTypeDialogViewModel(BibDatabaseMode,PreferencesService,BibEntryTypesManager)",2,1,3,3
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.FieldType.FieldType(String)",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.FieldType.getDisplayName()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.FieldType.toString()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.addAllTypes()",5,1,3,4
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.addNewCustomEntryType()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.addNewField()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.apply()",2,1,3,3
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.entryTypeToAddProperty()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.entryTypeValidationStatus()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.entryTypes()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.fieldValidationStatus()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.fieldsForAdding()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.newFieldToAddProperty()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.removeEntryType(EntryTypeViewModel)",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.removeField(FieldViewModel)",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.resetAllCustomEntryTypes()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.selectedEntryTypeProperty()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.selectedFieldToAddProperty()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomEntryTypeViewModel.CustomEntryTypeViewModel(BibEntryType)",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryAction.CustomizeEntryAction(StateManager,BibEntryTypesManager)",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryAction.execute()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.CustomizeEntryTypeDialogView(BibDatabaseContext,BibEntryTypesManager)",2,1,2,2
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.addEntryType()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.addNewField()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.handleOnDragDetected(TableRow<FieldViewModel>,FieldViewModel,MouseEvent)",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.handleOnDragDropped(TableRow<FieldViewModel>,FieldViewModel,DragEvent)",7,1,3,4
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.handleOnDragExited(TableRow<FieldViewModel>,FieldViewModel,DragEvent)",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.handleOnDragOver(TableRow<FieldViewModel>,FieldViewModel,DragEvent)",2,1,3,3
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.initialize()",0,1,1,1
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.resetEntryTypes()",1,1,2,2
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView.setupTable()",11,4,5,5
"org.jabref.gui.customentrytypes.EntryTypeViewModel.EntryTypeViewModel(BibEntryType)",0,1,1,1
"org.jabref.gui.customentrytypes.EntryTypeViewModel.addField(FieldViewModel)",0,1,1,1
"org.jabref.gui.customentrytypes.EntryTypeViewModel.entryType()",0,1,1,1
"org.jabref.gui.customentrytypes.EntryTypeViewModel.equals(Object)",3,3,2,4
"org.jabref.gui.customentrytypes.EntryTypeViewModel.fields()",0,1,1,1
"org.jabref.gui.customentrytypes.EntryTypeViewModel.hashCode()",0,1,1,1
"org.jabref.gui.customentrytypes.EntryTypeViewModel.removeField(FieldViewModel)",0,1,1,1
"org.jabref.gui.customentrytypes.EntryTypeViewModel.toString()",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.FieldViewModel(Field,FieldType,FieldPriority)",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.FieldViewModel(Field,boolean,FieldPriority)",1,1,1,2
"org.jabref.gui.customentrytypes.FieldViewModel.fieldName()",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.fieldType()",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.getField()",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.getFieldPriority()",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.getFieldType()",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.setFieldType(FieldType)",0,1,1,1
"org.jabref.gui.customentrytypes.FieldViewModel.toString()",0,1,1,1
"org.jabref.gui.desktop.JabRefDesktop.JabRefDesktop()",0,1,1,1
"org.jabref.gui.desktop.JabRefDesktop.getNativeDesktop()",3,4,1,4
"org.jabref.gui.desktop.JabRefDesktop.openBrowser(String)",0,1,1,1
"org.jabref.gui.desktop.JabRefDesktop.openBrowser(URI)",0,1,1,1
"org.jabref.gui.desktop.JabRefDesktop.openBrowserShowPopup(String)",1,1,2,2
"org.jabref.gui.desktop.JabRefDesktop.openConsole(File,PreferencesService)",8,2,4,5
"org.jabref.gui.desktop.JabRefDesktop.openCustomDoi(String,PreferencesService,DialogService)",2,1,2,2
"org.jabref.gui.desktop.JabRefDesktop.openDoi(String)",0,1,1,1
"org.jabref.gui.desktop.JabRefDesktop.openExternalFileAnyFormat(BibDatabaseContext,PreferencesService,String,Optional<ExternalFileType>)",4,2,4,4
"org.jabref.gui.desktop.JabRefDesktop.openExternalFilePlatformIndependent(Optional<ExternalFileType>,String)",5,1,3,3
"org.jabref.gui.desktop.JabRefDesktop.openExternalViewer(BibDatabaseContext,PreferencesService,String,Field)",23,4,15,17
"org.jabref.gui.desktop.JabRefDesktop.openFolderAndSelectFile(Path,PreferencesService)",8,2,4,5
"org.jabref.gui.desktop.os.DefaultDesktop.detectProgramPath(String,String)",0,1,1,1
"org.jabref.gui.desktop.os.DefaultDesktop.getApplicationDirectory()",0,1,1,1
"org.jabref.gui.desktop.os.DefaultDesktop.openConsole(String)",0,1,1,1
"org.jabref.gui.desktop.os.DefaultDesktop.openFile(String,String)",0,1,1,1
"org.jabref.gui.desktop.os.DefaultDesktop.openFileWithApplication(String,String)",0,1,1,1
"org.jabref.gui.desktop.os.DefaultDesktop.openFolderAndSelectFile(Path)",0,1,1,1
"org.jabref.gui.desktop.os.Linux.detectProgramPath(String,String)",0,1,1,1
"org.jabref.gui.desktop.os.Linux.getApplicationDirectory()",0,1,1,1
"org.jabref.gui.desktop.os.Linux.nativeOpenFile(String)",7,1,4,4
"org.jabref.gui.desktop.os.Linux.openConsole(String)",6,1,5,5
"org.jabref.gui.desktop.os.Linux.openFile(String,String)",3,1,3,3
"org.jabref.gui.desktop.os.Linux.openFileWithApplication(String,String)",3,1,3,3
"org.jabref.gui.desktop.os.Linux.openFolderAndSelectFile(Path)",4,1,4,4
"org.jabref.gui.desktop.os.NativeDesktop.getUserDirectory()",0,1,1,1
"org.jabref.gui.desktop.os.OSX.detectProgramPath(String,String)",0,1,1,1
"org.jabref.gui.desktop.os.OSX.getApplicationDirectory()",0,1,1,1
"org.jabref.gui.desktop.os.OSX.openConsole(String)",0,1,1,1
"org.jabref.gui.desktop.os.OSX.openFile(String,String)",3,1,3,3
"org.jabref.gui.desktop.os.OSX.openFileWithApplication(String,String)",2,1,2,3
"org.jabref.gui.desktop.os.OSX.openFolderAndSelectFile(Path)",0,1,1,1
"org.jabref.gui.desktop.os.Windows.detectProgramPath(String,String)",4,4,2,4
"org.jabref.gui.desktop.os.Windows.getApplicationDirectory()",1,2,2,2
"org.jabref.gui.desktop.os.Windows.getProgramPath(String,String,String)",4,2,4,4
"org.jabref.gui.desktop.os.Windows.openConsole(String)",0,1,1,1
"org.jabref.gui.desktop.os.Windows.openFile(String,String)",3,1,3,3
"org.jabref.gui.desktop.os.Windows.openFileWithApplication(String,String)",0,1,1,1
"org.jabref.gui.desktop.os.Windows.openFolderAndSelectFile(Path)",0,1,1,1
"org.jabref.gui.dialogs.AutosaveUiManager.AutosaveUiManager(LibraryTab)",0,1,1,1
"org.jabref.gui.dialogs.AutosaveUiManager.listen(AutosaveEvent)",1,1,2,2
"org.jabref.gui.dialogs.BackupUIManager.BackupUIManager()",0,1,1,1
"org.jabref.gui.dialogs.BackupUIManager.showRestoreBackupDialog(DialogService,Path)",1,1,2,2
"org.jabref.gui.documentviewer.DocumentViewModel.getMaxPages()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewModel.maxPagesProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerControl(TaskExecutor)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.DocumentViewerPage(DocumentPageViewModel)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.getDesiredHeight()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.getDesiredWidth()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.getNode()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.getPageNumber()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.isReusable()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.renderPage(DocumentPageViewModel)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.updateItem(DocumentPageViewModel)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage.updateSize()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.changePageWidth(int)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.currentPageProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.getCurrentPage()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.scrollYMaxProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.scrollYProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.setPageHeight(double)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.setPageWidth(double)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.show(DocumentViewModel)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerControl.showPage(int)",1,1,2,2
"org.jabref.gui.documentviewer.DocumentViewerControl.updateCurrentPage(ObservableList<DocumentViewerPage>)",5,2,3,5
"org.jabref.gui.documentviewer.DocumentViewerControl.updateSizeOfDisplayedPages()",3,1,3,3
"org.jabref.gui.documentviewer.DocumentViewerView.DocumentViewerView()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.fitSinglePage(ActionEvent)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.fitWidth(ActionEvent)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.gotoPage(int)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.initialize()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.nextPage(ActionEvent)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.previousPage(ActionEvent)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.setLiveMode(boolean)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.setupFileChoice()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.setupModeButtons()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.setupPageControls()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.setupScrollbar()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.setupViewer()",2,1,2,2
"org.jabref.gui.documentviewer.DocumentViewerView.zoomIn(ActionEvent)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerView.zoomOut(ActionEvent)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.DocumentViewerViewModel(StateManager,PreferencesService)",5,1,3,4
"org.jabref.gui.documentviewer.DocumentViewerViewModel.currentDocumentProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.currentPageProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.filesProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.getCurrentPage()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.isLiveMode()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.liveModeProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.maxPagesProperty()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.setCurrentDocument(Path)",1,1,2,2
"org.jabref.gui.documentviewer.DocumentViewerViewModel.setCurrentEntries(List<BibEntry>)",1,1,2,2
"org.jabref.gui.documentviewer.DocumentViewerViewModel.setCurrentEntry(BibEntry)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.showNextPage()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.showPage(int)",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.showPreviousPage()",0,1,1,1
"org.jabref.gui.documentviewer.DocumentViewerViewModel.switchToFile(LinkedFile)",1,1,2,2
"org.jabref.gui.documentviewer.PageDimension.FixedHeightPageDimension.FixedHeightPageDimension(int)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.FixedHeightPageDimension.getHeight(double)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.FixedHeightPageDimension.getWidth(double)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.FixedWidthPageDimension.FixedWidthPageDimension(int)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.FixedWidthPageDimension.getHeight(double)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.FixedWidthPageDimension.getWidth(double)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.ofFixedHeight(double)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.ofFixedHeight(int)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.ofFixedWidth(double)",0,1,1,1
"org.jabref.gui.documentviewer.PageDimension.ofFixedWidth(int)",0,1,1,1
"org.jabref.gui.documentviewer.PdfDocumentPageViewModel.PdfDocumentPageViewModel(PDPage,int,PDDocument)",0,1,1,1
"org.jabref.gui.documentviewer.PdfDocumentPageViewModel.getAspectRatio()",0,1,1,1
"org.jabref.gui.documentviewer.PdfDocumentPageViewModel.getPageNumber()",0,1,1,1
"org.jabref.gui.documentviewer.PdfDocumentPageViewModel.render(int,int)",1,1,1,2
"org.jabref.gui.documentviewer.PdfDocumentPageViewModel.resize(BufferedImage,int,int)",0,1,1,1
"org.jabref.gui.documentviewer.PdfDocumentViewModel.PdfDocumentViewModel(PDDocument)",0,1,1,1
"org.jabref.gui.documentviewer.PdfDocumentViewModel.getPages()",1,1,2,2
"org.jabref.gui.documentviewer.PdfDocumentViewModelTest.getPagesTest(Path)",0,1,1,1
"org.jabref.gui.documentviewer.ShowDocumentViewerAction.ShowDocumentViewerAction(StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.documentviewer.ShowDocumentViewerAction.execute()",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateResolverDialog.DuplicateResolverDialog(BibEntry,BibEntry,DuplicateResolverType,BibDatabaseContext,StateManager)",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateResolverDialog.getMergedEntry()",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateResolverDialog.init(BibEntry,BibEntry,DuplicateResolverType)",9,6,7,11
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearch(JabRefFrame,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearchResult.getDuplicateCount()",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearchResult.getToAdd()",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearchResult.getToRemove()",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearchResult.isToRemove(BibEntry)",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearchResult.remove(BibEntry)",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearchResult.replace(BibEntry,BibEntry,BibEntry)",0,1,1,1
"org.jabref.gui.duplicationFinder.DuplicateSearch.askResolveStrategy(DuplicateSearchResult,BibEntry,BibEntry,DuplicateResolverType)",7,1,6,7
"org.jabref.gui.duplicationFinder.DuplicateSearch.execute()",1,2,1,2
"org.jabref.gui.duplicationFinder.DuplicateSearch.handleDuplicates(DuplicateSearchResult)",3,2,3,4
"org.jabref.gui.duplicationFinder.DuplicateSearch.searchPossibleDuplicates(List<BibEntry>,BibDatabaseMode)",9,4,4,5
"org.jabref.gui.duplicationFinder.DuplicateSearch.verifyDuplicates()",19,6,7,10
"org.jabref.gui.edit.CopyDoiUrlAction.CopyDoiUrlAction(TextArea)",0,1,1,1
"org.jabref.gui.edit.CopyDoiUrlAction.execute()",2,1,2,2
"org.jabref.gui.edit.CopyMoreAction.CopyMoreAction(StandardActions,DialogService,StateManager,ClipBoardManager,PreferencesService)",0,1,1,1
"org.jabref.gui.edit.CopyMoreAction.copyCiteKey()",3,2,3,3
"org.jabref.gui.edit.CopyMoreAction.copyDoi()",3,2,3,3
"org.jabref.gui.edit.CopyMoreAction.copyKey()",3,2,3,3
"org.jabref.gui.edit.CopyMoreAction.copyKeyAndLink()",8,2,6,6
"org.jabref.gui.edit.CopyMoreAction.copyKeyAndTitle()",7,2,6,6
"org.jabref.gui.edit.CopyMoreAction.copyTitle()",3,2,3,3
"org.jabref.gui.edit.CopyMoreAction.execute()",3,2,8,9
"org.jabref.gui.edit.CopyMoreActionTest.setUp()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyDoiOnPartialSuccess()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyDoiOnSuccess()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyDoiWithNoDoi()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyKeyOnPartialSuccess()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyKeyOnSuccess()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyKeyWithNoKey()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyTitleOnPartialSuccess()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyTitleOnSuccess()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteCopyTitleWithNoTitle()",0,1,1,1
"org.jabref.gui.edit.CopyMoreActionTest.testExecuteOnFail()",0,1,1,1
"org.jabref.gui.edit.EditAction.EditAction(StandardActions,JabRefFrame,StateManager)",2,1,2,2
"org.jabref.gui.edit.EditAction.execute()",9,1,11,11
"org.jabref.gui.edit.EditAction.toString()",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsAction.ManageKeywordsAction(StateManager)",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsAction.execute()",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsDialog.ManageKeywordsDialog(List<BibEntry>)",2,1,2,2
"org.jabref.gui.edit.ManageKeywordsDialog.initialize()",3,2,2,2
"org.jabref.gui.edit.ManageKeywordsViewModel.ManageKeywordsViewModel(PreferencesService,List<BibEntry>)",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsViewModel.displayTypeProperty()",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsViewModel.fillKeywordsList(ManageKeywordsDisplayType)",8,3,6,6
"org.jabref.gui.edit.ManageKeywordsViewModel.getDisplayType()",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsViewModel.getKeywords()",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsViewModel.removeKeyword(String)",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsViewModel.saveChanges()",8,2,6,7
"org.jabref.gui.edit.ManageKeywordsViewModel.updateKeywords(List<BibEntry>,KeywordList,KeywordList)",1,1,2,2
"org.jabref.gui.edit.ManageKeywordsViewModelTest.keywordsFilledInCorrectly()",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsViewModelTest.removedKeywordNotIncludedInKeywordsList()",0,1,1,1
"org.jabref.gui.edit.ManageKeywordsViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.edit.MassSetFieldsAction.MassSetFieldsAction(StateManager,DialogService,UndoManager)",0,1,1,1
"org.jabref.gui.edit.MassSetFieldsAction.execute()",0,1,1,1
"org.jabref.gui.edit.MassSetFieldsDialog.MassSetFieldsDialog(List<BibEntry>,BibDatabaseContext,DialogService,UndoManager)",2,1,2,2
"org.jabref.gui.edit.MassSetFieldsDialog.init()",0,1,1,1
"org.jabref.gui.edit.MassSetFieldsDialog.massAppendField(Collection<BibEntry>,Field,String)",2,1,2,3
"org.jabref.gui.edit.MassSetFieldsDialog.massRenameField(Collection<BibEntry>,Field,Field,boolean)",7,4,5,7
"org.jabref.gui.edit.MassSetFieldsDialog.massSetField(Collection<BibEntry>,Field,String,boolean)",7,3,5,6
"org.jabref.gui.edit.MassSetFieldsDialog.performEdits()",6,1,3,5
"org.jabref.gui.edit.OpenBrowserAction.OpenBrowserAction(String)",0,1,1,1
"org.jabref.gui.edit.OpenBrowserAction.execute()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringAction.ReplaceStringAction(JabRefFrame,StateManager)",0,1,1,1
"org.jabref.gui.edit.ReplaceStringAction.execute()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringView.ReplaceStringView(LibraryTab)",0,1,1,1
"org.jabref.gui.edit.ReplaceStringView.buttonReplace()",1,2,2,2
"org.jabref.gui.edit.ReplaceStringView.initialize()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModel.ReplaceStringViewModel(LibraryTab)",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModel.allFieldReplaceProperty()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModel.fieldStringProperty()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModel.findStringProperty()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModel.replace()",6,1,4,4
"org.jabref.gui.edit.ReplaceStringViewModel.replaceField(BibEntry,Field,NamedCompound)",2,2,2,3
"org.jabref.gui.edit.ReplaceStringViewModel.replaceItem(BibEntry,NamedCompound)",6,1,4,4
"org.jabref.gui.edit.ReplaceStringViewModel.replaceStringProperty()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModel.selectOnlyProperty()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.edit.ReplaceStringViewModelTest.testReplace(String,String,String,boolean,boolean,int)",0,1,1,1
"org.jabref.gui.entryeditor.DeprecatedFieldsTab.DeprecatedFieldsTab(BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,BibEntryTypesManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.DeprecatedFieldsTab.determineFieldsToShow(BibEntry)",2,2,2,2
"org.jabref.gui.entryeditor.EntryEditor.EntryEditor(LibraryTab,ExternalFileTypes)",9,1,7,7
"org.jabref.gui.entryeditor.EntryEditor.close()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.createTabs()",1,1,2,2
"org.jabref.gui.entryeditor.EntryEditor.deleteEntry()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.fetchAndMerge(EntryBasedFetcher)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.generateCiteKeyButton()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.getEntry()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.getSelectedTab()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.navigateToNextEntry()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.navigateToPreviousEntry()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.nextPreviewStyle()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.previousPreviewStyle()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditor.recalculateVisibleTabs()",5,1,4,4
"org.jabref.gui.entryeditor.EntryEditor.setEntry(BibEntry)",2,1,3,3
"org.jabref.gui.entryeditor.EntryEditor.setFocusToField(Field)",6,1,4,4
"org.jabref.gui.entryeditor.EntryEditor.setupKeyBindings()",5,1,2,8
"org.jabref.gui.entryeditor.EntryEditor.setupToolBar()",4,1,3,3
"org.jabref.gui.entryeditor.EntryEditorPreferences.EntryEditorPreferences(Map<String, Set<Field>>,boolean,boolean,boolean,boolean,boolean,boolean,boolean,double)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.allowIntegerEditionBibtexProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.dividerPositionProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.enableValidationProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.entryEditorTabListProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.getDividerPosition()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.getEntryEditorTabList()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.isMrdlibAccepted()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.isMrdlibAcceptedProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setAllowIntegerEditionBibtex(boolean)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setDividerPosition(double)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setEnableValidation(boolean)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setEntryEditorTabList(Map<String, Set<Field>>)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setIsMrdlibAccepted(boolean)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setShouldOpenOnNewEntry(boolean)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setShouldShowLatexCitationsTab(boolean)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setShouldShowRecommendationsTab(boolean)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.setShowSourceTabByDefault(boolean)",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldAllowIntegerEditionBibtex()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldEnableValidation()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldOpenOnNewEntry()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldOpenOnNewEntryProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldShowLatexCitationsTab()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldShowLatexCitationsTabProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldShowRecommendationsTab()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.shouldShowRecommendationsTabProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.showSourceTabByDefault()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorPreferences.showSourceTabByDefaultProperty()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorTab.handleFocus()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorTab.nextPreviewStyle()",0,1,1,1
"org.jabref.gui.entryeditor.EntryEditorTab.notifyAboutFocus(BibEntry)",2,1,3,3
"org.jabref.gui.entryeditor.EntryEditorTab.previousPreviewStyle()",0,1,1,1
"org.jabref.gui.entryeditor.FieldsEditorTab.FieldsEditorTab(boolean,BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.FieldsEditorTab.addColumn(GridPane,int,List<Label>)",0,1,1,1
"org.jabref.gui.entryeditor.FieldsEditorTab.addColumn(GridPane,int,Stream<Parent>)",0,1,1,1
"org.jabref.gui.entryeditor.FieldsEditorTab.bindToEntry(BibEntry)",1,1,2,2
"org.jabref.gui.entryeditor.FieldsEditorTab.getShownFields()",0,1,1,1
"org.jabref.gui.entryeditor.FieldsEditorTab.initPanel()",3,1,3,3
"org.jabref.gui.entryeditor.FieldsEditorTab.nextPreviewStyle()",1,1,2,2
"org.jabref.gui.entryeditor.FieldsEditorTab.previousPreviewStyle()",1,1,2,2
"org.jabref.gui.entryeditor.FieldsEditorTab.requestFocus(Field)",1,1,2,2
"org.jabref.gui.entryeditor.FieldsEditorTab.setCompressedRowLayout(GridPane,int)",3,1,3,3
"org.jabref.gui.entryeditor.FieldsEditorTab.setRegularRowLayout(GridPane)",1,1,2,2
"org.jabref.gui.entryeditor.FieldsEditorTab.setupPanel(BibEntry,boolean)",4,2,3,4
"org.jabref.gui.entryeditor.FieldsEditorTab.shouldShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTab.LatexCitationsTab(BibDatabaseContext,PreferencesService,TaskExecutor,DialogService)",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTab.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTab.getCitationsPane()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTab.getErrorPane()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTab.getLatexDirectoryBox()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTab.getNotFoundPane()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTab.setSearchPane()",2,1,1,5
"org.jabref.gui.entryeditor.LatexCitationsTab.shouldShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.LatexCitationsTabViewModel(BibDatabaseContext,PreferencesService,TaskExecutor,DialogService)",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.cancelSearch()",2,2,3,4
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.directoryProperty()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.getCitationList()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.init(BibEntry)",2,1,2,2
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.searchAndParse(String)",4,3,4,4
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.searchDirectory(Path,List<Path>)",1,1,2,2
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.searchErrorProperty()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.setLatexDirectory()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.shouldShow()",0,1,1,1
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.startSearch(String)",2,1,1,2
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.statusProperty()",0,1,1,1
"org.jabref.gui.entryeditor.MathSciNetTab.MathSciNetTab()",0,1,1,1
"org.jabref.gui.entryeditor.MathSciNetTab.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.MathSciNetTab.getMathSciNetId(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.MathSciNetTab.getPane(BibEntry)",2,1,2,2
"org.jabref.gui.entryeditor.MathSciNetTab.shouldShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.OpenEntryEditorAction.OpenEntryEditorAction(JabRefFrame,StateManager)",0,1,1,1
"org.jabref.gui.entryeditor.OpenEntryEditorAction.execute()",1,1,2,2
"org.jabref.gui.entryeditor.OptionalFields2Tab.OptionalFields2Tab(BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,BibEntryTypesManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.OptionalFieldsTab.OptionalFieldsTab(BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,BibEntryTypesManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.OptionalFieldsTabBase.OptionalFieldsTabBase(String,boolean,BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,BibEntryTypesManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.OptionalFieldsTabBase.determineFieldsToShow(BibEntry)",5,3,3,3
"org.jabref.gui.entryeditor.OtherFieldsTab.OtherFieldsTab(BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,BibEntryTypesManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.OtherFieldsTab.determineFieldsToShow(BibEntry)",2,2,2,2
"org.jabref.gui.entryeditor.PreviewSwitchAction.PreviewSwitchAction(Direction,JabRefFrame,StateManager)",0,1,1,1
"org.jabref.gui.entryeditor.PreviewSwitchAction.execute()",2,1,2,2
"org.jabref.gui.entryeditor.PreviewTab.PreviewTab(BibDatabaseContext,DialogService,PreferencesService,StateManager,ExternalFileTypes)",0,1,1,1
"org.jabref.gui.entryeditor.PreviewTab.bindToEntry(BibEntry)",1,1,2,2
"org.jabref.gui.entryeditor.PreviewTab.nextPreviewStyle()",1,1,2,2
"org.jabref.gui.entryeditor.PreviewTab.previousPreviewStyle()",1,1,2,2
"org.jabref.gui.entryeditor.PreviewTab.shouldShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.RelatedArticlesTab.RelatedArticlesTab(EntryEditor,EntryEditorPreferences,PreferencesService,DialogService)",0,1,1,1
"org.jabref.gui.entryeditor.RelatedArticlesTab.bindToEntry(BibEntry)",2,1,2,2
"org.jabref.gui.entryeditor.RelatedArticlesTab.getErrorInfo()",0,1,1,1
"org.jabref.gui.entryeditor.RelatedArticlesTab.getPrivacyDialog(BibEntry)",2,1,2,2
"org.jabref.gui.entryeditor.RelatedArticlesTab.getRelatedArticleInfo(List<BibEntry>,MrDLibFetcher)",8,1,4,4
"org.jabref.gui.entryeditor.RelatedArticlesTab.getRelatedArticlesPane(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.RelatedArticlesTab.shouldShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.RequiredFieldsTab.RequiredFieldsTab(BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,BibEntryTypesManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.RequiredFieldsTab.determineFieldsToShow(BibEntry)",4,1,3,3
"org.jabref.gui.entryeditor.SourceTab.EditAction.EditAction(StandardActions)",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.EditAction.execute()",1,1,5,5
"org.jabref.gui.entryeditor.SourceTab.InputMethodRequestsObject.cancelLatestCommittedText()",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.InputMethodRequestsObject.getLocationOffset(int,int)",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.InputMethodRequestsObject.getSelectedText()",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.InputMethodRequestsObject.getTextLocation(int)",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.SourceTab(BibDatabaseContext,CountingUndoManager,FieldWriterPreferences,ImportFormatPreferences,FileUpdateMonitor,DialogService,StateManager,KeyBindingRepository)",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.bindToEntry(BibEntry)",2,1,2,3
"org.jabref.gui.entryeditor.SourceTab.getSourceString(BibEntry,BibDatabaseMode,FieldWriterPreferences)",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.highlightSearchPattern()",7,1,5,5
"org.jabref.gui.entryeditor.SourceTab.listenForSaveKeybinding(KeyEvent)",2,1,2,2
"org.jabref.gui.entryeditor.SourceTab.setupSourceEditor()",7,1,4,5
"org.jabref.gui.entryeditor.SourceTab.shouldShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.SourceTab.storeSource(BibEntry,String)",18,6,12,14
"org.jabref.gui.entryeditor.SourceTab.updateCodeArea()",4,1,3,3
"org.jabref.gui.entryeditor.SourceTabTest.onStart(Stage)",0,1,1,1
"org.jabref.gui.entryeditor.SourceTabTest.switchingFromSourceTabDoesNotThrowException(FxRobot)",0,1,1,1
"org.jabref.gui.entryeditor.UserDefinedFieldsTab.UserDefinedFieldsTab(String,Set<Field>,BibDatabaseContext,SuggestionProviders,UndoManager,DialogService,PreferencesService,StateManager,BibEntryTypesManager,ExternalFileTypes,TaskExecutor,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.entryeditor.UserDefinedFieldsTab.determineFieldsToShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTab.FileAnnotationTab(FileAnnotationCache)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTab.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTab.shouldShow(BibEntry)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabView.FileAnnotationTabView(BibEntry,FileAnnotationCache)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabView.copy()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabView.createFileAnnotationNode(FileAnnotationViewModel)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabView.initialize()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.FileAnnotationTabViewModel(FileAnnotationCache,BibEntry,FileUpdateMonitor)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.annotationsProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.copyCurrentAnnotation()",1,2,1,2
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.currentAnnotationProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.filesProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.getCurrentAnnotation()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.isAnnotationsEmpty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.notifyNewSelectedAnnotation(FileAnnotationViewModel)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.notifyNewSelectedFile(Path)",1,1,2,2
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel.reloadAnnotations()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.FileAnnotationViewModel(FileAnnotation)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.authorProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.contentProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.dateProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.getAuthor()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.getContent()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.getDate()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.getMarking()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.getPage()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.markingProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.pageProperty()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.setupContentProperties(FileAnnotation)",4,1,2,3
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel.toString()",8,6,7,7
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModelTest.removeOnlyLineBreaksNotPrecededByPeriodOrColon()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModelTest.retrieveCorrectContent()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModelTest.retrieveCorrectDateAsString()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModelTest.retrieveCorrectPageNumberAsString()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModelTest.sameAuthor()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModelTest.setup()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.FulltextSearchResultsTab(StateManager,PreferencesService,DialogService)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.bindToEntry(BibEntry)",16,2,8,10
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.createFileLink(String)",6,1,3,3
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.createPageLink(int)",2,1,2,2
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.getFileContextMenu(LinkedFile)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.lineSeparator()",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.lineSeparator(double)",0,1,1,1
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab.shouldShow(BibEntry)",1,1,4,4
"org.jabref.gui.errorconsole.ErrorConsoleView.ErrorConsoleView()",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleView.clearLog()",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleView.copyLog()",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleView.copySelectedLogEntries(KeyEvent)",1,1,2,2
"org.jabref.gui.errorconsole.ErrorConsoleView.createCellFactory()",5,1,2,3
"org.jabref.gui.errorconsole.ErrorConsoleView.createIssue()",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleView.initialize()",2,1,2,2
"org.jabref.gui.errorconsole.ErrorConsoleViewModel.ErrorConsoleViewModel(DialogService,ClipBoardManager,BuildInfo)",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleViewModel.allMessagesDataProperty()",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleViewModel.clearLog()",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleViewModel.copyLog()",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleViewModel.copyLog(List<LogEventViewModel>)",1,2,1,2
"org.jabref.gui.errorconsole.ErrorConsoleViewModel.getLogMessagesAsString(List<LogEventViewModel>)",0,1,1,1
"org.jabref.gui.errorconsole.ErrorConsoleViewModel.reportIssue()",1,1,2,2
"org.jabref.gui.errorconsole.LogEventViewModel.LogEventViewModel(LogEvent)",0,1,1,1
"org.jabref.gui.errorconsole.LogEventViewModel.getDetailedText()",0,1,1,1
"org.jabref.gui.errorconsole.LogEventViewModel.getDisplayText()",0,1,1,1
"org.jabref.gui.errorconsole.LogEventViewModel.getIcon()",1,3,1,3
"org.jabref.gui.errorconsole.LogEventViewModel.getStackTrace()",0,1,1,1
"org.jabref.gui.errorconsole.LogEventViewModel.getStyleClass()",1,3,1,3
"org.jabref.gui.exporter.CreateModifyExporterDialogView.CreateModifyExporterDialogView(ExporterViewModel)",3,2,2,2
"org.jabref.gui.exporter.CreateModifyExporterDialogView.browse(ActionEvent)",0,1,1,1
"org.jabref.gui.exporter.CreateModifyExporterDialogView.initialize()",0,1,1,1
"org.jabref.gui.exporter.CreateModifyExporterDialogViewModel.CreateModifyExporterDialogViewModel(ExporterViewModel,DialogService,PreferencesService,JournalAbbreviationRepository)",1,1,2,2
"org.jabref.gui.exporter.CreateModifyExporterDialogViewModel.browse()",0,1,1,1
"org.jabref.gui.exporter.CreateModifyExporterDialogViewModel.getExtension()",0,1,1,1
"org.jabref.gui.exporter.CreateModifyExporterDialogViewModel.getLayoutFileName()",0,1,1,1
"org.jabref.gui.exporter.CreateModifyExporterDialogViewModel.getName()",0,1,1,1
"org.jabref.gui.exporter.CreateModifyExporterDialogViewModel.saveExporter()",3,2,6,6
"org.jabref.gui.exporter.ExportCommand.ExportCommand(JabRefFrame,boolean,PreferencesService)",0,1,1,1
"org.jabref.gui.exporter.ExportCommand.execute()",0,1,1,1
"org.jabref.gui.exporter.ExportCommand.export(Path,ExtensionFilter,List<Exporter>)",3,1,3,3
"org.jabref.gui.exporter.ExportCommand.handleError(Exception)",0,1,1,1
"org.jabref.gui.exporter.ExportToClipboardAction.ExportResult.ExportResult(String,FileType)",0,1,1,1
"org.jabref.gui.exporter.ExportToClipboardAction.ExportToClipboardAction(JabRefFrame,DialogService,ExporterFactory,ClipBoardManager,TaskExecutor,PreferencesService)",0,1,1,1
"org.jabref.gui.exporter.ExportToClipboardAction.ExportToClipboardAction(LibraryTab,DialogService,ExporterFactory,ClipBoardManager,TaskExecutor,PreferencesService)",0,1,1,1
"org.jabref.gui.exporter.ExportToClipboardAction.execute()",2,2,3,3
"org.jabref.gui.exporter.ExportToClipboardAction.exportToClipboard(Exporter)",4,1,4,4
"org.jabref.gui.exporter.ExportToClipboardAction.readFileToString(Path)",0,1,1,1
"org.jabref.gui.exporter.ExportToClipboardAction.setContentToClipboard(ExportResult)",3,1,4,4
"org.jabref.gui.exporter.ExportToClipboardActionTest.setUp()",0,1,1,1
"org.jabref.gui.exporter.ExportToClipboardActionTest.testExecuteIfNoSelectedEntries()",0,1,1,1
"org.jabref.gui.exporter.ExportToClipboardActionTest.testExecuteOnSuccess()",0,1,1,1
"org.jabref.gui.exporter.ExporterViewModel.ExporterViewModel(TemplateExporter)",0,1,1,1
"org.jabref.gui.exporter.ExporterViewModel.extension()",0,1,1,1
"org.jabref.gui.exporter.ExporterViewModel.getLogic()",0,1,1,1
"org.jabref.gui.exporter.ExporterViewModel.layoutFileName()",0,1,1,1
"org.jabref.gui.exporter.ExporterViewModel.name()",0,1,1,1
"org.jabref.gui.exporter.SaveAction.SaveAction(SaveMethod,JabRefFrame,PreferencesService,StateManager)",2,1,2,2
"org.jabref.gui.exporter.SaveAction.execute()",1,1,4,4
"org.jabref.gui.exporter.SaveAllAction.SaveAllAction(JabRefFrame,PreferencesService)",0,1,1,1
"org.jabref.gui.exporter.SaveAllAction.execute()",3,1,3,3
"org.jabref.gui.exporter.SaveDatabaseAction.SaveDatabaseAction(LibraryTab,PreferencesService,BibEntryTypesManager)",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseAction.askForSavePath()",10,5,5,5
"org.jabref.gui.exporter.SaveDatabaseAction.readyForAutosave(BibDatabaseContext)",3,1,4,4
"org.jabref.gui.exporter.SaveDatabaseAction.readyForBackup(BibDatabaseContext)",1,1,2,2
"org.jabref.gui.exporter.SaveDatabaseAction.save()",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseAction.save(BibDatabaseContext,SaveDatabaseMode)",3,3,2,3
"org.jabref.gui.exporter.SaveDatabaseAction.save(Path,SaveDatabaseMode)",3,1,4,4
"org.jabref.gui.exporter.SaveDatabaseAction.save(SaveDatabaseMode)",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseAction.saveAs()",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseAction.saveAs(Path)",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseAction.saveAs(Path,SaveDatabaseMode)",7,1,6,6
"org.jabref.gui.exporter.SaveDatabaseAction.saveDatabase(Path,boolean,Charset,DatabaseSaveType)",5,1,4,5
"org.jabref.gui.exporter.SaveDatabaseAction.saveSelectedAsPlain()",2,1,2,2
"org.jabref.gui.exporter.SaveDatabaseAction.saveWithDifferentEncoding(Path,boolean,Charset,Set<Character>,DatabaseSaveType)",3,1,3,3
"org.jabref.gui.exporter.SaveDatabaseActionTest.createSaveDatabaseActionForBibDatabase(BibDatabase)",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseActionTest.saveAsShouldNotSetWorkingDirectoryIfNotSelected()",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseActionTest.saveAsShouldSetWorkingDirectory()",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseActionTest.saveKeepsChangedFlag()",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseActionTest.saveShouldNotSaveDatabaseIfPathNotSet()",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseActionTest.saveShouldShowSaveAsIfDatabaseNotSelected()",0,1,1,1
"org.jabref.gui.exporter.SaveDatabaseActionTest.setUp()",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.OptionsDialog.OptionsDialog()",2,1,1,2
"org.jabref.gui.exporter.WriteMetadataToPdfAction.OptionsDialog.dispose()",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.OptionsDialog.done()",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.OptionsDialog.getProgressArea()",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.OptionsDialog.isCanceled()",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.OptionsDialog.open()",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.WriteMetadataToPdfAction(StateManager,BibDatabaseMode,BibEntryTypesManager,FieldWriterPreferences,DialogService,TaskExecutor,FilePreferences,XmpPreferences,Charset)",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.execute()",0,1,1,1
"org.jabref.gui.exporter.WriteMetadataToPdfAction.init()",9,5,3,6
"org.jabref.gui.exporter.WriteMetadataToPdfAction.writeMetadata()",22,5,8,10
"org.jabref.gui.exporter.WriteMetadataToPdfAction.writeMetadataToFile(Path,BibEntry,BibDatabaseContext,BibDatabase)",0,1,1,1
"org.jabref.gui.externalfiles.AutoLinkFilesAction.AutoLinkFilesAction(DialogService,PreferencesService,StateManager,UndoManager,TaskExecutor)",0,1,1,1
"org.jabref.gui.externalfiles.AutoLinkFilesAction.execute()",6,3,4,4
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.AutoSetFileLinksUtil(BibDatabaseContext,FilePreferences,AutoLinkPreferences,ExternalFileTypes)",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.AutoSetFileLinksUtil(List<Path>,AutoLinkPreferences,ExternalFileTypes)",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.LinkFilesResult.addBibEntry(BibEntry)",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.LinkFilesResult.addFileException(IOException)",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.LinkFilesResult.getChangedEntries()",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.LinkFilesResult.getFileExceptions()",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.findAssociatedNotLinkedFiles(BibEntry)",10,1,6,6
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.linkAssociatedFiles(List<BibEntry>,NamedCompound)",11,1,6,6
"org.jabref.gui.externalfiles.AutoSetFileLinksUtilTest.setUp(Path)",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtilTest.testFindAssociatedNotLinkedFilesForEmptySearchDir()",0,1,1,1
"org.jabref.gui.externalfiles.AutoSetFileLinksUtilTest.testFindAssociatedNotLinkedFilesSuccess()",0,1,1,1
"org.jabref.gui.externalfiles.DateRange.DateRange(String)",0,1,1,1
"org.jabref.gui.externalfiles.DateRange.getDateRange()",0,1,1,1
"org.jabref.gui.externalfiles.DownloadFullTextAction.DownloadFullTextAction(DialogService,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.externalfiles.DownloadFullTextAction.addLinkedFileFromURL(BibDatabaseContext,URL,BibEntry,Path)",2,1,2,2
"org.jabref.gui.externalfiles.DownloadFullTextAction.downloadFullTexts(Map<BibEntry, Optional<URL>>,BibDatabaseContext)",7,4,4,4
"org.jabref.gui.externalfiles.DownloadFullTextAction.execute()",7,5,5,6
"org.jabref.gui.externalfiles.ExternalFileSorter.ExternalFileSorter(String)",0,1,1,1
"org.jabref.gui.externalfiles.ExternalFileSorter.getSorter()",0,1,1,1
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker.ExternalFilesEntryLinker(ExternalFileTypes,FilePreferences,BibDatabaseContext)",0,1,1,1
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker.addFilesToEntry(BibEntry,List<Path>)",1,1,2,2
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker.copyFileToFileDir(Path)",3,3,3,3
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker.copyFilesToFileDirAndAddToEntry(BibEntry,List<Path>)",1,1,2,2
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker.moveFilesToFileDirAndAddToEntry(BibEntry,List<Path>)",0,1,1,1
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker.moveLinkedFilesToFileDir(BibEntry)",0,1,1,1
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker.renameLinkedFilesToPattern(BibEntry)",0,1,1,1
"org.jabref.gui.externalfiles.FileDownloadTask.FileDownloadTask(URL,Path)",0,1,1,1
"org.jabref.gui.externalfiles.FileDownloadTask.call()",0,1,1,1
"org.jabref.gui.externalfiles.FileExtensionViewModel.FileExtensionViewModel(FileType,ExternalFileTypes)",0,1,1,1
"org.jabref.gui.externalfiles.FileExtensionViewModel.dirFilter()",0,1,1,1
"org.jabref.gui.externalfiles.FileExtensionViewModel.getDescription()",0,1,1,1
"org.jabref.gui.externalfiles.FileExtensionViewModel.getIcon()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtils.filterByDate(Path,DateRange)",1,1,5,6
"org.jabref.gui.externalfiles.FileFilterUtils.getFileTime(Path)",1,1,2,2
"org.jabref.gui.externalfiles.FileFilterUtils.isDuringLastDay(LocalDateTime)",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtils.isDuringLastMonth(LocalDateTime)",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtils.isDuringLastWeek(LocalDateTime)",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtils.isDuringLastYear(LocalDateTime)",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtils.sortByDate(List<Path>,ExternalFileSorter)",1,1,3,4
"org.jabref.gui.externalfiles.FileFilterUtils.sortByDateAscending(List<Path>)",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtils.sortByDateDescending(List<Path>)",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.SortingTests.setUp(Path)",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.SortingTests.sortByDateAscendingNegativeTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.SortingTests.sortByDateAscendingPositiveTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.SortingTests.sortByDateDescendingPositiveTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.SortingTests.testSortByDateDescendingNegativeTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastDayNegativeTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastDayPositiveTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastMonthNegativeTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastMonthPositiveTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastWeekNegativeTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastWeekPositiveTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastYearNegativeTest()",0,1,1,1
"org.jabref.gui.externalfiles.FileFilterUtilsTest.isDuringLastYearPositiveTest()",0,1,1,1
"org.jabref.gui.externalfiles.FindUnlinkedFilesAction.FindUnlinkedFilesAction(DialogService,StateManager)",0,1,1,1
"org.jabref.gui.externalfiles.FindUnlinkedFilesAction.execute()",0,1,1,1
"org.jabref.gui.externalfiles.ImportFilesResultItemViewModel.ImportFilesResultItemViewModel(Path,boolean,String)",2,1,2,2
"org.jabref.gui.externalfiles.ImportFilesResultItemViewModel.file()",0,1,1,1
"org.jabref.gui.externalfiles.ImportFilesResultItemViewModel.icon()",0,1,1,1
"org.jabref.gui.externalfiles.ImportFilesResultItemViewModel.message()",0,1,1,1
"org.jabref.gui.externalfiles.ImportFilesResultItemViewModel.toString()",0,1,1,1
"org.jabref.gui.externalfiles.ImportHandler.ImportHandler(BibDatabaseContext,ExternalFileTypes,PreferencesService,FileUpdateMonitor,UndoManager,StateManager)",0,1,1,1
"org.jabref.gui.externalfiles.ImportHandler.addToGroups(List<BibEntry>,Collection<GroupTreeNode>)",3,1,3,3
"org.jabref.gui.externalfiles.ImportHandler.createEmptyEntryWithLink(Path)",0,1,1,1
"org.jabref.gui.externalfiles.ImportHandler.generateKeys(List<BibEntry>)",1,1,2,2
"org.jabref.gui.externalfiles.ImportHandler.getLinker()",0,1,1,1
"org.jabref.gui.externalfiles.ImportHandler.importEntries(List<BibEntry>)",1,1,2,2
"org.jabref.gui.externalfiles.ImportHandler.importFilesInBackground(List<Path>)",26,3,8,9
"org.jabref.gui.externalfiles.UnlinkedFilesCrawler.UnlinkedFilesCrawler(Path,Filter<Path>,DateRange,ExternalFileSorter,BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesCrawler.call()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesCrawler.searchDirectory(Path,UnlinkedPDFFileFilter)",10,2,8,8
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.SearchContextAction.SearchContextAction(StandardActions)",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.SearchContextAction.execute()",1,1,5,5
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.UnlinkedFilesDialogView()",2,1,2,2
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.browseFileDirectory()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.createSearchContextMenu()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.expandTree(TreeItem<?>,boolean)",5,1,4,4
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.exportSelected()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.initButtons()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.initDirectorySelection()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.initResultTable()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.initUnlinkedFilesList()",3,1,2,2
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.initialize()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.scanFiles()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.startImport()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.UnlinkedFilesDialogViewModel(DialogService,ExternalFileTypes,UndoManager,FileUpdateMonitor,PreferencesService,StateManager,TaskExecutor)",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.browseFileDirectory()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.cancelTasks()",2,1,3,3
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.checkedFileListProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.directoryPathProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.directoryPathValidationStatus()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.getDateFilters()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.getFileFilters()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.getSearchDirectory()",2,1,3,3
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.getSorters()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.progressTextProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.progressValueProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.resultTableItems()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.selectedDateProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.selectedExtensionProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.selectedSortProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.startExport()",4,3,4,5
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.startImport()",1,2,2,2
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.startSearch()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.taskActiveProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel.treeRootProperty()",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedPDFFileFilter.UnlinkedPDFFileFilter(Filter<Path>,BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.gui.externalfiles.UnlinkedPDFFileFilter.accept(Path)",3,2,3,3
"org.jabref.gui.externalfiletype.CustomExternalFileType.CustomExternalFileType(ExternalFileType)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.CustomExternalFileType(String,String,String,String,String,JabRefIcon)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.buildFromArgs(String[])",7,4,3,7
"org.jabref.gui.externalfiletype.CustomExternalFileType.copy()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.equals(Object)",3,3,6,7
"org.jabref.gui.externalfiletype.CustomExternalFileType.getExtension()",1,2,1,2
"org.jabref.gui.externalfiletype.CustomExternalFileType.getIcon()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.getIconName()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.getMimeType()",1,2,1,2
"org.jabref.gui.externalfiletype.CustomExternalFileType.getName()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.getOpenWithApplication()",1,2,1,2
"org.jabref.gui.externalfiletype.CustomExternalFileType.hashCode()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.setExtension(String)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.setIcon(JabRefIcon)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.setIconName(String)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.setMimeType(String)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.setName(String)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.setOpenWith(String)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomExternalFileType.toString()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesDialog.CustomizeExternalFileTypesDialog()",2,1,2,2
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesDialog.addNewType()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesDialog.initialize()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesDialog.resetToDefault()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.CustomizeExternalFileTypesViewModel()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.addNewType()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.edit(ExternalFileType)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.getFileTypes()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.remove(ExternalFileType)",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.resetToDefaults()",0,1,1,1
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.showEditDialog(ExternalFileType,String)",2,1,2,2
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeEntryDialog.EditExternalFileTypeEntryDialog(CustomExternalFileType,String)",2,1,2,2
"org.jabref.gui.externalfiletype.EditExternalFileTypeEntryDialog.initialize()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeEntryDialog.openFileChooser(ActionEvent)",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.EditExternalFileTypeViewModel(CustomExternalFileType)",2,1,2,2
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.customApplicationSelectedProperty()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.defaultApplicationSelectedProperty()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.extensionProperty()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.getIcon()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.mimeTypeProperty()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.nameProperty()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.selectedApplicationProperty()",0,1,1,1
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel.storeSettings()",6,1,5,5
"org.jabref.gui.externalfiletype.EditExternalFileTypesAction.execute()",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileType.getField()",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.ExternalFileTypes()",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.fromLinkedFile(LinkedFile,boolean)",6,3,3,5
"org.jabref.gui.externalfiletype.ExternalFileTypes.getDefaultExternalFileTypes()",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.getExternalFileTypeByExt(String)",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.getExternalFileTypeByFile(Path)",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.getExternalFileTypeByMimeType(String)",6,4,5,5
"org.jabref.gui.externalfiletype.ExternalFileTypes.getExternalFileTypeByName(String)",1,2,1,2
"org.jabref.gui.externalfiletype.ExternalFileTypes.getExternalFileTypeForName(String)",4,1,5,5
"org.jabref.gui.externalfiletype.ExternalFileTypes.getExternalFileTypeSelection()",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.getInstance()",1,1,1,2
"org.jabref.gui.externalfiletype.ExternalFileTypes.getStringArrayRepresentation(ExternalFileType)",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.isExternalFileTypeByExt(String)",0,1,1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes.setExternalFileTypes(List<ExternalFileType>)",15,4,8,9
"org.jabref.gui.externalfiletype.ExternalFileTypes.updateExternalFileTypes()",26,8,9,11
"org.jabref.gui.externalfiletype.StandardExternalFileType.StandardExternalFileType(String,String,String,String,String,JabRefIcon)",0,1,1,1
"org.jabref.gui.externalfiletype.StandardExternalFileType.getExtension()",0,1,1,1
"org.jabref.gui.externalfiletype.StandardExternalFileType.getIcon()",0,1,1,1
"org.jabref.gui.externalfiletype.StandardExternalFileType.getMimeType()",0,1,1,1
"org.jabref.gui.externalfiletype.StandardExternalFileType.getName()",0,1,1,1
"org.jabref.gui.externalfiletype.StandardExternalFileType.getOpenWithApplication()",0,1,1,1
"org.jabref.gui.externalfiletype.UnknownExternalFileType.UnknownExternalFileType(String)",0,1,1,1
"org.jabref.gui.externalfiletype.UnknownExternalFileType.UnknownExternalFileType(String,String)",0,1,1,1
"org.jabref.gui.externalfiletype.UnknownExternalFileType.getExtension()",0,1,1,1
"org.jabref.gui.externalfiletype.UnknownExternalFileType.getIcon()",0,1,1,1
"org.jabref.gui.externalfiletype.UnknownExternalFileType.getMimeType()",0,1,1,1
"org.jabref.gui.externalfiletype.UnknownExternalFileType.getName()",0,1,1,1
"org.jabref.gui.externalfiletype.UnknownExternalFileType.getOpenWithApplication()",0,1,1,1
"org.jabref.gui.fieldeditors.AbstractEditorViewModel.AbstractEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",1,1,2,2
"org.jabref.gui.fieldeditors.AbstractEditorViewModel.bindToEntry(BibEntry)",5,1,3,3
"org.jabref.gui.fieldeditors.AbstractEditorViewModel.complete(ISuggestionRequest)",0,1,1,1
"org.jabref.gui.fieldeditors.AbstractEditorViewModel.getFieldValidator()",0,1,1,1
"org.jabref.gui.fieldeditors.AbstractEditorViewModel.textProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.CitationKeyEditor.CitationKeyEditor(Field,PreferencesService,SuggestionProvider<?>,FieldCheckers,BibDatabaseContext,UndoManager,DialogService)",0,1,1,1
"org.jabref.gui.fieldeditors.CitationKeyEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.CitationKeyEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.CitationKeyEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.CitationKeyEditorViewModel.CitationKeyEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers,PreferencesService,BibDatabaseContext,UndoManager,DialogService)",0,1,1,1
"org.jabref.gui.fieldeditors.CitationKeyEditorViewModel.getGenerateCiteKeyCommand()",0,1,1,1
"org.jabref.gui.fieldeditors.DateEditor.DateEditor(Field,DateTimeFormatter,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.DateEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.DateEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.DateEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.DateEditorViewModel.DateEditorViewModel(Field,SuggestionProvider<?>,DateTimeFormatter,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.DateEditorViewModel.getDateToStringConverter()",9,3,4,4
"org.jabref.gui.fieldeditors.EditorTextArea.EditorTextArea()",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextArea.EditorTextArea(String)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextArea.initContextMenu(Supplier<List<MenuItem>>)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextArea.initialize(URL,ResourceBundle)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextArea.paste()",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextArea.setPasteActionHandler(PasteActionHandler)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextField.EditorTextField()",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextField.EditorTextField(String)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextField.initContextMenu(Supplier<List<MenuItem>>)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTextField.initialize(URL,ResourceBundle)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTypeEditorViewModel.EditorTypeEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTypeEditorViewModel.convertToDisplayText(String)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorTypeEditorViewModel.getItemMap()",0,1,1,1
"org.jabref.gui.fieldeditors.EditorValidator.EditorValidator(PreferencesService)",0,1,1,1
"org.jabref.gui.fieldeditors.EditorValidator.configureValidation(ValidationStatus,TextInputControl)",1,1,2,2
"org.jabref.gui.fieldeditors.FieldEditorFX.childIsFocused()",0,1,1,1
"org.jabref.gui.fieldeditors.FieldEditorFX.focus()",0,1,1,1
"org.jabref.gui.fieldeditors.FieldEditorFX.getWeight()",0,1,1,1
"org.jabref.gui.fieldeditors.FieldEditors.getForField(Field,TaskExecutor,DialogService,JournalAbbreviationRepository,PreferencesService,BibDatabaseContext,EntryType,SuggestionProviders,UndoManager)",23,20,19,22
"org.jabref.gui.fieldeditors.FieldEditors.getSuggestionProvider(Field,SuggestionProviders,MetaData)",4,2,3,3
"org.jabref.gui.fieldeditors.FieldNameLabel.FieldNameLabel(Field)",1,1,2,2
"org.jabref.gui.fieldeditors.FieldNameLabel.getDescription(Field)",9,96,96,96
"org.jabref.gui.fieldeditors.GenderEditorViewModel.GenderEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.GenderEditorViewModel.convertToDisplayText(String)",0,1,1,1
"org.jabref.gui.fieldeditors.GenderEditorViewModel.getItemMap()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditor.IdentifierEditor(Field,TaskExecutor,DialogService,SuggestionProvider<?>,FieldCheckers,PreferencesService)",2,1,2,2
"org.jabref.gui.fieldeditors.IdentifierEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditor.fetchInformationByIdentifier()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditor.lookupIdentifier()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditor.openExternalLink()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.IdentifierEditorViewModel(Field,SuggestionProvider<?>,TaskExecutor,DialogService,FieldCheckers,PreferencesService)",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.fetchInformationByIdentifier(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.getIdentifierLookupInProgress()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.getValidIdentifierIsNotPresent()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.idFetcherAvailableProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.identifierLookupInProgressProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.isIdFetcherAvailable()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.lookupIdentifier(BibEntry)",4,1,2,2
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.openExternalLink()",3,1,3,3
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.openExternalLinkDefault()",2,1,2,2
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel.validIdentifierIsNotPresentProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.fieldeditors.IdentifierEditorViewModelTest.validIdentifierIsNotPresentIsTrueForEmptyText()",0,1,1,1
"org.jabref.gui.fieldeditors.JournalEditor.JournalEditor(Field,JournalAbbreviationRepository,PreferencesService,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.JournalEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.JournalEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.JournalEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.JournalEditor.toggleAbbreviation()",0,1,1,1
"org.jabref.gui.fieldeditors.JournalEditorViewModel.JournalEditorViewModel(Field,SuggestionProvider<?>,JournalAbbreviationRepository,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.JournalEditorViewModel.toggleAbbreviation()",4,2,3,4
"org.jabref.gui.fieldeditors.KeywordsEditor.KeywordsEditor(Field,SuggestionProvider<?>,FieldCheckers,PreferencesService)",0,1,1,1
"org.jabref.gui.fieldeditors.KeywordsEditor.getWeight()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedEntriesEditor.LinkedEntriesEditor(Field,BibDatabaseContext,SuggestionProvider<BibEntry>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedEntriesEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedEntriesEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedEntriesEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedEntriesEditorViewModel.LinkedEntriesEditorViewModel(Field,SuggestionProvider<?>,BibDatabaseContext,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedEntriesEditorViewModel.getStringConverter()",2,2,1,2
"org.jabref.gui.fieldeditors.LinkedEntriesEditorViewModel.jumpToEntry(ParsedEntryLink)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedEntriesEditorViewModel.linkedEntriesProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.LinkedFileViewModel(LinkedFile,BibEntry,BibDatabaseContext,TaskExecutor,DialogService,PreferencesService,ExternalFileTypes)",5,2,4,4
"org.jabref.gui.fieldeditors.LinkedFileViewModel.acceptAsLinked()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.askForNameAndRename()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.checkSSLHandshake(URLDownload)",7,3,4,4
"org.jabref.gui.fieldeditors.LinkedFileViewModel.delete()",9,5,5,6
"org.jabref.gui.fieldeditors.LinkedFileViewModel.descriptionProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.download()",11,4,6,8
"org.jabref.gui.fieldeditors.LinkedFileViewModel.downloadOngoingProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.downloadProgressProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.edit()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.fileExistsValidationStatus()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.findIn(List<Path>)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.getDescription()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.getDescriptionAndLink()",2,2,2,2
"org.jabref.gui.fieldeditors.LinkedFileViewModel.getFile()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.getObservables()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.getTruncatedDescriptionAndLink()",2,2,2,2
"org.jabref.gui.fieldeditors.LinkedFileViewModel.getTypeIcon()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.inferFileType(URLDownload)",1,1,2,2
"org.jabref.gui.fieldeditors.LinkedFileViewModel.inferFileTypeFromMimeType(URLDownload)",2,2,2,2
"org.jabref.gui.fieldeditors.LinkedFileViewModel.inferFileTypeFromURL(String)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.isAutomaticallyFound()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.isAutomaticallyFoundProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.isGeneratedNameSameAsOriginal()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.isGeneratedPathSameAsOriginal()",2,1,1,2
"org.jabref.gui.fieldeditors.LinkedFileViewModel.isOfflinePdfProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.linkProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.markAsAutomaticallyFound()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.moveToDefaultDirectory()",6,3,4,5
"org.jabref.gui.fieldeditors.LinkedFileViewModel.moveToDefaultDirectoryAndRename()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.open()",2,1,3,3
"org.jabref.gui.fieldeditors.LinkedFileViewModel.openFolder()",6,1,4,4
"org.jabref.gui.fieldeditors.LinkedFileViewModel.parsePdfMetadataAndShowMergeDialog()",2,1,2,2
"org.jabref.gui.fieldeditors.LinkedFileViewModel.performRenameWithConflictCheck(String)",4,3,3,4
"org.jabref.gui.fieldeditors.LinkedFileViewModel.prepareDownloadTask(Path,URLDownload)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.renameFileToName(String)",3,2,2,3
"org.jabref.gui.fieldeditors.LinkedFileViewModel.renameToSuggestion()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModel.wrapImporterToSupplier(Importer,Path)",5,2,3,5
"org.jabref.gui.fieldeditors.LinkedFileViewModel.writeMetadataToPdf()",6,1,2,3
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.deleteMissingFileReturnsTrue()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.deleteWhenDeleteChosenReturnsTrueAndDeletesFile()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.deleteWhenDialogCancelledReturnsFalseAndDoesNotRemoveFile()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.deleteWhenFilePathNotPresentReturnsTrue()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.deleteWhenRemoveChosenReturnsTrueButDoesNotDeletesFile()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.downloadDoesNotOverwriteFileTypeExtension()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.downloadHtmlFileCausesWarningDisplay()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.downloadHtmlWhenLinkedFilePointsToHtml()",3,3,3,3
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.downloadPdfFileWhenLinkedFilePointsToPdfUrl()",3,3,3,3
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.isNotSamePath()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.isSamePath()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.mimeTypeStringWithParameterIsReturnedAsWithoutParameter()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.setUp(Path)",2,1,2,2
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest.tearDown()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.ContextAction.ContextAction(StandardActions,LinkedFileViewModel,PreferencesService)",4,1,10,10
"org.jabref.gui.fieldeditors.LinkedFilesEditor.ContextAction.execute()",1,1,11,11
"org.jabref.gui.fieldeditors.LinkedFilesEditor.LinkedFilesEditor(Field,DialogService,BibDatabaseContext,TaskExecutor,SuggestionProvider<?>,FieldCheckers,PreferencesService)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.addFromURL()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.addNewFile()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.createContextMenuForFile(LinkedFileViewModel)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.createFileDisplay(LinkedFileViewModel)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.fetchFulltext()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.getWeight()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditor.handleItemMouseClick(LinkedFileViewModel,MouseEvent)",2,1,3,3
"org.jabref.gui.fieldeditors.LinkedFilesEditor.handleOnDragDetected(LinkedFileViewModel,MouseEvent)",1,1,2,2
"org.jabref.gui.fieldeditors.LinkedFilesEditor.handleOnDragDropped(LinkedFileViewModel,DragEvent)",6,4,4,4
"org.jabref.gui.fieldeditors.LinkedFilesEditor.handleOnDragOver(LinkedFileViewModel,DragEvent)",2,1,3,3
"org.jabref.gui.fieldeditors.LinkedFilesEditor.setUpKeyBindings()",9,1,3,4
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.LinkedFilesEditorViewModel(Field,SuggestionProvider<?>,DialogService,BibDatabaseContext,TaskExecutor,FieldCheckers,PreferencesService)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.addFromURL()",3,1,3,3
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.addFromURL(URL)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.addNewFile()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.bindToEntry(BibEntry)",1,1,2,2
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.deleteFile(LinkedFileViewModel)",4,1,3,3
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.fetchFulltext()",3,1,2,2
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.filesProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.findAssociatedNotLinkedFiles(BibEntry)",2,1,3,3
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.fromFile(Path)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.fromFile(Path,List<Path>,ExternalFileTypes)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.getFiles()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.getStringRepresentation(List<LinkedFileViewModel>)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.isFulltextLookupInProgress()",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.parseToFileViewModel(String)",0,1,1,1
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel.removeFileLink(LinkedFileViewModel)",0,1,1,1
"org.jabref.gui.fieldeditors.MapBasedEditorViewModel.MapBasedEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.MapBasedEditorViewModel.getItems()",0,1,1,1
"org.jabref.gui.fieldeditors.MapBasedEditorViewModel.getStringConverter()",6,3,3,3
"org.jabref.gui.fieldeditors.MapBasedEditorViewModel.getValueFromString(String)",1,1,2,2
"org.jabref.gui.fieldeditors.MonthEditorViewModel.MonthEditorViewModel(Field,SuggestionProvider<?>,BibDatabaseMode,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.MonthEditorViewModel.convertToDisplayText(Month)",0,1,1,1
"org.jabref.gui.fieldeditors.MonthEditorViewModel.getItems()",0,1,1,1
"org.jabref.gui.fieldeditors.MonthEditorViewModel.getStringConverter()",10,4,4,4
"org.jabref.gui.fieldeditors.OptionEditor.OptionEditor(OptionEditorViewModel<T>)",0,1,1,1
"org.jabref.gui.fieldeditors.OptionEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.OptionEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.OptionEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.OptionEditorViewModel.OptionEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.OwnerEditor.OwnerEditor(Field,PreferencesService,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.OwnerEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.OwnerEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.OwnerEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.OwnerEditor.setOwner()",0,1,1,1
"org.jabref.gui.fieldeditors.OwnerEditorViewModel.OwnerEditorViewModel(Field,SuggestionProvider<?>,PreferencesService,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.OwnerEditorViewModel.setOwner()",0,1,1,1
"org.jabref.gui.fieldeditors.PaginationEditorViewModel.PaginationEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.PaginationEditorViewModel.convertToDisplayText(String)",0,1,1,1
"org.jabref.gui.fieldeditors.PaginationEditorViewModel.getItemMap()",0,1,1,1
"org.jabref.gui.fieldeditors.PatentTypeEditorViewModel.PatentTypeEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.PatentTypeEditorViewModel.convertToDisplayText(String)",0,1,1,1
"org.jabref.gui.fieldeditors.PatentTypeEditorViewModel.getItemMap()",0,1,1,1
"org.jabref.gui.fieldeditors.PersonsEditor.PersonsEditor(Field,SuggestionProvider<?>,PreferencesService,FieldCheckers,boolean)",1,1,1,2
"org.jabref.gui.fieldeditors.PersonsEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.PersonsEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.PersonsEditor.requestFocus()",0,1,1,1
"org.jabref.gui.fieldeditors.PersonsEditorViewModel.PersonsEditorViewModel(Field,SuggestionProvider<?>,AutoCompletePreferences,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.PersonsEditorViewModel.complete(ISuggestionRequest)",0,1,1,1
"org.jabref.gui.fieldeditors.PersonsEditorViewModel.getAutoCompletionConverter()",0,1,1,1
"org.jabref.gui.fieldeditors.PersonsEditorViewModel.getAutoCompletionStrategy()",0,1,1,1
"org.jabref.gui.fieldeditors.SimpleEditor.SimpleEditor(Field,SuggestionProvider<?>,FieldCheckers,PreferencesService)",0,1,1,1
"org.jabref.gui.fieldeditors.SimpleEditor.SimpleEditor(Field,SuggestionProvider<?>,FieldCheckers,PreferencesService,boolean)",4,1,3,4
"org.jabref.gui.fieldeditors.SimpleEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.SimpleEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.SimpleEditor.requestFocus()",0,1,1,1
"org.jabref.gui.fieldeditors.SimpleEditorViewModel.SimpleEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.SimpleEditorViewModel.getAutoCompletionStrategy()",0,1,1,1
"org.jabref.gui.fieldeditors.TextInputControlBehavior.showContextMenu(TextArea,ContextMenu,ContextMenuEvent)",15,1,9,10
"org.jabref.gui.fieldeditors.TextInputControlBehavior.showContextMenu(TextField,ContextMenu,ContextMenuEvent)",15,1,9,10
"org.jabref.gui.fieldeditors.TypeEditorViewModel.TypeEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.TypeEditorViewModel.convertToDisplayText(String)",0,1,1,1
"org.jabref.gui.fieldeditors.TypeEditorViewModel.getItemMap()",0,1,1,1
"org.jabref.gui.fieldeditors.URLUtil.URLUtil()",0,1,1,1
"org.jabref.gui.fieldeditors.URLUtil.cleanGoogleSearchURL(String)",9,6,3,7
"org.jabref.gui.fieldeditors.URLUtil.getSuffix(String)",20,5,10,11
"org.jabref.gui.fieldeditors.URLUtil.isURL(String)",0,1,1,1
"org.jabref.gui.fieldeditors.UrlEditor.UrlEditor(Field,DialogService,SuggestionProvider<?>,FieldCheckers,PreferencesService)",0,1,1,1
"org.jabref.gui.fieldeditors.UrlEditor.bindToEntry(BibEntry)",0,1,1,1
"org.jabref.gui.fieldeditors.UrlEditor.getNode()",0,1,1,1
"org.jabref.gui.fieldeditors.UrlEditor.getViewModel()",0,1,1,1
"org.jabref.gui.fieldeditors.UrlEditor.openExternalLink(ActionEvent)",0,1,1,1
"org.jabref.gui.fieldeditors.UrlEditorViewModel.UrlEditorViewModel(Field,SuggestionProvider<?>,DialogService,FieldCheckers)",1,1,2,2
"org.jabref.gui.fieldeditors.UrlEditorViewModel.isValidUrlIsNotPresent()",0,1,1,1
"org.jabref.gui.fieldeditors.UrlEditorViewModel.openExternalLink()",2,2,2,3
"org.jabref.gui.fieldeditors.UrlEditorViewModel.validUrlIsNotPresentProperty()",0,1,1,1
"org.jabref.gui.fieldeditors.YesNoEditorViewModel.YesNoEditorViewModel(Field,SuggestionProvider<?>,FieldCheckers)",0,1,1,1
"org.jabref.gui.fieldeditors.YesNoEditorViewModel.convertToDisplayText(String)",0,1,1,1
"org.jabref.gui.fieldeditors.YesNoEditorViewModel.getItemMap()",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.DefaultMenu.DefaultMenu(TextInputControl)",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.DefaultMenu.get()",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.DefaultMenu.getCaseChangeMenu(TextInputControl)",1,1,2,2
"org.jabref.gui.fieldeditors.contextmenu.DefaultMenu.getClearFieldMenuItem(TextInputControl)",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.DefaultMenu.getConversionMenu(TextInputControl)",1,1,2,2
"org.jabref.gui.fieldeditors.contextmenu.EditorContextAction.EditorContextAction(StandardActions,TextInputControl)",4,1,7,7
"org.jabref.gui.fieldeditors.contextmenu.EditorContextAction.execute()",1,1,6,6
"org.jabref.gui.fieldeditors.contextmenu.EditorContextAction.getDefaultContextMenuItems(TextInputControl,KeyBindingRepository)",1,1,2,2
"org.jabref.gui.fieldeditors.contextmenu.EditorMenus.getCleanupUrlMenu(TextArea)",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.EditorMenus.getDOIMenu(TextArea)",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.EditorMenus.getNameMenu(TextInputControl)",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.AddToProtectedTermsAction.AddToProtectedTermsAction(ProtectedTermsList)",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.AddToProtectedTermsAction.execute()",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.FormatFieldAction.FormatFieldAction()",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.FormatFieldAction.execute()",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.ProtectSelectionAction.ProtectSelectionAction()",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.ProtectSelectionAction.execute()",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.ProtectedTermsMenu(TextInputControl)",0,1,1,1
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.getExternalFilesMenu()",1,1,2,2
"org.jabref.gui.groups.GroupDescriptions.GroupDescriptions()",0,1,1,1
"org.jabref.gui.groups.GroupDescriptions.getShortDescription(SearchGroup,boolean)",3,1,2,4
"org.jabref.gui.groups.GroupDescriptions.getShortDescriptionAllEntriesGroup()",0,1,1,1
"org.jabref.gui.groups.GroupDescriptions.getShortDescriptionExplicitGroup(ExplicitGroup)",1,1,1,3
"org.jabref.gui.groups.GroupDescriptions.getShortDescriptionKeywordGroup(KeywordGroup,boolean)",3,1,2,4
"org.jabref.gui.groups.GroupDialogView.GroupDialogView(DialogService,BibDatabaseContext,PreferencesService,AbstractGroup,GroupDialogHeader)",5,1,4,4
"org.jabref.gui.groups.GroupDialogView.IkonliCell.updateItem(Ikon,boolean)",3,1,2,3
"org.jabref.gui.groups.GroupDialogView.initialize()",6,1,3,3
"org.jabref.gui.groups.GroupDialogView.openHelp()",0,1,1,1
"org.jabref.gui.groups.GroupDialogView.openIconPicker()",4,1,4,4
"org.jabref.gui.groups.GroupDialogView.texGroupBrowse()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.GroupDialogViewModel(DialogService,BibDatabaseContext,PreferencesService,AbstractGroup,GroupDialogHeader)",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.autoGroupKeywordsDeliminatorProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.autoGroupKeywordsFieldProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.autoGroupKeywordsHierarchicalDeliminatorProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.autoGroupKeywordsOptionProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.autoGroupPersonsFieldProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.autoGroupPersonsOptionProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.colorFieldProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.descriptionProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.getAbsoluteTexGroupPath(String)",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.getFileDirectoriesAsPaths()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.groupHierarchyListProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.groupHierarchySelectedProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.iconProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.keywordFieldEmptyValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.keywordGroupCaseSensitiveProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.keywordGroupRegexProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.keywordGroupSearchFieldProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.keywordGroupSearchTermProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.keywordRegexValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.keywordSearchTermEmptyValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.nameContainsDelimiterValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.nameProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.nameValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.openHelpPage()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.resultConverter(ButtonType)",20,3,12,13
"org.jabref.gui.groups.GroupDialogViewModel.sameNameValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.searchFlagsProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.searchGroupSearchTermProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.searchRegexValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.searchSearchTermEmptyValidationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.setValues()",13,1,10,10
"org.jabref.gui.groups.GroupDialogViewModel.setupValidation()",35,9,9,18
"org.jabref.gui.groups.GroupDialogViewModel.texGroupBrowse()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.texGroupFilePathProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.texGroupFilePathValidatonStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.typeAutoProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.typeExplicitProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.typeKeywordsProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.typeSearchProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.typeTexProperty()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModel.validationHandler(Event)",1,1,2,2
"org.jabref.gui.groups.GroupDialogViewModel.validationStatus()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModelTest.setUp(Path)",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModelTest.validateExistingAbsolutePath()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModelTest.validateExistingRelativePath()",0,1,1,1
"org.jabref.gui.groups.GroupDialogViewModelTest.validateNonExistingAbsolutePath()",0,1,1,1
"org.jabref.gui.groups.GroupModeViewModel.GroupModeViewModel(GroupViewMode)",0,1,1,1
"org.jabref.gui.groups.GroupModeViewModel.getUnionIntersectionGraphic()",2,3,3,3
"org.jabref.gui.groups.GroupModeViewModel.getUnionIntersectionTooltip()",2,3,3,3
"org.jabref.gui.groups.GroupNodeViewModel.GroupNodeViewModel(BibDatabaseContext,StateManager,TaskExecutor,AbstractGroup,CustomLocalDragboard,PreferencesService)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.GroupNodeViewModel(BibDatabaseContext,StateManager,TaskExecutor,GroupTreeNode,CustomLocalDragboard,PreferencesService)",3,1,3,3
"org.jabref.gui.groups.GroupNodeViewModel.acceptableDrop(Dragboard)",2,1,2,3
"org.jabref.gui.groups.GroupNodeViewModel.addEntriesToGroup(List<BibEntry>)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.addSubgroup(AbstractGroup)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.allSelectedEntriesMatchedProperty()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.anySelectedEntriesMatchedProperty()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.createDefaultIcon()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.draggedOn(GroupNodeViewModel,DroppingMouseLocation)",10,2,6,8
"org.jabref.gui.groups.GroupNodeViewModel.equals(Object)",3,3,2,4
"org.jabref.gui.groups.GroupNodeViewModel.expandedProperty()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getAllEntriesGroup(BibDatabaseContext,StateManager,TaskExecutor,CustomLocalDragboard,PreferencesService)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getChildByPath(String)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getChildren()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getColor()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getDescription()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getDisplayName()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getGroupNode()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getHits()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getIcon()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getParent()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getPath()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.getPositionInParent()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.hasChildrenProperty()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.hashCode()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.isMatchedBy(String)",1,1,2,2
"org.jabref.gui.groups.GroupNodeViewModel.isRoot()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.moveTo(GroupNodeViewModel)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.moveTo(GroupTreeNode,int)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.onDatabaseChanged(Change<? extends BibEntry>)",33,1,11,11
"org.jabref.gui.groups.GroupNodeViewModel.parseIcon(String)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.refreshGroup()",2,1,2,2
"org.jabref.gui.groups.GroupNodeViewModel.toString()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.toViewModel(GroupTreeNode)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.toggleExpansion()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModel.updateMatchedEntries()",1,1,2,2
"org.jabref.gui.groups.GroupNodeViewModelTest.alwaysMatchedByEmptySearchString()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.draggedOnBottomOfGroupAddsAfterIt()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.draggedOnBottomOfGroupAddsAfterItWhenSourceGroupWasBefore()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.draggedOnTopOfGroupAddsBeforeIt()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.draggedOnTopOfGroupAddsBeforeItWhenSourceGroupWasBefore()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.entriesAreAddedCorrectly()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.getDisplayNameConvertsLatexToUnicode()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.getViewModelForGroup(AbstractGroup)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.getViewModelForGroup(GroupTreeNode)",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.isMatchedIfContainsPartOfSearchString()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.groups.GroupNodeViewModelTest.treeOfAutomaticKeywordGroupIsCombined()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.GroupSidePane(SidePane,TaskExecutor,StateManager,PreferencesService,DialogService)",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.afterOpening()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.beforeClosing()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.createContentPane()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.getAdditionalHeaderButtons()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.getResizePolicy()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.getToggleAction()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.getType()",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.setGraphicsAndTooltipForButton(GroupViewMode)",0,1,1,1
"org.jabref.gui.groups.GroupSidePane.toggleUnionIntersection()",2,1,3,3
"org.jabref.gui.groups.GroupTreeNodeViewModel.GroupTreeNodeViewModel(GroupTreeNode)",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.addEntriesToGroup(List<BibEntry>)",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.addNewGroup(AbstractGroup,CountingUndoManager)",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.canAddEntries(List<BibEntry>)",1,1,2,2
"org.jabref.gui.groups.GroupTreeNodeViewModel.canBeEdited()",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.canMoveDown()",1,1,2,2
"org.jabref.gui.groups.GroupTreeNodeViewModel.canMoveLeft()",1,1,2,2
"org.jabref.gui.groups.GroupTreeNodeViewModel.canMoveRight()",1,1,2,2
"org.jabref.gui.groups.GroupTreeNodeViewModel.canMoveUp()",1,1,2,2
"org.jabref.gui.groups.GroupTreeNodeViewModel.canRemoveEntries(List<BibEntry>)",1,1,2,2
"org.jabref.gui.groups.GroupTreeNodeViewModel.changeEntriesTo(List<BibEntry>,UndoManager)",11,1,9,9
"org.jabref.gui.groups.GroupTreeNodeViewModel.equals(Object)",3,3,2,4
"org.jabref.gui.groups.GroupTreeNodeViewModel.getChildren()",1,1,2,2
"org.jabref.gui.groups.GroupTreeNodeViewModel.getDescription()",4,1,4,4
"org.jabref.gui.groups.GroupTreeNodeViewModel.getName()",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.getNode()",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.hashCode()",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.isAllEntriesGroup()",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.printInItalics()",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.removeEntriesFromGroup(List<BibEntry>)",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.sortChildrenByName(boolean)",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.subscribeToDescendantChanged(Consumer<GroupTreeNodeViewModel>)",0,1,1,1
"org.jabref.gui.groups.GroupTreeNodeViewModel.toString()",0,1,1,1
"org.jabref.gui.groups.GroupTreeView.DragExpansionHandler.expandGroup(TreeItem<GroupNodeViewModel>)",3,2,3,3
"org.jabref.gui.groups.GroupTreeView.GroupTreeView(TaskExecutor,StateManager,PreferencesService,DialogService)",0,1,1,1
"org.jabref.gui.groups.GroupTreeView.addNewGroup()",0,1,1,1
"org.jabref.gui.groups.GroupTreeView.createContextMenuForGroup(GroupNodeViewModel)",0,1,1,1
"org.jabref.gui.groups.GroupTreeView.createNodes()",0,1,1,1
"org.jabref.gui.groups.GroupTreeView.getTreeItemByValue(GroupNodeViewModel)",0,1,1,1
"org.jabref.gui.groups.GroupTreeView.getTreeItemByValue(TreeItem<GroupNodeViewModel>,GroupNodeViewModel)",5,4,3,4
"org.jabref.gui.groups.GroupTreeView.initialize()",47,2,18,19
"org.jabref.gui.groups.GroupTreeView.selectNode(GroupNodeViewModel)",0,1,1,1
"org.jabref.gui.groups.GroupTreeView.selectNode(GroupNodeViewModel,boolean)",5,1,3,3
"org.jabref.gui.groups.GroupTreeView.setNewGroupButtonStyle(TreeTableView<GroupNodeViewModel>)",2,1,2,2
"org.jabref.gui.groups.GroupTreeView.setupClearButtonField(CustomTextField)",1,1,2,2
"org.jabref.gui.groups.GroupTreeView.updateSelection(List<TreeItem<GroupNodeViewModel>>)",4,1,4,4
"org.jabref.gui.groups.GroupTreeViewModel.GroupTreeViewModel(StateManager,DialogService,PreferencesService,TaskExecutor,CustomLocalDragboard)",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.addNewGroupToRoot()",2,1,2,2
"org.jabref.gui.groups.GroupTreeViewModel.addNewSubgroup(GroupNodeViewModel,GroupDialogHeader)",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.addSelectedEntries(GroupNodeViewModel)",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.editGroup(GroupNodeViewModel)",7,1,3,4
"org.jabref.gui.groups.GroupTreeViewModel.filterPredicateProperty()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.filterTextProperty()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.onActiveDatabaseChanged(Optional<BibDatabaseContext>)",4,1,3,3
"org.jabref.gui.groups.GroupTreeViewModel.onSelectedGroupChanged(ObservableList<GroupNodeViewModel>)",5,2,3,4
"org.jabref.gui.groups.GroupTreeViewModel.refresh()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.removeGroupAndSubgroups(GroupNodeViewModel)",1,1,2,2
"org.jabref.gui.groups.GroupTreeViewModel.removeGroupKeepSubgroups(GroupNodeViewModel)",1,1,2,2
"org.jabref.gui.groups.GroupTreeViewModel.removeGroupsAndSubGroupsFromEntries(GroupNodeViewModel)",7,1,5,5
"org.jabref.gui.groups.GroupTreeViewModel.removeSelectedEntries(GroupNodeViewModel)",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.removeSubgroups(GroupNodeViewModel)",3,1,3,3
"org.jabref.gui.groups.GroupTreeViewModel.rootGroupProperty()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.selectedGroupsProperty()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.sortAlphabeticallyRecursive(GroupNodeViewModel)",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModel.writeGroupChangesToMetaData()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModelTest.explicitGroupsAreRemovedFromEntriesOnDelete()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModelTest.keywordGroupsAreNotRemovedFromEntriesOnDelete()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModelTest.rootGroupIsAllEntriesByDefault()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModelTest.rootGroupIsSelectedByDefault()",0,1,1,1
"org.jabref.gui.groups.GroupTreeViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.groups.GroupsPreferences.GroupsPreferences(GroupViewMode,boolean,boolean,Character)",0,1,1,1
"org.jabref.gui.groups.GroupsPreferences.getGroupViewMode()",0,1,1,1
"org.jabref.gui.groups.GroupsPreferences.getKeywordDelimiter()",0,1,1,1
"org.jabref.gui.groups.GroupsPreferences.shouldAutoAssignGroup()",0,1,1,1
"org.jabref.gui.groups.GroupsPreferences.shouldDisplayGroupCount()",0,1,1,1
"org.jabref.gui.groups.MoveGroupChange.MoveGroupChange(GroupTreeNode,int,GroupTreeNode,int)",0,1,1,1
"org.jabref.gui.groups.MoveGroupChange.getNewChildIndex()",0,1,1,1
"org.jabref.gui.groups.MoveGroupChange.getNewParent()",0,1,1,1
"org.jabref.gui.groups.MoveGroupChange.getOldChildIndex()",0,1,1,1
"org.jabref.gui.groups.MoveGroupChange.getOldParent()",0,1,1,1
"org.jabref.gui.groups.UndoableAddOrRemoveGroup.UndoableAddOrRemoveGroup(GroupTreeNodeViewModel,GroupTreeNodeViewModel,int)",1,1,2,2
"org.jabref.gui.groups.UndoableAddOrRemoveGroup.doOperation(boolean)",13,1,5,11
"org.jabref.gui.groups.UndoableAddOrRemoveGroup.getPresentationName()",1,4,4,4
"org.jabref.gui.groups.UndoableAddOrRemoveGroup.redo()",0,1,1,1
"org.jabref.gui.groups.UndoableAddOrRemoveGroup.undo()",0,1,1,1
"org.jabref.gui.groups.UndoableChangeEntriesOfGroup.UndoableChangeEntriesOfGroup()",0,1,1,1
"org.jabref.gui.groups.UndoableChangeEntriesOfGroup.getUndoableEdit(GroupTreeNodeViewModel,List<FieldChange>)",2,2,3,3
"org.jabref.gui.groups.UndoableModifySubtree.UndoableModifySubtree(GroupTreeNodeViewModel,GroupTreeNodeViewModel,String)",0,1,1,1
"org.jabref.gui.groups.UndoableModifySubtree.getPresentationName()",0,1,1,1
"org.jabref.gui.groups.UndoableModifySubtree.redo()",1,1,2,2
"org.jabref.gui.groups.UndoableModifySubtree.undo()",1,1,2,2
"org.jabref.gui.groups.UndoableMoveGroup.UndoableMoveGroup(GroupTreeNodeViewModel,MoveGroupChange)",0,1,1,1
"org.jabref.gui.groups.UndoableMoveGroup.getPresentationName()",0,1,1,1
"org.jabref.gui.groups.UndoableMoveGroup.redo()",0,1,1,1
"org.jabref.gui.groups.UndoableMoveGroup.undo()",0,1,1,1
"org.jabref.gui.help.AboutAction.AboutAction()",0,1,1,1
"org.jabref.gui.help.AboutAction.execute()",0,1,1,1
"org.jabref.gui.help.AboutAction.getAboutDialogView()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.AboutDialogView()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.copyVersionToClipboard()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.getViewModel()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.initialize()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.openChangeLog()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.openContributors()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.openDonation()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.openExternalLibrariesWebsite()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.openGithub()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.openJabrefWebsite()",0,1,1,1
"org.jabref.gui.help.AboutDialogView.openLicense()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.AboutDialogViewModel(DialogService,ClipBoardManager,BuildInfo)",2,1,2,2
"org.jabref.gui.help.AboutDialogViewModel.copyVersionToClipboard()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.developmentVersionProperty()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.getDevelopmentVersion()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.getEnvironmentInfo()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.getHeading()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.getLicense()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.getMaintainers()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.getVersionInfo()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.headingProperty()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.isDevelopmentVersionProperty()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.isIsDevelopmentVersion()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.licenseProperty()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.maintainersProperty()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openChangeLog()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openContributors()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openDonation()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openExternalLibrariesWebsite()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openGithub()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openJabrefWebsite()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openLicense()",0,1,1,1
"org.jabref.gui.help.AboutDialogViewModel.openWebsite(String)",1,1,2,2
"org.jabref.gui.help.ErrorConsoleAction.execute()",0,1,1,1
"org.jabref.gui.help.HelpAction.HelpAction(HelpFile)",0,1,1,1
"org.jabref.gui.help.HelpAction.execute()",0,1,1,1
"org.jabref.gui.help.HelpAction.getMainHelpPageCommand()",0,1,1,1
"org.jabref.gui.help.HelpAction.openHelpPage(HelpFile)",0,1,1,1
"org.jabref.gui.help.NewVersionDialog.NewVersionDialog(Version,Version)",3,1,3,3
"org.jabref.gui.help.SearchForUpdateAction.SearchForUpdateAction(BuildInfo,VersionPreferences,DialogService,TaskExecutor)",0,1,1,1
"org.jabref.gui.help.SearchForUpdateAction.execute()",0,1,1,1
"org.jabref.gui.help.VersionWorker.VersionWorker(Version,Version,DialogService,TaskExecutor)",0,1,1,1
"org.jabref.gui.help.VersionWorker.checkForNewVersionAsync()",0,1,1,1
"org.jabref.gui.help.VersionWorker.checkForNewVersionDelayed()",0,1,1,1
"org.jabref.gui.help.VersionWorker.getNewVersion()",0,1,1,1
"org.jabref.gui.help.VersionWorker.showConnectionError(Exception,boolean)",1,1,2,2
"org.jabref.gui.help.VersionWorker.showUpdateInfo(Optional<Version>,boolean)",6,1,5,5
"org.jabref.gui.icon.IconTheme.JabRefIcons.JabRefIcons(Color,Ikon...)",0,1,1,1
"org.jabref.gui.icon.IconTheme.JabRefIcons.JabRefIcons(Ikon...)",0,1,1,1
"org.jabref.gui.icon.IconTheme.JabRefIcons.asButton()",0,1,1,1
"org.jabref.gui.icon.IconTheme.JabRefIcons.asToggleButton()",0,1,1,1
"org.jabref.gui.icon.IconTheme.JabRefIcons.disabled()",0,1,1,1
"org.jabref.gui.icon.IconTheme.JabRefIcons.getGraphicNode()",0,1,1,1
"org.jabref.gui.icon.IconTheme.JabRefIcons.getIkon()",0,1,1,1
"org.jabref.gui.icon.IconTheme.JabRefIcons.withColor(Color)",0,1,1,1
"org.jabref.gui.icon.IconTheme.findIcon(String,Color)",1,1,2,2
"org.jabref.gui.icon.IconTheme.getDefaultGroupColor()",0,1,1,1
"org.jabref.gui.icon.IconTheme.getIconUrl(String)",1,1,2,2
"org.jabref.gui.icon.IconTheme.getImageFX(String)",0,1,1,1
"org.jabref.gui.icon.IconTheme.getJabRefImage()",0,1,1,1
"org.jabref.gui.icon.IconTheme.getLogoSetFX()",0,1,1,1
"org.jabref.gui.icon.IconTheme.loadAllIkons()",1,1,2,2
"org.jabref.gui.icon.IconTheme.readIconThemeFile(URL,String)",4,3,3,4
"org.jabref.gui.icon.InternalMaterialDesignIcon.InternalMaterialDesignIcon(Color,Ikon...)",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.InternalMaterialDesignIcon(Color,List<Ikon>)",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.InternalMaterialDesignIcon(Ikon...)",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.InternalMaterialDesignIcon(List<Ikon>)",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.disabled()",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.getCode()",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.getGraphicNode()",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.getIkon()",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.name()",0,1,1,1
"org.jabref.gui.icon.InternalMaterialDesignIcon.withColor(Color)",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.JabRefIconView()",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.JabRefIconView(JabRefIcons)",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.JabRefIconView(JabRefIcons,int)",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.getDefaultGlyph()",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.getGlyph()",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.getGlyphSize()",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.glyphProperty()",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.glyphSizeProperty()",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.setGlyph(JabRefIcons)",0,1,1,1
"org.jabref.gui.icon.JabRefIconView.setGlyphSize(Number)",0,1,1,1
"org.jabref.gui.icon.JabRefIkonHandler.getFontFamily()",0,1,1,1
"org.jabref.gui.icon.JabRefIkonHandler.getFontResource()",0,1,1,1
"org.jabref.gui.icon.JabRefIkonHandler.getFontResourceAsStream()",0,1,1,1
"org.jabref.gui.icon.JabRefIkonHandler.resolve(String)",0,1,1,1
"org.jabref.gui.icon.JabRefIkonHandler.supports(String)",1,1,2,2
"org.jabref.gui.icon.JabRefMaterialDesignIcon.JabRefMaterialDesignIcon(String,int)",0,1,1,1
"org.jabref.gui.icon.JabRefMaterialDesignIcon.findByDescription(String)",3,3,2,3
"org.jabref.gui.icon.JabRefMaterialDesignIcon.getCode()",0,1,1,1
"org.jabref.gui.icon.JabRefMaterialDesignIcon.getDescription()",0,1,1,1
"org.jabref.gui.icon.JabrefIconProvider.getIkon()",0,1,1,1
"org.jabref.gui.importer.GenerateEntryFromIdAction.GenerateEntryFromIdAction(LibraryTab,DialogService,PreferencesService,TaskExecutor,PopOver,String,StateManager)",0,1,1,1
"org.jabref.gui.importer.GenerateEntryFromIdAction.execute()",2,1,2,2
"org.jabref.gui.importer.GenerateEntryFromIdAction.searchAndImportEntryInBackground()",10,4,5,5
"org.jabref.gui.importer.GenerateEntryFromIdDialog.GenerateEntryFromIdDialog(LibraryTab,DialogService,PreferencesService,TaskExecutor,StateManager)",0,1,1,1
"org.jabref.gui.importer.GenerateEntryFromIdDialog.generateEntry()",1,2,2,2
"org.jabref.gui.importer.GenerateEntryFromIdDialog.getDialogPane()",0,1,1,1
"org.jabref.gui.importer.GenerateEntryFromIdDialog.setEntryFromIdPopOver(PopOver)",0,1,1,1
"org.jabref.gui.importer.GrobidOptInDialogHelper.showAndWaitIfUserIsUndecided(DialogService,ImporterPreferences)",2,3,1,3
"org.jabref.gui.importer.ImportAction.ImportAction(JabRefFrame,boolean,Importer,PreferencesService)",0,1,1,1
"org.jabref.gui.importer.ImportAction.automatedImport(List<String>)",8,3,4,4
"org.jabref.gui.importer.ImportAction.doImport(List<Path>)",17,1,8,9
"org.jabref.gui.importer.ImportAction.fileIsPdf(Path)",1,1,2,2
"org.jabref.gui.importer.ImportAction.mergeImportResults(List<UnknownFormatImport>)",5,3,3,4
"org.jabref.gui.importer.ImportCommand.ImportCommand(JabRefFrame,boolean,PreferencesService,StateManager)",1,1,2,2
"org.jabref.gui.importer.ImportCommand.doImport(Path,SortedSet<Importer>,ExtensionFilter)",1,2,2,2
"org.jabref.gui.importer.ImportCommand.execute()",0,1,1,1
"org.jabref.gui.importer.ImportCustomEntryTypesDialog.ImportCustomEntryTypesDialog(BibDatabaseMode,List<BibEntryType>)",2,1,2,2
"org.jabref.gui.importer.ImportCustomEntryTypesDialog.initialize()",3,1,2,2
"org.jabref.gui.importer.ImportCustomEntryTypesDialogViewModel.ImportCustomEntryTypesDialogViewModel(BibDatabaseMode,List<BibEntryType>,PreferencesService)",7,1,4,4
"org.jabref.gui.importer.ImportCustomEntryTypesDialogViewModel.differentCustomizations()",0,1,1,1
"org.jabref.gui.importer.ImportCustomEntryTypesDialogViewModel.importBibEntryTypes(List<BibEntryType>,List<BibEntryType>)",2,1,3,3
"org.jabref.gui.importer.ImportCustomEntryTypesDialogViewModel.newTypes()",0,1,1,1
"org.jabref.gui.importer.ImportEntriesDialog.ImportEntriesDialog(BibDatabaseContext,BackgroundTask<ParserResult>)",3,1,2,2
"org.jabref.gui.importer.ImportEntriesDialog.getEntryNode(BibEntry)",0,1,1,1
"org.jabref.gui.importer.ImportEntriesDialog.getIcon(EntryType)",2,3,2,3
"org.jabref.gui.importer.ImportEntriesDialog.initialize()",9,1,4,4
"org.jabref.gui.importer.ImportEntriesDialog.selectAllEntries()",0,1,1,1
"org.jabref.gui.importer.ImportEntriesDialog.selectAllNewEntries()",3,1,3,3
"org.jabref.gui.importer.ImportEntriesDialog.unselectAll()",0,1,1,1
"org.jabref.gui.importer.ImportEntriesViewModel.ImportEntriesViewModel(BackgroundTask<ParserResult>,TaskExecutor,BibDatabaseContext,DialogService,UndoManager,PreferencesService,StateManager,BibEntryTypesManager,FileUpdateMonitor)",0,1,1,1
"org.jabref.gui.importer.ImportEntriesViewModel.buildImportHandlerThenImportEntries(List<BibEntry>)",0,1,1,1
"org.jabref.gui.importer.ImportEntriesViewModel.findInternalDuplicate(BibEntry)",5,4,3,4
"org.jabref.gui.importer.ImportEntriesViewModel.getEntries()",0,1,1,1
"org.jabref.gui.importer.ImportEntriesViewModel.getMessage()",0,1,1,1
"org.jabref.gui.importer.ImportEntriesViewModel.hasDuplicate(BibEntry)",1,1,2,2
"org.jabref.gui.importer.ImportEntriesViewModel.importEntries(List<BibEntry>,boolean)",14,1,6,6
"org.jabref.gui.importer.ImportEntriesViewModel.messageProperty()",0,1,1,1
"org.jabref.gui.importer.ImportEntriesViewModel.resolveDuplicate(BibEntry)",12,2,11,11
"org.jabref.gui.importer.ImporterViewModel.ImporterViewModel(CustomImporter)",0,1,1,1
"org.jabref.gui.importer.ImporterViewModel.basePath()",0,1,1,1
"org.jabref.gui.importer.ImporterViewModel.className()",0,1,1,1
"org.jabref.gui.importer.ImporterViewModel.getLogic()",0,1,1,1
"org.jabref.gui.importer.ImporterViewModel.name()",0,1,1,1
"org.jabref.gui.importer.NewDatabaseAction.NewDatabaseAction(JabRefFrame,PreferencesService)",0,1,1,1
"org.jabref.gui.importer.NewDatabaseAction.execute()",0,1,1,1
"org.jabref.gui.importer.NewEntryAction.NewEntryAction(JabRefFrame,DialogService,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.importer.NewEntryAction.NewEntryAction(JabRefFrame,EntryType,DialogService,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.importer.NewEntryAction.execute()",5,4,3,4
"org.jabref.gui.importer.NewEntryAction.trackNewEntry(EntryType)",0,1,1,1
"org.jabref.gui.importer.NewEntryActionTest.setUp()",0,1,1,1
"org.jabref.gui.importer.NewEntryActionTest.testExecuteIfNoBasePanel()",0,1,1,1
"org.jabref.gui.importer.NewEntryActionTest.testExecuteOnSuccessWithFixedType()",0,1,1,1
"org.jabref.gui.importer.ParserResultWarningDialog.ParserResultWarningDialog()",0,1,1,1
"org.jabref.gui.importer.ParserResultWarningDialog.showParserResultWarningDialog(ParserResult,JabRefFrame)",0,1,1,1
"org.jabref.gui.importer.ParserResultWarningDialog.showParserResultWarningDialog(ParserResult,JabRefFrame,int)",6,2,5,6
"org.jabref.gui.importer.actions.CheckForNewEntryTypesAction.getBibDatabaseModeFromParserResult(ParserResult)",0,1,1,1
"org.jabref.gui.importer.actions.CheckForNewEntryTypesAction.getListOfUnknownAndUnequalCustomizations(ParserResult)",0,1,1,1
"org.jabref.gui.importer.actions.CheckForNewEntryTypesAction.isActionNecessary(ParserResult)",0,1,1,1
"org.jabref.gui.importer.actions.CheckForNewEntryTypesAction.performAction(LibraryTab,ParserResult)",0,1,1,1
"org.jabref.gui.importer.actions.MergeReviewIntoCommentAction.isActionNecessary(ParserResult)",0,1,1,1
"org.jabref.gui.importer.actions.MergeReviewIntoCommentAction.performAction(LibraryTab,ParserResult)",2,1,3,3
"org.jabref.gui.importer.actions.MergeReviewIntoCommentConfirmationDialog.MergeReviewIntoCommentConfirmationDialog(DialogService)",0,1,1,1
"org.jabref.gui.importer.actions.MergeReviewIntoCommentConfirmationDialog.askUserForMerge(List<BibEntry>)",0,1,1,1
"org.jabref.gui.importer.actions.OpenDatabaseAction.OpenDatabaseAction(JabRefFrame,PreferencesService,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.importer.actions.OpenDatabaseAction.execute()",0,1,1,1
"org.jabref.gui.importer.actions.OpenDatabaseAction.getInitialDirectory()",2,2,2,2
"org.jabref.gui.importer.actions.OpenDatabaseAction.loadDatabase(Path)",5,2,5,5
"org.jabref.gui.importer.actions.OpenDatabaseAction.openFile(Path,boolean)",0,1,1,1
"org.jabref.gui.importer.actions.OpenDatabaseAction.openFiles(List<Path>,boolean)",17,4,9,10
"org.jabref.gui.importer.actions.OpenDatabaseAction.openTheFile(Path,boolean)",1,2,1,2
"org.jabref.gui.importer.actions.OpenDatabaseAction.performPostOpenActions(LibraryTab,ParserResult)",3,1,3,3
"org.jabref.gui.importer.actions.OpenDatabaseAction.trackOpenNewDatabase(LibraryTab)",0,1,1,1
"org.jabref.gui.importer.fetcher.LookupIdentifierAction.LookupIdentifierAction(JabRefFrame,IdFetcher<T>,StateManager,UndoManager)",0,1,1,1
"org.jabref.gui.importer.fetcher.LookupIdentifierAction.execute()",1,1,2,2
"org.jabref.gui.importer.fetcher.LookupIdentifierAction.getAction()",0,1,1,1
"org.jabref.gui.importer.fetcher.LookupIdentifierAction.lookupIdentifiers(List<BibEntry>)",10,1,7,7
"org.jabref.gui.importer.fetcher.WebSearchPane.WebSearchPane(SidePane,PreferencesService,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPane.afterOpening()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPane.beforeClosing()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPane.createContentPane()",10,1,6,6
"org.jabref.gui.importer.fetcher.WebSearchPane.getResizePolicy()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPane.getToggleAction()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPane.getType()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.WebSearchPaneViewModel(PreferencesService,DialogService,StateManager)",13,3,6,7
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.fetchersProperty()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.getFetchers()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.getQuery()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.getSelectedFetcher()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.queryProperty()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.queryValidationStatus()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.search()",2,3,3,3
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel.selectedFetcherProperty()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModelTest.correctQueryValidationStatus()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModelTest.falseQueryValidationStatus()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModelTest.notCorrectQueryValidationStatus()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModelTest.notFalseQueryValidationStatus()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModelTest.queryConsistingOfASingleAndIsNotValid()",0,1,1,1
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModelTest.setUp()",0,1,1,1
"org.jabref.gui.integrity.IntegrityCheckAction.IntegrityCheckAction(JabRefFrame,StateManager,TaskExecutor)",0,1,1,1
"org.jabref.gui.integrity.IntegrityCheckAction.execute()",8,3,3,4
"org.jabref.gui.integrity.IntegrityCheckDialog.IntegrityCheckDialog(List<IntegrityMessage>,LibraryTab)",0,1,1,1
"org.jabref.gui.integrity.IntegrityCheckDialog.clearFilters()",1,1,2,2
"org.jabref.gui.integrity.IntegrityCheckDialog.getViewModel()",0,1,1,1
"org.jabref.gui.integrity.IntegrityCheckDialog.initialize()",36,1,10,10
"org.jabref.gui.integrity.IntegrityCheckDialog.onSelectionChanged(Change<? extends IntegrityMessage>)",1,1,2,2
"org.jabref.gui.integrity.IntegrityCheckDialogViewModel.IntegrityCheckDialogViewModel(List<IntegrityMessage>)",0,1,1,1
"org.jabref.gui.integrity.IntegrityCheckDialogViewModel.getMessages()",0,1,1,1
"org.jabref.gui.journals.AbbreviateAction.AbbreviateAction(StandardActions,JabRefFrame,DialogService,StateManager)",1,1,1,4
"org.jabref.gui.journals.AbbreviateAction.abbreviate(BibDatabaseContext,List<BibEntry>)",3,2,3,3
"org.jabref.gui.journals.AbbreviateAction.execute()",4,1,3,5
"org.jabref.gui.journals.AbbreviateAction.unabbreviate(BibDatabaseContext,List<BibEntry>)",1,2,2,2
"org.jabref.gui.journals.UndoableAbbreviator.UndoableAbbreviator(JournalAbbreviationRepository,AbbreviationType)",0,1,1,1
"org.jabref.gui.journals.UndoableAbbreviator.abbreviate(BibDatabase,BibEntry,Field,CompoundEdit)",4,4,2,5
"org.jabref.gui.journals.UndoableAbbreviator.getAbbreviatedName(Abbreviation)",1,4,4,4
"org.jabref.gui.journals.UndoableUnabbreviator.UndoableUnabbreviator(JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.journals.UndoableUnabbreviator.unabbreviate(BibDatabase,BibEntry,Field,CompoundEdit)",4,4,2,5
"org.jabref.gui.keyboard.CodeAreaKeyBindings.call(CodeArea,KeyEvent,KeyBindingRepository)",2,1,18,18
"org.jabref.gui.keyboard.KeyBinding.KeyBinding(String,String,String,KeyBindingCategory)",0,1,1,1
"org.jabref.gui.keyboard.KeyBinding.getCategory()",0,1,1,1
"org.jabref.gui.keyboard.KeyBinding.getConstant()",0,1,1,1
"org.jabref.gui.keyboard.KeyBinding.getDefaultKeyBinding()",0,1,1,1
"org.jabref.gui.keyboard.KeyBinding.getLocalization()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingCategory.KeyBindingCategory(String)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingCategory.getName()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.KeyBindingRepository()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.KeyBindingRepository(List<String>,List<String>)",7,1,6,6
"org.jabref.gui.keyboard.KeyBindingRepository.KeyBindingRepository(SortedMap<KeyBinding, String>)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.checkKeyCombinationEquality(KeyBinding,KeyEvent)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.checkKeyCombinationEquality(KeyCombination,KeyEvent)",1,2,1,2
"org.jabref.gui.keyboard.KeyBindingRepository.equals(Object)",3,3,2,4
"org.jabref.gui.keyboard.KeyBindingRepository.get(KeyBinding)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.get(String)",3,3,3,3
"org.jabref.gui.keyboard.KeyBindingRepository.getBindNames()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.getBindings()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.getKeyBinding(String)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.getKeyBindings()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.getKeyCombination(KeyBinding)",2,2,3,3
"org.jabref.gui.keyboard.KeyBindingRepository.hashCode()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.mapToKeyBinding(KeyEvent)",3,3,3,3
"org.jabref.gui.keyboard.KeyBindingRepository.put(KeyBinding,String)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.put(String,String)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.resetToDefault()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.resetToDefault(String)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingRepository.size()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.setKeyBindingViewModel(KeyBinding)",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.setUp()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testCloseEntryEditorCloseEntryKeybinding()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testInvalidKeyBindingIsNotSaved()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testKeyBindingCategory()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testRandomNewKeyKeyBindingInRepository()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testSaveNewKeyBindingsToPreferences()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testSaveNewSpecialKeysKeyBindingsToPreferences()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testSetAllKeyBindingsToDefault()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testSetSingleKeyBindingToDefault()",0,1,1,1
"org.jabref.gui.keyboard.KeyBindingsTabModelTest.testSpecialKeysValidKeyBindingIsSaved()",0,1,1,1
"org.jabref.gui.keyboard.TextInputKeyBindings.call(Scene,KeyEvent)",4,1,15,15
"org.jabref.gui.libraryproperties.LibraryPropertiesAction.LibraryPropertiesAction(JabRefFrame,StateManager)",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesAction.execute()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogView.LibraryPropertiesDialogView(LibraryTab)",2,1,2,2
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogView.browseGeneralFileDirectory()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogView.browseLatexFileDirectory()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogView.browseUserSpecificFileDirectory()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogView.initialize()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.LibraryPropertiesDialogViewModel(BibDatabaseContext,DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.browseGeneralDir()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.browseLatexDir()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.browseUserDir()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.cleanupsDisableProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.cleanupsProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.databaseModesProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.encodingDisableProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.encodingsProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.generalFileDirectoryPropertyProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.laTexFileDirectoryProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.libraryProtectedProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.protectDisableProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.saveInOriginalProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.saveInSpecifiedOrderProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.saveInTableOrderProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.selectedDatabaseModeProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.selectedEncodingProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.setValues()",1,1,4,4
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.sortCriteriaProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.sortableFieldsProperty()",0,1,1,1
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.storeSettings()",17,1,9,9
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel.userSpecificFileDirectoryProperty()",0,1,1,1
"org.jabref.gui.linkedfile.AttachFileAction.AttachFileAction(LibraryTab,DialogService,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.linkedfile.AttachFileAction.execute()",2,3,3,3
"org.jabref.gui.linkedfile.LinkedFileEditDialogView.LinkedFileEditDialogView(LinkedFile)",3,2,2,2
"org.jabref.gui.linkedfile.LinkedFileEditDialogView.initialize()",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFileEditDialogView.openBrowseDialog(ActionEvent)",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.LinkedFilesEditDialogViewModel(LinkedFile,BibDatabaseContext,DialogService,PreferencesService,ExternalFileTypes)",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.descriptionProperty()",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.externalFileTypeProperty()",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.getNewLinkedFile()",3,2,3,3
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.linkProperty()",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.openBrowseDialog()",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.relativize(Path)",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.selectedExternalFileTypeProperty()",0,1,1,1
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.setExternalFileTypeByExtension(String)",3,1,3,3
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel.setValues(LinkedFile)",6,1,6,6
"org.jabref.gui.logging.ApplicationInsightsAppender.ApplicationInsightsAppender(String,Filter,boolean,Property[])",0,1,1,1
"org.jabref.gui.logging.ApplicationInsightsAppender.Builder.build()",0,1,1,1
"org.jabref.gui.logging.ApplicationInsightsAppender.append(LogEvent)",2,1,2,2
"org.jabref.gui.logging.ApplicationInsightsAppender.newBuilder()",0,1,1,1
"org.jabref.gui.logging.ApplicationInsightsLogEvent.ApplicationInsightsLogEvent(LogEvent)",0,1,1,1
"org.jabref.gui.logging.ApplicationInsightsLogEvent.getCustomParameters()",4,1,5,5
"org.jabref.gui.logging.ApplicationInsightsLogEvent.getException()",3,1,2,3
"org.jabref.gui.logging.ApplicationInsightsLogEvent.getMessage()",1,1,2,2
"org.jabref.gui.logging.ApplicationInsightsLogEvent.getNormalizedSeverityLevel()",1,6,1,6
"org.jabref.gui.logging.ApplicationInsightsLogEvent.isException()",0,1,1,1
"org.jabref.gui.logging.GuiAppender.Builder.build()",0,1,1,1
"org.jabref.gui.logging.GuiAppender.GuiAppender(String,Filter,boolean,Property[])",0,1,1,1
"org.jabref.gui.logging.GuiAppender.append(LogEvent)",0,1,1,1
"org.jabref.gui.logging.GuiAppender.newBuilder()",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.BibEntryTableViewModel(BibEntry,BibDatabaseContext,ObservableValue<MainTableFieldValueFormatter>)",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.bibDatabaseContextProperty()",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.createLinkedIdentifiersBinding(BibEntry)",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.createMatchedGroupsBinding(BibDatabaseContext,BibEntry)",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.getEntry()",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.getField(Field)",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.getFields(OrFields)",1,2,1,2
"org.jabref.gui.maintable.BibEntryTableViewModel.getLinkedFiles()",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.getLinkedIdentifiers()",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.getMatchedGroups()",0,1,1,1
"org.jabref.gui.maintable.BibEntryTableViewModel.getSpecialField(SpecialField)",2,2,2,2
"org.jabref.gui.maintable.CellFactory.CellFactory(ExternalFileTypes,PreferencesService,UndoManager)",1,1,2,2
"org.jabref.gui.maintable.CellFactory.getTableIcon(Field)",2,2,2,2
"org.jabref.gui.maintable.ColumnPreferences.ColumnPreferences(List<MainTableColumnModel>,List<MainTableColumnModel>)",0,1,1,1
"org.jabref.gui.maintable.ColumnPreferences.getColumnSortOrder()",0,1,1,1
"org.jabref.gui.maintable.ColumnPreferences.getColumns()",0,1,1,1
"org.jabref.gui.maintable.MainTable.MainTable(MainTableDataModel,LibraryTab,BibDatabaseContext,PreferencesService,DialogService,StateManager,ExternalFileTypes,KeyBindingRepository)",5,2,3,4
"org.jabref.gui.maintable.MainTable.addSelectionListener(ListChangeListener<? super BibEntryTableViewModel>)",0,1,1,1
"org.jabref.gui.maintable.MainTable.clearAndSelect(BibEntry)",0,1,1,1
"org.jabref.gui.maintable.MainTable.clearAndSelectFirst()",0,1,1,1
"org.jabref.gui.maintable.MainTable.clearAndSelectLast()",0,1,1,1
"org.jabref.gui.maintable.MainTable.copy()",3,1,3,3
"org.jabref.gui.maintable.MainTable.cut()",0,1,1,1
"org.jabref.gui.maintable.MainTable.findEntry(BibEntry)",0,1,1,1
"org.jabref.gui.maintable.MainTable.getEntryAt(int)",0,1,1,1
"org.jabref.gui.maintable.MainTable.getSelectedEntries()",0,1,1,1
"org.jabref.gui.maintable.MainTable.getTableModel()",0,1,1,1
"org.jabref.gui.maintable.MainTable.handleOnDragDetected(TableRow<BibEntryTableViewModel>,BibEntryTableViewModel,MouseEvent)",1,1,2,2
"org.jabref.gui.maintable.MainTable.handleOnDragDropped(TableRow<BibEntryTableViewModel>,BibEntryTableViewModel,DragEvent)",6,1,7,7
"org.jabref.gui.maintable.MainTable.handleOnDragDroppedTableView(DragEvent)",1,1,2,2
"org.jabref.gui.maintable.MainTable.handleOnDragEntered(TableRow<BibEntryTableViewModel>,BibEntryTableViewModel,MouseDragEvent)",0,1,1,1
"org.jabref.gui.maintable.MainTable.handleOnDragExited(TableRow<BibEntryTableViewModel>,BibEntryTableViewModel,DragEvent)",0,1,1,1
"org.jabref.gui.maintable.MainTable.handleOnDragOver(TableRow<BibEntryTableViewModel>,BibEntryTableViewModel,DragEvent)",1,1,2,2
"org.jabref.gui.maintable.MainTable.handleOnDragOverTableView(DragEvent)",1,1,2,2
"org.jabref.gui.maintable.MainTable.jumpToSearchKey(TableColumn<BibEntryTableViewModel, ?>,KeyEvent)",4,2,3,4
"org.jabref.gui.maintable.MainTable.listen(EntriesAddedEvent)",0,1,1,1
"org.jabref.gui.maintable.MainTable.paste(BibDatabaseMode)",1,1,2,2
"org.jabref.gui.maintable.MainTable.setupKeyBindings(KeyBindingRepository)",11,2,4,10
"org.jabref.gui.maintable.MainTableColumnFactory.MainTableColumnFactory(BibDatabaseContext,PreferencesService,ExternalFileTypes,UndoManager,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.createColumns()",16,1,5,12
"org.jabref.gui.maintable.MainTableColumnFactory.createExtraFileColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.createFieldColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.createFilesColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.createGroupColorRegion(BibEntryTableViewModel,List<AbstractGroup>)",1,2,2,2
"org.jabref.gui.maintable.MainTableColumnFactory.createGroupColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.createIdentifierColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.createIndexColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.createSpecialFieldColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnFactory.setExactWidth(TableColumn<?, ?>,double)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.MainTableColumnModel(Type)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.MainTableColumnModel(Type,String)",2,1,2,2
"org.jabref.gui.maintable.MainTableColumnModel.MainTableColumnModel(Type,String,double)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.Type.Type(String)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.Type.Type(String,String)",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.Type.fromString(String)",3,3,2,3
"org.jabref.gui.maintable.MainTableColumnModel.Type.getDisplayName()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.Type.getName()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.equals(Object)",4,4,2,5
"org.jabref.gui.maintable.MainTableColumnModel.getDisplayName()",4,2,4,4
"org.jabref.gui.maintable.MainTableColumnModel.getName()",2,2,2,2
"org.jabref.gui.maintable.MainTableColumnModel.getQualifier()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.getSortType()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.getType()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.getWidth()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.hashCode()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.nameProperty()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.parse(String)",5,1,1,5
"org.jabref.gui.maintable.MainTableColumnModel.sortTypeProperty()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModel.widthProperty()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModelTest.fullMainTableColumnModelParserRetrievesCorrectQualifier()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModelTest.fullMainTableColumnModelParserRetrievesCorrectType()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModelTest.mainTableColumnModelParserRetrievesCorrectQualifier()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModelTest.mainTableColumnModelParserRetrievesCorrectType()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModelTest.typeOnlyMainTableColumnModelParserRetrievesCorrectQualifier()",0,1,1,1
"org.jabref.gui.maintable.MainTableColumnModelTest.typeOnlyMainTableColumnModelParserRetrievesCorrectType()",0,1,1,1
"org.jabref.gui.maintable.MainTableDataModel.MainTableDataModel(BibDatabaseContext,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.maintable.MainTableDataModel.createGroupMatcher(List<GroupTreeNode>)",4,2,4,5
"org.jabref.gui.maintable.MainTableDataModel.getEntriesFilteredAndSorted()",0,1,1,1
"org.jabref.gui.maintable.MainTableDataModel.isMatched(ObservableList<GroupTreeNode>,Optional<SearchQuery>,BibEntryTableViewModel)",1,1,2,2
"org.jabref.gui.maintable.MainTableDataModel.isMatchedByGroup(ObservableList<GroupTreeNode>,BibEntryTableViewModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableDataModel.isMatchedBySearch(Optional<SearchQuery>,BibEntryTableViewModel)",0,1,1,1
"org.jabref.gui.maintable.MainTableDataModel.refresh()",0,1,1,1
"org.jabref.gui.maintable.MainTableFieldValueFormatter.MainTableFieldValueFormatter(PreferencesService,BibDatabaseContext)",0,1,1,1
"org.jabref.gui.maintable.MainTableFieldValueFormatter.formatFieldWithAuthorValue(String)",5,3,5,8
"org.jabref.gui.maintable.MainTableFieldValueFormatter.formatFieldsValues(OrFields,BibEntry)",11,5,6,6
"org.jabref.gui.maintable.MainTableNameFormatPreferences.MainTableNameFormatPreferences(DisplayStyle,AbbreviationStyle)",0,1,1,1
"org.jabref.gui.maintable.MainTableNameFormatPreferences.getAbbreviationStyle()",0,1,1,1
"org.jabref.gui.maintable.MainTableNameFormatPreferences.getDisplayStyle()",0,1,1,1
"org.jabref.gui.maintable.MainTablePreferences.MainTablePreferences(ColumnPreferences,boolean,boolean)",0,1,1,1
"org.jabref.gui.maintable.MainTablePreferences.getColumnPreferences()",0,1,1,1
"org.jabref.gui.maintable.MainTablePreferences.getExtraFileColumnsEnabled()",0,1,1,1
"org.jabref.gui.maintable.MainTablePreferences.getResizeColumnsToFit()",0,1,1,1
"org.jabref.gui.maintable.OpenExternalFileAction.OpenExternalFileAction(DialogService,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.maintable.OpenExternalFileAction.OpenExternalFileAction(DialogService,StateManager,PreferencesService,BibEntry,LinkedFile)",2,1,2,2
"org.jabref.gui.maintable.OpenExternalFileAction.execute()",17,4,5,6
"org.jabref.gui.maintable.OpenFolderAction.OpenFolderAction(DialogService,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.maintable.OpenFolderAction.OpenFolderAction(DialogService,StateManager,PreferencesService,BibEntry,LinkedFile)",2,1,2,2
"org.jabref.gui.maintable.OpenFolderAction.execute()",3,1,2,2
"org.jabref.gui.maintable.OpenUrlAction.OpenUrlAction(DialogService,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.maintable.OpenUrlAction.execute()",18,2,9,9
"org.jabref.gui.maintable.PersistenceVisualStateTable.PersistenceVisualStateTable(MainTable,PreferencesService)",0,1,1,1
"org.jabref.gui.maintable.PersistenceVisualStateTable.updateColumns()",0,1,1,1
"org.jabref.gui.maintable.PersistenceVisualStateTable.updateSortOrder()",0,1,1,1
"org.jabref.gui.maintable.RightClickMenu.create(BibEntryTableViewModel,KeyBindingRepository,LibraryTab,DialogService,StateManager,PreferencesService,UndoManager,ClipBoardManager)",1,1,2,2
"org.jabref.gui.maintable.RightClickMenu.createCopySubMenu(LibraryTab,ActionFactory,DialogService,StateManager,PreferencesService,ClipBoardManager)",2,1,2,2
"org.jabref.gui.maintable.SearchShortScienceAction.SearchShortScienceAction(DialogService,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.maintable.SearchShortScienceAction.execute()",5,2,3,3
"org.jabref.gui.maintable.SmartConstrainedResizePolicy.call(ResizeFeatures)",2,2,2,2
"org.jabref.gui.maintable.SmartConstrainedResizePolicy.constrainedResize(ResizeFeatures,Boolean,Double,List<? extends TableColumnBase<?, ?>>)",1,1,2,2
"org.jabref.gui.maintable.SmartConstrainedResizePolicy.constrainedResize(ResizeFeatures<?>)",0,1,1,1
"org.jabref.gui.maintable.SmartConstrainedResizePolicy.getContentWidth(TableView<?>)",1,1,1,2
"org.jabref.gui.maintable.SmartConstrainedResizePolicy.initColumnSize(TableView<?>)",10,1,4,5
"org.jabref.gui.maintable.SmartConstrainedResizePolicy.resize(TableColumnBase,double)",1,1,2,2
"org.jabref.gui.maintable.columns.FieldColumn.FieldColumn(MainTableColumnModel)",4,1,4,4
"org.jabref.gui.maintable.columns.FieldColumn.getDisplayName()",0,1,1,1
"org.jabref.gui.maintable.columns.FieldColumn.getFieldValue(BibEntryTableViewModel)",2,2,2,2
"org.jabref.gui.maintable.columns.FileColumn.FileColumn(MainTableColumnModel,BibDatabaseContext,ExternalFileTypes,DialogService,PreferencesService)",4,1,3,3
"org.jabref.gui.maintable.columns.FileColumn.FileColumn(MainTableColumnModel,BibDatabaseContext,ExternalFileTypes,DialogService,PreferencesService,String)",0,1,1,1
"org.jabref.gui.maintable.columns.FileColumn.createFileIcon(List<LinkedFile>)",3,3,3,3
"org.jabref.gui.maintable.columns.FileColumn.createFileMenu(BibEntryTableViewModel,List<LinkedFile>)",2,2,2,3
"org.jabref.gui.maintable.columns.FileColumn.createFileTooltip(List<LinkedFile>)",1,2,2,2
"org.jabref.gui.maintable.columns.FileColumn.setCommonSettings()",0,1,1,1
"org.jabref.gui.maintable.columns.LinkedIdentifierColumn.LinkedIdentifierColumn(MainTableColumnModel,CellFactory,BibDatabaseContext,DialogService,PreferencesService,StateManager)",3,1,2,2
"org.jabref.gui.maintable.columns.LinkedIdentifierColumn.createIdentifierGraphic(Map<Field, String>)",3,3,3,3
"org.jabref.gui.maintable.columns.LinkedIdentifierColumn.createIdentifierMenu(BibEntryTableViewModel,Map<Field, String>)",4,2,2,3
"org.jabref.gui.maintable.columns.LinkedIdentifierColumn.createIdentifierTooltip(Map<Field, String>)",0,1,1,1
"org.jabref.gui.maintable.columns.MainTableColumn.MainTableColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.maintable.columns.MainTableColumn.getDisplayName()",0,1,1,1
"org.jabref.gui.maintable.columns.MainTableColumn.getModel()",0,1,1,1
"org.jabref.gui.maintable.columns.SpecialFieldColumn.SpecialFieldColumn(MainTableColumnModel,PreferencesService,UndoManager)",12,1,5,5
"org.jabref.gui.maintable.columns.SpecialFieldColumn.createSpecialFieldIcon(Optional<SpecialFieldValueViewModel>,SpecialFieldViewModel)",0,1,1,1
"org.jabref.gui.maintable.columns.SpecialFieldColumn.createSpecialFieldMenu(BibEntry,SpecialFieldViewModel)",1,1,2,2
"org.jabref.gui.maintable.columns.SpecialFieldColumn.createSpecialRating(BibEntryTableViewModel,SpecialFieldValueViewModel)",0,1,1,1
"org.jabref.gui.menus.ChangeEntryTypeMenu.ChangeEntryTypeMenu()",0,1,1,1
"org.jabref.gui.menus.ChangeEntryTypeMenu.createMenuItem(EntryType,BibEntry,UndoManager)",1,1,2,2
"org.jabref.gui.menus.ChangeEntryTypeMenu.getChangeEntryTypeMenu(BibEntry,BibDatabaseContext,CountingUndoManager)",0,1,1,1
"org.jabref.gui.menus.ChangeEntryTypeMenu.getChangeEntryTypePopupMenu(BibEntry,BibDatabaseContext,CountingUndoManager)",0,1,1,1
"org.jabref.gui.menus.ChangeEntryTypeMenu.populate(Menu,Collection<BibEntryType>,BibEntry,UndoManager)",0,1,1,1
"org.jabref.gui.menus.ChangeEntryTypeMenu.populate(ObservableList<MenuItem>,Collection<BibEntryType>,BibEntry,UndoManager)",1,1,2,2
"org.jabref.gui.menus.ChangeEntryTypeMenu.populateComplete(ObservableList<MenuItem>,BibEntry,BibDatabaseContext,CountingUndoManager)",2,1,2,2
"org.jabref.gui.menus.ChangeEntryTypeMenu.populateSubMenu(ObservableList<MenuItem>,String,List<BibEntryType>,BibEntry,CountingUndoManager)",1,1,2,2
"org.jabref.gui.menus.FileHistoryMenu.FileHistoryMenu(PreferencesService,DialogService,OpenDatabaseAction)",2,1,2,2
"org.jabref.gui.menus.FileHistoryMenu.addItem(Path,int)",0,1,1,1
"org.jabref.gui.menus.FileHistoryMenu.newFile(Path)",0,1,1,1
"org.jabref.gui.menus.FileHistoryMenu.openFile(Path)",1,2,2,2
"org.jabref.gui.menus.FileHistoryMenu.openFileByKey(KeyEvent)",3,3,2,4
"org.jabref.gui.menus.FileHistoryMenu.setItems()",1,1,2,2
"org.jabref.gui.menus.FileHistoryMenu.storeHistory()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlighting.DiffHighlighting()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlighting.forAdded(String)",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlighting.forChanged(String)",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlighting.forRemoved(String)",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlighting.forUnchanged(String)",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlighting.generateDiffHighlighting(String,String,String)",9,1,4,7
"org.jabref.gui.mergeentries.DiffHighlighting.generateSymmetricHighlighting(String,String,String)",9,1,4,7
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.DiffHighlightingEllipsingTextFlow(String,EasyObservableValue<String>,ObjectProperty<DiffMode>)",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.adjustChildren(Change<? extends Node>)",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.adjustText()",3,2,3,4
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.ellipseString(String)",1,2,1,2
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.ellipseUntilTextFits()",8,4,5,6
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.ellipsisStringProperty()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.fillUntilOverflowing()",14,5,7,7
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.getChildren()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.getEllipsisString()",1,1,2,2
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.getFullText()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.highlightDiff()",5,1,6,6
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.removeUntilTextFits()",4,3,3,4
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow.setEllipsisString(String)",1,1,1,2
"org.jabref.gui.mergeentries.DiffHighlightingTest.assertEquals(List<Text>,List<Text>)",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.generateSymmetricHighlightingMultipleWordsDeleteTextCharacterDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.generateSymmetricHighlightingMultipleWordsDeleteTextWordDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.generateSymmetricHighlightingSingleWordAddTextCharacterDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.generateSymmetricHighlightingSingleWordAddTextWordDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.generateSymmetricHighlightingSingleWordDeleteTextCharacterDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.generateSymmetricHighlightingSingleWordDeleteTextWordDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.testGenerateDiffHighlightingBothNullThrowsNPE()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.testGenerateDiffHighlightingNoDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.testGenerateDiffHighlightingSingleWordAddTextCharacterDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.testGenerateDiffHighlightingSingleWordAddTextWordDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.testGenerateDiffHighlightingSingleWordDeleteTextCharacterDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.testGenerateDiffHighlightingSingleWordDeleteTextWordDiff()",0,1,1,1
"org.jabref.gui.mergeentries.DiffHighlightingTest.testNullSeparatorThrowsNPE()",0,1,1,1
"org.jabref.gui.mergeentries.FetchAndMergeEntry.FetchAndMergeEntry(LibraryTab,TaskExecutor)",0,1,1,1
"org.jabref.gui.mergeentries.FetchAndMergeEntry.fetchAndMerge(BibEntry)",0,1,1,1
"org.jabref.gui.mergeentries.FetchAndMergeEntry.fetchAndMerge(BibEntry,EntryBasedFetcher)",3,1,2,2
"org.jabref.gui.mergeentries.FetchAndMergeEntry.fetchAndMerge(BibEntry,Field)",0,1,1,1
"org.jabref.gui.mergeentries.FetchAndMergeEntry.fetchAndMerge(BibEntry,List<Field>)",13,1,5,5
"org.jabref.gui.mergeentries.FetchAndMergeEntry.showMergeDialog(BibEntry,BibEntry,WebFetcher)",19,1,10,10
"org.jabref.gui.mergeentries.MergeEntries.DiffMode.DiffMode(String)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.DiffMode.getDisplayText()",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.DiffMode.parse(String)",1,1,2,2
"org.jabref.gui.mergeentries.MergeEntries.MergeEntries(BibEntry,BibEntry)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.MergeEntries(BibEntry,BibEntry,DefaultRadioButtonSelectionMode)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.MergeEntries(BibEntry,BibEntry,String,String)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.MergeEntries(BibEntry,BibEntry,String,String,DefaultRadioButtonSelectionMode)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.fillDiffModes()",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.getDisplayText(DiffMode)",1,6,6,6
"org.jabref.gui.mergeentries.MergeEntries.getMergeEntry()",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.initialize()",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.selectAllLeftRadioButtons()",1,1,2,2
"org.jabref.gui.mergeentries.MergeEntries.selectAllRightRadioButtons()",1,1,2,2
"org.jabref.gui.mergeentries.MergeEntries.setLeftHeaderText(String)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.setRightHeaderText(String)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.setupEntryTypeRow(GridPane)",7,1,4,4
"org.jabref.gui.mergeentries.MergeEntries.setupFieldRows(GridPane)",24,1,10,10
"org.jabref.gui.mergeentries.MergeEntries.setupFields()",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntries.setupHeadingRows(GridPane)",5,1,4,4
"org.jabref.gui.mergeentries.MergeEntries.updateFieldValues(Collection<Field>)",13,2,8,13
"org.jabref.gui.mergeentries.MergeEntries.updateMergedEntry()",10,3,7,8
"org.jabref.gui.mergeentries.MergeEntriesAction.MergeEntriesAction(JabRefFrame,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntriesAction.execute()",6,3,3,5
"org.jabref.gui.mergeentries.MergeEntriesDialog.MergeEntriesDialog(BibEntry,BibEntry)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntriesDialog.init()",3,2,2,2
"org.jabref.gui.mergeentries.MergeEntriesDialog.setLeftHeaderText(String)",0,1,1,1
"org.jabref.gui.mergeentries.MergeEntriesDialog.setRightHeaderText(String)",0,1,1,1
"org.jabref.gui.mergeentries.MergeWithFetchedEntryAction.MergeWithFetchedEntryAction(LibraryTab,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.mergeentries.MergeWithFetchedEntryAction.execute()",1,1,2,2
"org.jabref.gui.mergeentries.MultiMergeEntriesView.Cell.Cell(String,Field,int)",9,1,4,4
"org.jabref.gui.mergeentries.MultiMergeEntriesView.Cell.getContent()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesView.FieldRow.FieldRow(Field,int)",5,1,3,3
"org.jabref.gui.mergeentries.MultiMergeEntriesView.FieldRow.addRow(Field)",4,1,3,3
"org.jabref.gui.mergeentries.MultiMergeEntriesView.MultiMergeEntriesView(PreferencesService,TaskExecutor)",12,1,6,6
"org.jabref.gui.mergeentries.MultiMergeEntriesView.addColumn(EntrySource)",6,1,4,4
"org.jabref.gui.mergeentries.MultiMergeEntriesView.addSource(String,BibEntry)",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesView.addSource(String,Supplier<BibEntry>)",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesView.fillDiffModes()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesView.generateEntryHeader(EntrySource,int)",6,1,4,4
"org.jabref.gui.mergeentries.MultiMergeEntriesView.initialize()",2,1,2,2
"org.jabref.gui.mergeentries.MultiMergeEntriesView.isMultilineField(Field)",1,2,1,2
"org.jabref.gui.mergeentries.MultiMergeEntriesView.setupSourceButtonAction(ToggleButton,int)",2,1,2,2
"org.jabref.gui.mergeentries.MultiMergeEntriesView.writeBibEntryToColumn(EntrySource,int)",1,1,2,2
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.EntrySource.EntrySource(String,BibEntry)",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.EntrySource.EntrySource(String,Supplier<BibEntry>,TaskExecutor)",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.EntrySource.entryProperty()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.EntrySource.isLoadingProperty()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.EntrySource.titleProperty()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.addSource(EntrySource)",9,1,4,4
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.entriesProperty()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.failedSuppliersProperty()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.mergedEntryProperty()",0,1,1,1
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.resultConverter(ButtonType)",1,2,1,2
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.updateFields(BibEntry)",4,2,3,4
"org.jabref.gui.metadata.BibtexStringEditorAction.BibtexStringEditorAction(StateManager)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorAction.execute()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogView.BibtexStringEditorDialogView(BibDatabase)",2,1,2,2
"org.jabref.gui.metadata.BibtexStringEditorDialogView.addString()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogView.initialize()",4,1,3,3
"org.jabref.gui.metadata.BibtexStringEditorDialogView.openHelp()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.BibtexStringEditorDialogViewModel(BibDatabase)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.addAllStringsFromDB()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.addNewString()",4,1,2,3
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.convertFromBibTexString(BibtexString)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.fromBibtexStringViewModel(BibtexStringEditorItemModel)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.labelAlreadyExists(String)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.openHelpPage()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.removeString(BibtexStringEditorItemModel)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.save()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.stringsListProperty()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel.validProperty()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.BibtexStringEditorItemModel(String,String)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.combinedValidationValidProperty()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.contentProperty()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.contentValidation()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.labelProperty()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.labelValidation()",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.setContent(String)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.setLabel(String)",0,1,1,1
"org.jabref.gui.metadata.BibtexStringEditorItemModel.validateContent(String)",3,3,3,3
"org.jabref.gui.metadata.BibtexStringEditorItemModel.validateLabel(String)",6,6,6,6
"org.jabref.gui.metadata.PreambleEditor.PreambleEditor(StateManager,UndoManager,DialogService)",0,1,1,1
"org.jabref.gui.metadata.PreambleEditor.execute()",4,1,4,4
"org.jabref.gui.openoffice.AdvancedCiteDialogView.AdvancedCiteDialogView()",2,2,1,2
"org.jabref.gui.openoffice.AdvancedCiteDialogView.initialize()",0,1,1,1
"org.jabref.gui.openoffice.AdvancedCiteDialogViewModel.citeInParProperty()",0,1,1,1
"org.jabref.gui.openoffice.AdvancedCiteDialogViewModel.citeInTextProperty()",0,1,1,1
"org.jabref.gui.openoffice.AdvancedCiteDialogViewModel.pageInfoProperty()",0,1,1,1
"org.jabref.gui.openoffice.BibEntryNotFoundException.BibEntryNotFoundException(String,String)",0,1,1,1
"org.jabref.gui.openoffice.BibEntryNotFoundException.getCitationKey()",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.bootstrap(Path)",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.bootstrap(String[],Path)",13,6,3,10
"org.jabref.gui.openoffice.Bootstrap.cppuhelper_bootstrap(String,String[],ClassLoader)",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.createInitialComponentContext(Hashtable<String, Object>)",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.createInitialComponentContext(Map<String, Object>)",1,1,1,2
"org.jabref.gui.openoffice.Bootstrap.createSimpleServiceManager()",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.defaultBootstrap_InitialComponentContext()",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.defaultBootstrap_InitialComponentContext(String,Hashtable<String, String>)",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.defaultBootstrap_InitialComponentContext(String,Map<String, String>)",13,1,6,7
"org.jabref.gui.openoffice.Bootstrap.getDefaultOptions()",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.insertBasicFactories(XSet,XImplementationLoader)",0,1,1,1
"org.jabref.gui.openoffice.Bootstrap.pipe(InputStream,PrintStream,String)",9,3,4,5
"org.jabref.gui.openoffice.CitationEntryViewModel.CitationEntryViewModel(CitationEntry)",0,1,1,1
"org.jabref.gui.openoffice.CitationEntryViewModel.CitationEntryViewModel(String,String,String)",0,1,1,1
"org.jabref.gui.openoffice.CitationEntryViewModel.citationProperty()",0,1,1,1
"org.jabref.gui.openoffice.CitationEntryViewModel.extraInformationProperty()",0,1,1,1
"org.jabref.gui.openoffice.CitationEntryViewModel.setExtraInfo(String)",0,1,1,1
"org.jabref.gui.openoffice.CitationEntryViewModel.toCitationEntry()",0,1,1,1
"org.jabref.gui.openoffice.ConnectionLostException.ConnectionLostException(String)",0,1,1,1
"org.jabref.gui.openoffice.DetectOpenOfficeInstallation.DetectOpenOfficeInstallation(PreferencesService,DialogService)",0,1,1,1
"org.jabref.gui.openoffice.DetectOpenOfficeInstallation.checkAutoDetectedPaths(OpenOfficePreferences)",3,1,3,4
"org.jabref.gui.openoffice.DetectOpenOfficeInstallation.chooseAmongInstallations(List<Path>)",2,3,3,3
"org.jabref.gui.openoffice.DetectOpenOfficeInstallation.isExecutablePathDefined()",0,1,1,1
"org.jabref.gui.openoffice.DetectOpenOfficeInstallation.selectInstallationPath()",0,1,1,1
"org.jabref.gui.openoffice.DetectOpenOfficeInstallation.setOpenOfficePreferences(Path)",4,2,5,5
"org.jabref.gui.openoffice.ManageCitationsDialogView.ManageCitationsDialogView(OOBibBase)",2,1,2,2
"org.jabref.gui.openoffice.ManageCitationsDialogView.getText(String)",0,1,1,1
"org.jabref.gui.openoffice.ManageCitationsDialogView.initialize()",0,1,1,1
"org.jabref.gui.openoffice.ManageCitationsDialogViewModel.ManageCitationsDialogViewModel(OOBibBase,DialogService)",1,1,2,2
"org.jabref.gui.openoffice.ManageCitationsDialogViewModel.citationsProperty()",0,1,1,1
"org.jabref.gui.openoffice.ManageCitationsDialogViewModel.storeSettings()",4,1,4,4
"org.jabref.gui.openoffice.OOBibBase.ComparableMark.ComparableMark(String,Point)",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.ComparableMark.compareTo(ComparableMark)",2,2,1,2
"org.jabref.gui.openoffice.OOBibBase.ComparableMark.equals(Object)",3,3,4,5
"org.jabref.gui.openoffice.OOBibBase.ComparableMark.getName()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.ComparableMark.hashCode()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.DocumentTitleViewModel.DocumentTitleViewModel(XTextDocument)",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.DocumentTitleViewModel.getXtextDocument()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.DocumentTitleViewModel.toString()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.OOBibBase(Path,boolean,DialogService)",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.clearBibTextSectionContent2()",2,1,2,2
"org.jabref.gui.openoffice.OOBibBase.combineCiteMarkers(List<BibDatabase>,OOBibStyle)",29,8,11,13
"org.jabref.gui.openoffice.OOBibBase.createBibTextSection2(boolean)",2,1,3,3
"org.jabref.gui.openoffice.OOBibBase.findCitedEntries(List<BibDatabase>,List<String>,Map<String, BibDatabase>)",8,4,5,5
"org.jabref.gui.openoffice.OOBibBase.findCitedEntryIndex(String,List<String>)",7,2,3,4
"org.jabref.gui.openoffice.OOBibBase.findCitedKeys()",6,1,4,4
"org.jabref.gui.openoffice.OOBibBase.findPosition(XTextViewCursor,XTextRange)",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.generateDatabase(List<BibDatabase>)",11,4,5,5
"org.jabref.gui.openoffice.OOBibBase.getBookmarkRange(String)",1,2,1,2
"org.jabref.gui.openoffice.OOBibBase.getBookmarks()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.getCitationContext(XNameAccess,String,int,int,boolean)",15,6,8,10
"org.jabref.gui.openoffice.OOBibBase.getCurrentDocumentTitle()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.getCustomProperty(String)",1,2,2,2
"org.jabref.gui.openoffice.OOBibBase.getDocumentTitle(XTextDocument)",4,2,3,3
"org.jabref.gui.openoffice.OOBibBase.getJabRefReferenceMarks(XNameAccess)",6,1,4,4
"org.jabref.gui.openoffice.OOBibBase.getReferenceMarks()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.getSortedEntriesFromSortedRefMarks(List<String>,Map<String, BibDatabase>)",20,1,7,7
"org.jabref.gui.openoffice.OOBibBase.getSortedReferenceMarks(XNameAccess)",5,1,5,5
"org.jabref.gui.openoffice.OOBibBase.getTextDocuments()",3,1,3,3
"org.jabref.gui.openoffice.OOBibBase.getUniqueReferenceMarkName(String,int)",1,1,1,2
"org.jabref.gui.openoffice.OOBibBase.insertBookMark(String,XTextCursor)",1,1,2,2
"org.jabref.gui.openoffice.OOBibBase.insertEntry(List<BibEntry>,BibDatabase,List<BibDatabase>,OOBibStyle,boolean,boolean,String,boolean)",15,2,10,12
"org.jabref.gui.openoffice.OOBibBase.insertFullReferenceAtCursor(XTextCursor,Map<BibEntry, BibDatabase>,OOBibStyle,String)",7,3,4,5
"org.jabref.gui.openoffice.OOBibBase.insertReferenceMark(String,String,XTextCursor,boolean,OOBibStyle)",14,3,8,9
"org.jabref.gui.openoffice.OOBibBase.isConnectedToDocument()",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.italicizeOrBold(XTextCursor,boolean,int,int)",2,1,2,2
"org.jabref.gui.openoffice.OOBibBase.parseRefMarkName(String)",6,1,4,4
"org.jabref.gui.openoffice.OOBibBase.populateBibTextSection(Map<BibEntry, BibDatabase>,OOBibStyle)",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.rebuildBibTextSection(List<BibDatabase>,OOBibStyle)",4,1,3,3
"org.jabref.gui.openoffice.OOBibBase.refreshCiteMarkers(List<BibDatabase>,OOBibStyle)",1,1,2,2
"org.jabref.gui.openoffice.OOBibBase.refreshCiteMarkersInternal(List<BibDatabase>,OOBibStyle)",189,11,53,55
"org.jabref.gui.openoffice.OOBibBase.removeReferenceMark(String)",1,1,2,2
"org.jabref.gui.openoffice.OOBibBase.selectComponent(List<XTextDocument>)",0,1,1,1
"org.jabref.gui.openoffice.OOBibBase.selectDocument()",4,3,3,4
"org.jabref.gui.openoffice.OOBibBase.setCustomProperty(String,String)",2,1,3,3
"org.jabref.gui.openoffice.OOBibBase.simpleBootstrap(Path)",1,1,2,2
"org.jabref.gui.openoffice.OOBibBase.unCombineCiteMarkers(List<BibDatabase>,OOBibStyle)",16,3,7,8
"org.jabref.gui.openoffice.OOBibBase.updateSortedReferenceMarks()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficePanel.OpenOfficePanel(PreferencesService,OpenOfficePreferences,KeyBindingRepository,TaskExecutor,DialogService,StateManager,UndoManager)",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficePanel.checkThatEntriesHaveKeys(List<BibEntry>)",12,5,6,8
"org.jabref.gui.openoffice.OpenOfficePanel.connect()",8,1,5,5
"org.jabref.gui.openoffice.OpenOfficePanel.connectAutomatically()",9,1,5,5
"org.jabref.gui.openoffice.OpenOfficePanel.connectManually()",6,1,3,3
"org.jabref.gui.openoffice.OpenOfficePanel.createBibBase(Path)",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficePanel.createSettingsPopup()",2,1,2,2
"org.jabref.gui.openoffice.OpenOfficePanel.exportEntries()",5,1,5,5
"org.jabref.gui.openoffice.OpenOfficePanel.getBaseList()",4,1,3,3
"org.jabref.gui.openoffice.OpenOfficePanel.getContent()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficePanel.initPanel()",30,1,15,15
"org.jabref.gui.openoffice.OpenOfficePanel.pushEntries(boolean,boolean,boolean)",29,2,14,14
"org.jabref.gui.openoffice.OpenOfficePanel.reportUndefinedCharacterFormat(UndefinedCharacterFormatException)",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficePanel.reportUndefinedParagraphFormat(UndefinedParagraphFormatException)",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficePanel.showConnectionLostErrorMessage()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficeSidePanel.OpenOfficeSidePanel(SidePane,TaskExecutor,PreferencesService,DialogService,StateManager,UndoManager)",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficeSidePanel.afterOpening()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficeSidePanel.beforeClosing()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficeSidePanel.createContentPane()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficeSidePanel.getResizePolicy()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficeSidePanel.getToggleAction()",0,1,1,1
"org.jabref.gui.openoffice.OpenOfficeSidePanel.getType()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogView.StyleSelectDialogView(StyleLoader)",2,2,2,2
"org.jabref.gui.openoffice.StyleSelectDialogView.addStyleFile()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogView.createContextMenu()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogView.initialize()",7,2,4,4
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.StyleSelectDialogViewModel(DialogService,StyleLoader,PreferencesService)",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.addStyleFile()",3,1,2,2
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.deleteStyle()",1,1,2,2
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.editStyle()",1,1,2,2
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.fromOOBibStyle(OOBibStyle)",1,1,2,2
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.getStyleOrDefault(String)",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.loadStyles()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.selectedItemProperty()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.storePrefs()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.stylesProperty()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.toOOBibStyle(StyleSelectItemViewModel)",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectDialogViewModel.viewStyle(StyleSelectItemViewModel)",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.StyleSelectItemViewModel(String,String,String,OOBibStyle)",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.fileProperty()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.getStyle()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.getStylePath()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.iconProperty()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.internalStyleProperty()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.journalsProperty()",0,1,1,1
"org.jabref.gui.openoffice.StyleSelectItemViewModel.nameProperty()",0,1,1,1
"org.jabref.gui.openoffice.UndefinedCharacterFormatException.UndefinedCharacterFormatException(String)",0,1,1,1
"org.jabref.gui.openoffice.UndefinedCharacterFormatException.getFormatName()",0,1,1,1
"org.jabref.gui.preferences.AbstractPreferenceTabView.getBuilder()",0,1,1,1
"org.jabref.gui.preferences.AbstractPreferenceTabView.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.AbstractPreferenceTabView.setValues()",0,1,1,1
"org.jabref.gui.preferences.AbstractPreferenceTabView.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.AbstractPreferenceTabView.validateSettings()",0,1,1,1
"org.jabref.gui.preferences.PreferenceTabViewModel.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.PreferenceTabViewModel.validateSettings()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogView.PreferencesDialogView(JabRefFrame)",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogView.closeDialog()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogView.exportPreferences()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogView.getViewModel()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogView.importPreferences()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogView.initialize()",3,1,2,2
"org.jabref.gui.preferences.PreferencesDialogView.resetPreferences()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogView.savePreferencesAndCloseDialog()",1,1,2,2
"org.jabref.gui.preferences.PreferencesDialogView.showAllPreferences()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogViewModel.PreferencesDialogViewModel(DialogService,PreferencesService,JabRefFrame)",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogViewModel.exportPreferences()",2,1,2,2
"org.jabref.gui.preferences.PreferencesDialogViewModel.getPreferenceTabs()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogViewModel.importPreferences()",2,1,2,2
"org.jabref.gui.preferences.PreferencesDialogViewModel.resetPreferences()",3,1,3,3
"org.jabref.gui.preferences.PreferencesDialogViewModel.setValues()",1,1,2,2
"org.jabref.gui.preferences.PreferencesDialogViewModel.showPreferences()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogViewModel.storeAllSettings()",3,2,3,4
"org.jabref.gui.preferences.PreferencesDialogViewModel.updateAfterPreferenceChanges()",0,1,1,1
"org.jabref.gui.preferences.PreferencesDialogViewModel.validSettings()",3,3,2,3
"org.jabref.gui.preferences.PreferencesFilterDialog.PreferencesFilterDialog(PreferencesFilter)",0,1,1,1
"org.jabref.gui.preferences.PreferencesFilterDialog.initialize()",3,2,2,3
"org.jabref.gui.preferences.PreferencesFilterDialog.updateModel()",2,1,2,2
"org.jabref.gui.preferences.PreferencesSearchHandler.PreferencesSearchHandler(List<PreferencesTab>)",0,1,1,1
"org.jabref.gui.preferences.PreferencesSearchHandler.clearHighlights()",0,1,1,1
"org.jabref.gui.preferences.PreferencesSearchHandler.clearSearch()",0,1,1,1
"org.jabref.gui.preferences.PreferencesSearchHandler.filterTabs(String)",10,2,6,7
"org.jabref.gui.preferences.PreferencesSearchHandler.filteredPreferenceTabsProperty()",0,1,1,1
"org.jabref.gui.preferences.PreferencesSearchHandler.getPrefsTabLabelMap()",3,1,3,3
"org.jabref.gui.preferences.PreferencesSearchHandler.highlightLabel(Labeled)",0,1,1,1
"org.jabref.gui.preferences.PreferencesSearchHandler.labelContainsText(Labeled,String)",0,1,1,1
"org.jabref.gui.preferences.PreferencesSearchHandler.scanLabeledControls(Parent,ArrayListMultimap<PreferencesTab, Labeled>,PreferencesTab)",8,1,4,4
"org.jabref.gui.preferences.ShowPreferencesAction.ShowPreferencesAction(JabRefFrame,TaskExecutor)",0,1,1,1
"org.jabref.gui.preferences.ShowPreferencesAction.execute()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTab.AppearanceTab()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTab.importTheme()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.AppearanceTabViewModel(DialogService,PreferencesService)",2,1,1,2
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.customPathToThemeProperty()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.customPathToThemeValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.customThemeProperty()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.fontOverrideProperty()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.fontSizeProperty()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.fontSizeValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.importCSSFile()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.setValues()",3,1,3,3
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.storeSettings()",9,1,10,10
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.themeDarkProperty()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.themeLightProperty()",0,1,1,1
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel.validateSettings()",3,2,4,4
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTab.CitationKeyPatternTab()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTab.resetAllKeyPatterns()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTab.setValues()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTab.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.CitationKeyPatternTabViewModel(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.defaultKeyPatternProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.generateOnSaveProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.keyPatternRegexProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.keyPatternReplacementProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.letterAlwaysAddProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.letterStartAProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.letterStartBProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.overwriteAllowProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.overwriteWarningProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.patternListProperty()",0,1,1,1
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.setValues()",3,1,3,3
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.storeSettings()",8,1,5,6
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel.unwantedCharactersProperty()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTab.CustomExporterTab()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTab.add()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTab.modify()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTab.remove()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.CustomExporterTabViewModel(PreferencesService,DialogService,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.addExporter()",2,1,3,3
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.exportersProperty()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.modifyExporter()",3,2,3,4
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.removeExporters()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.selectedExportersProperty()",0,1,1,1
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.setValues()",1,1,2,2
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTab.CustomImporterTab()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTab.add()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTab.remove()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.CustomImporterTabViewModel(PreferencesService,DialogService)",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.addImporter()",21,1,10,10
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.importersProperty()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.pathToClass(String,Path)",3,3,2,3
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.removeSelectedImporter()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.selectedImportersProperty()",0,1,1,1
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.setValues()",1,1,2,2
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTab.EntryEditorTab()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.EntryEditorTabViewModel(PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.acceptRecommendationsProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.allowIntegerEditionProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.autoCompleteBothProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.autoCompleteFieldsProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.autoCompleteFirstLastProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.autoCompleteLastFirstProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.defaultSourceProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.enableAutoCompleteProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.enableLatexCitationsTabProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.enableRelatedArticlesTabProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.enableValidationProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.firstNameModeAbbreviatedProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.firstNameModeBothProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.firstNameModeFullProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.openOnNewEntryProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.setValues()",4,1,5,5
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel.storeSettings()",8,1,5,7
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTab.CustomEditorFieldsTab()",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTab.resetToDefaults()",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTabViewModel.CustomEditorFieldsTabViewModel(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTabViewModel.fieldsProperty()",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTabViewModel.resetToDefaults()",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTabViewModel.setFields(Map<String, Set<Field>>)",1,1,2,2
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTabViewModel.storeSettings()",5,4,4,4
"org.jabref.gui.preferences.external.ExternalTab.ExternalTab(PushToApplicationsManager)",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTab.manageExternalFileTypes()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTab.pushToApplicationSettings()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTab.useFileBrowserSpecialCommandBrowse()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTab.useTerminalCommandBrowse()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.ExternalTabViewModel(DialogService,PreferencesService,PushToApplicationsManager)",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.autoOpenAttachedFoldersProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.citeCommandProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.customFileBrowserBrowse()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.customFileBrowserCommandProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.customTerminalBrowse()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.customTerminalCommandProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.eMailReferenceSubjectProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.fileBrowserCommandValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.manageExternalFileTypes()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.pushToApplicationSettings()",2,1,2,2
"org.jabref.gui.preferences.external.ExternalTabViewModel.pushToApplicationsListProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.selectedPushToApplication()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.terminalCommandValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.useCustomFileBrowserProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.useCustomTerminalProperty()",0,1,1,1
"org.jabref.gui.preferences.external.ExternalTabViewModel.validateSettings()",3,2,4,4
"org.jabref.gui.preferences.file.FileTab.FileTab()",0,1,1,1
"org.jabref.gui.preferences.file.FileTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.file.FileTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.FileTabViewModel(PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.alwaysReformatBibProperty()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.autosaveLocalLibrariesProperty()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.noWrapFilesProperty()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.openLastStartupProperty()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.resolveStringsAllProperty()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.resolveStringsBibTexProperty()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.resolveStringsExceptProperty()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.file.FileTabViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTab.GeneralTab()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.GeneralTabViewModel(DialogService,PreferencesService,GeneralPreferences,TelemetryPreferences,OwnerPreferences,TimestampPreferences)",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.addCreationDateProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.addModificationDateProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.biblatexModeListProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.collectTelemetryProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.confirmDeleteProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.encodingsListProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.inspectionWarningDuplicateProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.languagesListProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.markOwnerNameProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.markOwnerOverwriteProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.markOwnerProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.memoryStickModeProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.selectedBiblatexModeProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.selectedEncodingProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.selectedLanguageProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.showAdvancedHintsProperty()",0,1,1,1
"org.jabref.gui.preferences.general.GeneralTabViewModel.storeSettings()",3,1,4,4
"org.jabref.gui.preferences.groups.GroupsTab.GroupsTab()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTabViewModel.GroupsTabViewModel(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTabViewModel.autoAssignGroupProperty()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTabViewModel.displayGroupCount()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTabViewModel.groupViewModeIntersectionProperty()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTabViewModel.groupViewModeUnionProperty()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTabViewModel.keywordSeparatorProperty()",0,1,1,1
"org.jabref.gui.preferences.groups.GroupsTabViewModel.setValues()",1,1,3,3
"org.jabref.gui.preferences.groups.GroupsTabViewModel.storeSettings()",1,1,1,2
"org.jabref.gui.preferences.importexport.ImportExportTab.ImportExportTab()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.ImportExportTabViewModel(PreferencesService,DOIPreferences)",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.generateKeyOnImportProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.grobidEnabledProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.grobidURLProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.saveInOriginalProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.saveInSpecifiedOrderProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.saveInTableOrderProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.setValues()",1,1,4,4
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.sortCriteriaProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.sortableFieldsProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.useCustomDOINameProperty()",0,1,1,1
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel.useCustomDOIProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.AbbreviationViewModel(Abbreviation)",1,1,2,2
"org.jabref.gui.preferences.journals.AbbreviationViewModel.abbreviationProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.containsCaseIndependent(String)",1,1,3,3
"org.jabref.gui.preferences.journals.AbbreviationViewModel.equals(Object)",4,3,3,5
"org.jabref.gui.preferences.journals.AbbreviationViewModel.getAbbreviation()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.getAbbreviationObject()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.getName()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.getShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.hashCode()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.isPseudoAbbreviation()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.isPseudoAbbreviationProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.nameProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.setAbbreviation(String)",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.setName(String)",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.setShortestUniqueAbbreviation(String)",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModel.shortestUniqueAbbreviationProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModelTest.containsCaseIndependentContains(String,AbbreviationViewModel)",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModelTest.containsCaseIndependentDoesNotContain(String,AbbreviationViewModel)",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModelTest.provideContainsCaseIndependentContains()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationViewModelTest.provideContainsCaseIndependentDoesNotContain()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.AbbreviationsFileViewModel(List<AbbreviationViewModel>,String)",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.AbbreviationsFileViewModel(Path)",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.abbreviationsProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.equals(Object)",2,2,2,2
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.exists()",1,1,2,2
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.getAbsolutePath()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.hashCode()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.isBuiltInListProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.readAbbreviations()",2,2,2,2
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.toString()",0,1,1,1
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel.writeOrCreate()",1,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.JournalAbbreviationsTab()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.addAbbreviation()",2,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.addAbbreviationActions()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.addList()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.createFlashingColorStringProperty(ObjectProperty<Color>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.editAbbreviation()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.openList()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.removeList()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.selectNewAbbreviation()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.setAnimations()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.setBindings()",1,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.setColorStringFromColor(StringProperty,ObjectProperty<Color>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab.setUpTable()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.JournalAbbreviationsTabViewModel(PreferencesService,DialogService,TaskExecutor,JournalAbbreviationRepository)",25,1,11,12
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.abbreviationsCountProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.abbreviationsProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.addAbbreviation()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.addAbbreviation(String,String)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.addAbbreviation(String,String,String)",2,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.addBuiltInList()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.addNewFile()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.createFileObjects()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.currentAbbreviationProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.currentFileProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.deleteAbbreviation()",6,1,5,5
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.editAbbreviation(String,String)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.editAbbreviation(String,String,String)",8,1,4,4
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.isAbbreviationEditableAndRemovable()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.isEditableAndRemovableProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.isFileRemovableProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.isLoadingProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.journalFilesProperty()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.openFile()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.openFile(Path)",4,2,4,4
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.removeAbbreviation(AbbreviationViewModel)",1,2,1,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.removeCurrentFile()",3,1,3,3
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.saveJournalAbbreviationFiles()",2,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.selectLastJournalFile()",1,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.setCurrentAbbreviationNameAndAbbreviationIfValid(String,String,String)",2,3,3,3
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel.storeSettings()",2,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.addAbbreviation(Abbreviation)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.addDuplicatedFileResultsInErrorDialog(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.addFileIncreasesCounterOfOpenFilesAndHasNoAbbreviations()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.addFourTestFileToViewModelAndPreferences(List<List<String>>)",1,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.createTestFile(List<String>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.createTestFile(String,String)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.editAbbreviation(Abbreviation)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.provideTestFiles()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.selectLastAbbreviation()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.setUpViewModel(Path)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testAddAbbreviationIncludesAbbreviationsInAbbreviationList(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testAddDuplicatedAbbreviationResultsInException(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testBuiltInListsIncludeAllBuiltInAbbreviations()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testCurrentFilePropertyChangeActiveFile(List<List<String>>)",1,1,2,2
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testEditAbbreviationIncludesNewAbbreviationInAbbreviationsList(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testEditAbbreviationToEmptyAbbreviationResultsInException(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testEditAbbreviationToEmptyNameResultsInException(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testEditAbbreviationToExistingOneResultsInException(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testEditSameAbbreviationWithNoChangeDoesNotResultInException()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testInitialHasNoFilesAndNoAbbreviations()",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testInitialWithSavedFilesIncrementsFilesCounter(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testMixedFileUsage(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testOpenDuplicatedFileResultsInAnException(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testOpenValidFileContainsTheSpecificEntryAndEnoughAbbreviations(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testRemoveDuplicatesWhenReadingFiles(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testRemoveLastListSetsCurrentFileAndCurrentAbbreviationToNull(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testSaveAbbreviationsToFilesCreatesNewFilesWithWrittenAbbreviations(List<List<String>>,List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testSaveExternalFilesListToPreferences(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest.testSelectLastJournalFileSwitchesFilesAndTheirAbbreviations(List<List<String>>)",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.KeyBindingViewModel(KeyBindingRepository,KeyBinding,String)",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.KeyBindingViewModel(KeyBindingRepository,KeyBindingCategory)",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.clear()",1,1,2,2
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.getBinding()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.getChildren()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.getClearIcon()",1,1,2,2
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.getKeyBinding()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.getResetIcon()",1,1,2,2
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.isCategory()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.nameProperty()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.resetToDefault()",1,1,2,2
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.setBinding(String)",1,1,2,2
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.setDisplayName()",1,1,2,2
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.setNewBinding(KeyEvent)",9,4,9,14
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel.shownBindingProperty()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingViewModelTest.resetToDefault()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTab.KeyBindingsTab()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTab.createMenuItem(KeyBindingPreset)",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTab.resetBindings()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.KeyBindingsTabViewModel(KeyBindingRepository,DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.keyBindingPresets()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.loadPreset(KeyBindingPreset)",1,2,1,2
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.resetToDefault()",2,1,2,2
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.rootKeyBindingProperty()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.selectedKeyBindingProperty()",0,1,1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.setNewBindingForCurrent(KeyEvent)",3,3,2,4
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.setValues()",4,1,3,3
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel.storeSettings()",1,1,2,2
"org.jabref.gui.preferences.keybindings.presets.BashKeyBindingPreset.getKeyBindings()",0,1,1,1
"org.jabref.gui.preferences.keybindings.presets.BashKeyBindingPreset.getName()",0,1,1,1
"org.jabref.gui.preferences.keybindings.presets.NewEntryBindingPreset.getKeyBindings()",0,1,1,1
"org.jabref.gui.preferences.keybindings.presets.NewEntryBindingPreset.getName()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTab.LinkedFilesTab()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTab.mainFileDirBrowse()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.LinkedFilesTabViewModel(DialogService,PreferencesService)",3,1,2,3
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.autolinkFileExactBibtexProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.autolinkFileStartsBibtexProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.autolinkRegexKeyProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.autolinkUseRegexProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.defaultFileNamePatternsProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.fileDirectoryPatternProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.fileNamePatternProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.mainFileDirBrowse()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.mainFileDirValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.mainFileDirectoryProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.setValues()",1,1,4,4
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.storeSettings()",3,1,4,4
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.useBibLocationAsPrimaryProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.useMainFileDirectoryProperty()",0,1,1,1
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel.validateSettings()",1,2,2,2
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.NameFormatterItemModel()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.NameFormatterItemModel(String)",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.NameFormatterItemModel(String,String)",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.formatProperty()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.getFormat()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.getName()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.nameProperty()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.setFormat(String)",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.setName(String)",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel.toString()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTab.NameFormatterTab()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTab.addFormatter()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTab.initialize()",6,1,4,4
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.NameFormatterTabViewModel(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.addFormatter()",2,1,3,3
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.addFormatterNameProperty()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.addFormatterStringProperty()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.formatterListProperty()",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.removeFormatter(NameFormatterItemModel)",0,1,1,1
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.setValues()",4,1,3,3
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel.storeSettings()",1,1,2,2
"org.jabref.gui.preferences.network.NetworkTab.NetworkTab()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTab.checkConnection()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTab.proxyPasswordMask(MouseEvent)",1,1,2,2
"org.jabref.gui.preferences.network.NetworkTab.proxyPasswordReveal(MouseEvent)",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.NetworkTabViewModel(DialogService,PreferencesService)",2,1,1,2
"org.jabref.gui.preferences.network.NetworkTabViewModel.checkConnection()",4,1,3,4
"org.jabref.gui.preferences.network.NetworkTabViewModel.getPortAsInt(String)",1,1,2,2
"org.jabref.gui.preferences.network.NetworkTabViewModel.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyHostnameProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyHostnameValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyPasswordProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyPasswordValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyPortProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyPortValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyUseAuthenticationProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyUseProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyUsernameProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.proxyUsernameValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.remotePortProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.remotePortValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.remoteServerProperty()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.setProxyValues()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.storeProxySettings(ProxyPreferences)",1,1,2,2
"org.jabref.gui.preferences.network.NetworkTabViewModel.storeRemoteSettings()",4,1,3,3
"org.jabref.gui.preferences.network.NetworkTabViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.network.NetworkTabViewModel.validateSettings()",5,2,5,5
"org.jabref.gui.preferences.preview.PreviewTab.EditAction.EditAction(StandardActions)",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.EditAction.execute()",3,1,6,6
"org.jabref.gui.preferences.preview.PreviewTab.PreviewTab()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.dragDetectedInAvailable(MouseEvent)",1,1,2,2
"org.jabref.gui.preferences.preview.PreviewTab.dragDetectedInChosen(MouseEvent)",1,1,2,2
"org.jabref.gui.preferences.preview.PreviewTab.dragDropped(ListProperty<PreviewLayout>,DragEvent)",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.dragDroppedInChosenCell(PreviewLayout,DragEvent)",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.dragOver(DragEvent)",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.initialize()",2,1,2,2
"org.jabref.gui.preferences.preview.PreviewTab.jumpToSearchKey(ListView<PreviewLayout>,KeyEvent)",3,2,2,3
"org.jabref.gui.preferences.preview.PreviewTab.resetDefaultButtonAction()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.sortDownButtonAction()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.sortUpButtonAction()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.toLeftButtonAction()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTab.toRightButtonAction()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.PreviewTabViewModel(DialogService,PreferencesService,TaskExecutor,StateManager)",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.addToChosen()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.availableListProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.availableSelectionModelProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.chosenListProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.chosenListValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.chosenSelectionModelProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.computeHighlighting(String)",21,1,7,7
"org.jabref.gui.preferences.preview.PreviewTabViewModel.dragDetected(ListProperty<PreviewLayout>,ObjectProperty<MultipleSelectionModel<PreviewLayout>>,List<PreviewLayout>,Dragboard)",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.dragDropped(ListProperty<PreviewLayout>,Dragboard)",6,1,4,4
"org.jabref.gui.preferences.preview.PreviewTabViewModel.dragDroppedInChosenCell(PreviewLayout,Dragboard)",14,5,6,7
"org.jabref.gui.preferences.preview.PreviewTabViewModel.dragOver(DragEvent)",1,1,2,2
"org.jabref.gui.preferences.preview.PreviewTabViewModel.findLayoutByName(String)",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.getFilteredPreviews()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.getRestartWarnings()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.layoutProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.refreshPreview()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.removeFromChosen()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.resetDefaultLayout()",1,1,2,2
"org.jabref.gui.preferences.preview.PreviewTabViewModel.selectedInChosenDown()",5,2,3,5
"org.jabref.gui.preferences.preview.PreviewTabViewModel.selectedInChosenUp()",5,2,2,5
"org.jabref.gui.preferences.preview.PreviewTabViewModel.selectedIsEditableProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.setFilterPredicate(String)",1,1,2,2
"org.jabref.gui.preferences.preview.PreviewTabViewModel.setPreviewLayout(PreviewLayout)",4,2,4,4
"org.jabref.gui.preferences.preview.PreviewTabViewModel.setValues()",1,1,2,2
"org.jabref.gui.preferences.preview.PreviewTabViewModel.showAsExtraTabProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.sourceTextProperty()",0,1,1,1
"org.jabref.gui.preferences.preview.PreviewTabViewModel.storeSettings()",5,1,6,6
"org.jabref.gui.preferences.preview.PreviewTabViewModel.validateSettings()",3,2,3,3
"org.jabref.gui.preferences.protectedterms.NewProtectedTermsFileDialog.NewProtectedTermsFileDialog(List<ProtectedTermsListItemModel>,DialogService,PreferencesService)",2,1,2,2
"org.jabref.gui.preferences.protectedterms.ProtectedTermsListItemModel.ProtectedTermsListItemModel(ProtectedTermsList)",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsListItemModel.descriptionProperty()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsListItemModel.enabledProperty()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsListItemModel.getTermsList()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsListItemModel.internalProperty()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsListItemModel.locationProperty()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.ContextAction.ContextAction(StandardActions,ProtectedTermsListItemModel)",1,1,2,2
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.ContextAction.execute()",1,1,5,5
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.ProtectedTermsTab()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.addFile()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.createContextMenu(ProtectedTermsListItemModel)",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.createNewFile()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.initialize()",3,2,2,2
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.ProtectedTermsTabViewModel(ProtectedTermsLoader,DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.addFile()",2,1,2,2
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.createNewFile()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.displayContent(ProtectedTermsListItemModel)",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.edit(ProtectedTermsListItemModel)",1,1,2,2
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.reloadList(ProtectedTermsListItemModel)",3,1,3,3
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.removeList(ProtectedTermsListItemModel)",4,1,4,4
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.storeSettings()",12,1,5,5
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel.termsFilesProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.TableTab()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.addColumn()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.initialize()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.setupBindings()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.setupTable()",4,1,3,3
"org.jabref.gui.preferences.table.TableTab.sortColumnDown()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.sortColumnUp()",0,1,1,1
"org.jabref.gui.preferences.table.TableTab.updateToCurrentColumnOrder()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.TableTabViewModel(DialogService,PreferencesService)",6,1,3,3
"org.jabref.gui.preferences.table.TableTabViewModel.abbreviationDisabledProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.abbreviationEnabledProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.abbreviationLastNameOnlyProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.addColumnProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.autoResizeColumnsProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.availableColumnsProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.columnsListProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.columnsListValidationStatus()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.extraFileColumnsEnabledProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.fillColumnList()",1,1,2,2
"org.jabref.gui.preferences.table.TableTabViewModel.insertColumnInList()",2,2,2,3
"org.jabref.gui.preferences.table.TableTabViewModel.insertExtraFileColumns()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.insertSpecialFieldColumns()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.moveColumnDown()",2,2,2,3
"org.jabref.gui.preferences.table.TableTabViewModel.moveColumnUp()",2,2,1,3
"org.jabref.gui.preferences.table.TableTabViewModel.nameAsIsProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.nameFirstLastProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.nameLastFirstProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.namesNatbibProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.removeColumn(MainTableColumnModel)",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.removeExtraFileColumns()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.removeSpecialFieldColumns()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.selectedColumnModelProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.setValues()",4,1,10,10
"org.jabref.gui.preferences.table.TableTabViewModel.specialFieldsEnabledProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.specialFieldsSerializeProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.specialFieldsSyncKeywordsProperty()",0,1,1,1
"org.jabref.gui.preferences.table.TableTabViewModel.storeSettings()",7,1,6,8
"org.jabref.gui.preferences.table.TableTabViewModel.validateSettings()",1,2,2,2
"org.jabref.gui.preferences.xmp.XmpPrivacyTab.XmpPrivacyTab()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTab.addField()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTab.getTabName()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTab.initialize()",4,1,3,3
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.XmpPrivacyTabViewModel(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.addField()",2,2,2,3
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.addFieldNameProperty()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.availableFieldsProperty()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.filterListProperty()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.removeFilter(Field)",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.setValues()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.storeSettings()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.validateSettings()",2,2,3,3
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.xmpFilterEnabledProperty()",0,1,1,1
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel.xmpFilterListValidationStatus()",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.CopyCitationAction(CitationStyleOutputFormat,DialogService,StateManager,ClipBoardManager,PreviewPreferences)",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.execute()",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.generateCitations()",7,3,5,5
"org.jabref.gui.preview.CopyCitationAction.processHtml(List<String>)",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.processPreview(List<String>)",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.processRtf(List<String>)",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.processText(List<String>)",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.processXslFo(List<String>)",0,1,1,1
"org.jabref.gui.preview.CopyCitationAction.setClipBoardContent(List<String>)",4,1,6,6
"org.jabref.gui.preview.CopyCitationActionTest.processHtmlAsHtml()",0,1,1,1
"org.jabref.gui.preview.CopyCitationActionTest.processPreviewHtml()",0,1,1,1
"org.jabref.gui.preview.CopyCitationActionTest.processPreviewText()",0,1,1,1
"org.jabref.gui.preview.CopyCitationActionTest.processRtf()",0,1,1,1
"org.jabref.gui.preview.CopyCitationActionTest.processText()",0,1,1,1
"org.jabref.gui.preview.CopyCitationActionTest.processXslFo()",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.PreviewPanel(BibDatabaseContext,DialogService,ExternalFileTypes,KeyBindingRepository,PreferencesService,StateManager)",13,1,6,6
"org.jabref.gui.preview.PreviewPanel.createKeyBindings()",5,1,2,3
"org.jabref.gui.preview.PreviewPanel.createPopupMenu()",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.cyclePreview(int)",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.nextPreviewStyle()",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.previousPreviewStyle()",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.print()",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.setEntry(BibEntry)",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.updateLayout(PreviewPreferences)",0,1,1,1
"org.jabref.gui.preview.PreviewPanel.updateLayout(PreviewPreferences,boolean)",1,1,2,2
"org.jabref.gui.preview.PreviewPanel.updateLayoutByPreferences(PreferencesService)",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.PreviewViewer(BibDatabaseContext,DialogService,StateManager)",4,2,2,3
"org.jabref.gui.preview.PreviewViewer.copyPreviewToClipBoard()",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.copySelectionToClipBoard()",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.createJavaScriptRegex(Pattern)",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.getSelectionHtmlContent()",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.getSelectionTextContent()",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.highlightSearchPattern()",1,1,2,2
"org.jabref.gui.preview.PreviewViewer.invalidated(Observable)",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.print()",1,2,1,2
"org.jabref.gui.preview.PreviewViewer.setEntry(BibEntry)",3,1,3,3
"org.jabref.gui.preview.PreviewViewer.setLayout(PreviewLayout)",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.setPreviewText(String)",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.setTheme(Theme)",0,1,1,1
"org.jabref.gui.preview.PreviewViewer.update()",2,2,2,3
"org.jabref.gui.push.AbstractPushToApplication.AbstractPushToApplication(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.push.AbstractPushToApplication.getCiteCommand()",0,1,1,1
"org.jabref.gui.push.AbstractPushToApplication.getCommandLine(String)",0,1,1,1
"org.jabref.gui.push.AbstractPushToApplication.getCommandName()",0,1,1,1
"org.jabref.gui.push.AbstractPushToApplication.getSettings(PushToApplication,ObjectProperty<PushToApplicationPreferences>)",0,1,1,1
"org.jabref.gui.push.AbstractPushToApplication.getTooltip()",0,1,1,1
"org.jabref.gui.push.AbstractPushToApplication.operationCompleted()",4,1,4,4
"org.jabref.gui.push.AbstractPushToApplication.pushEntries(BibDatabaseContext,List<BibEntry>,String)",7,4,5,6
"org.jabref.gui.push.AbstractPushToApplication.requiresCitationKeys()",0,1,1,1
"org.jabref.gui.push.PushToApplicationAction.PushToApplicationAction(PushToApplication,StateManager,DialogService)",0,1,1,1
"org.jabref.gui.push.PushToApplicationAction.execute()",6,4,4,4
"org.jabref.gui.push.PushToApplicationAction.getActionInformation()",0,1,1,1
"org.jabref.gui.push.PushToApplicationAction.getKeyString(List<BibEntry>)",7,3,4,5
"org.jabref.gui.push.PushToApplicationAction.pushEntries()",0,1,1,1
"org.jabref.gui.push.PushToApplicationAction.updateApplication(PushToApplication)",0,1,1,1
"org.jabref.gui.push.PushToApplicationSettings.PushToApplicationSettings(PushToApplication,DialogService,PreferencesService,ObjectProperty<PushToApplicationPreferences>)",2,1,2,2
"org.jabref.gui.push.PushToApplicationSettings.getSettingsPane()",0,1,1,1
"org.jabref.gui.push.PushToApplicationSettings.storeSettings()",0,1,1,1
"org.jabref.gui.push.PushToApplicationsManager.PushToApplicationsManager(DialogService,StateManager,PreferencesService)",0,1,1,1
"org.jabref.gui.push.PushToApplicationsManager.getApplicationByName(String)",0,1,1,1
"org.jabref.gui.push.PushToApplicationsManager.getApplications()",0,1,1,1
"org.jabref.gui.push.PushToApplicationsManager.getPushToApplicationAction()",0,1,1,1
"org.jabref.gui.push.PushToApplicationsManager.registerReconfigurable(Object)",0,1,1,1
"org.jabref.gui.push.PushToApplicationsManager.updateApplicationAction(PushToApplication)",3,1,3,3
"org.jabref.gui.push.PushToEmacs.PushToEmacs(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.push.PushToEmacs.getCommandName()",0,1,1,1
"org.jabref.gui.push.PushToEmacs.getDisplayName()",0,1,1,1
"org.jabref.gui.push.PushToEmacs.getIcon()",0,1,1,1
"org.jabref.gui.push.PushToEmacs.getSettings(PushToApplication,ObjectProperty<PushToApplicationPreferences>)",0,1,1,1
"org.jabref.gui.push.PushToEmacs.operationCompleted()",3,1,3,3
"org.jabref.gui.push.PushToEmacs.pushEntries(BibDatabaseContext,List<BibEntry>,String)",13,2,8,9
"org.jabref.gui.push.PushToEmacsSettings.PushToEmacsSettings(PushToApplication,DialogService,PreferencesService,ObjectProperty<PushToApplicationPreferences>)",0,1,1,1
"org.jabref.gui.push.PushToEmacsSettings.storeSettings()",0,1,1,1
"org.jabref.gui.push.PushToLyx.PushToLyx(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.push.PushToLyx.getDisplayName()",0,1,1,1
"org.jabref.gui.push.PushToLyx.getIcon()",0,1,1,1
"org.jabref.gui.push.PushToLyx.getSettings(PushToApplication,ObjectProperty<PushToApplicationPreferences>)",0,1,1,1
"org.jabref.gui.push.PushToLyx.operationCompleted()",3,1,3,3
"org.jabref.gui.push.PushToLyx.pushEntries(BibDatabaseContext,List<BibEntry>,String)",10,4,6,9
"org.jabref.gui.push.PushToLyxSettings.PushToLyxSettings(PushToApplication,DialogService,PreferencesService,ObjectProperty<PushToApplicationPreferences>)",0,1,1,1
"org.jabref.gui.push.PushToTeXstudio.PushToTeXstudio(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.push.PushToTeXstudio.getCommandLine(String)",0,1,1,1
"org.jabref.gui.push.PushToTeXstudio.getDisplayName()",0,1,1,1
"org.jabref.gui.push.PushToTeXstudio.getIcon()",0,1,1,1
"org.jabref.gui.push.PushToTexmaker.PushToTexmaker(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.push.PushToTexmaker.getCommandLine(String)",0,1,1,1
"org.jabref.gui.push.PushToTexmaker.getDisplayName()",0,1,1,1
"org.jabref.gui.push.PushToTexmaker.getIcon()",0,1,1,1
"org.jabref.gui.push.PushToVim.PushToVim(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.push.PushToVim.getDisplayName()",0,1,1,1
"org.jabref.gui.push.PushToVim.getIcon()",0,1,1,1
"org.jabref.gui.push.PushToVim.getSettings(PushToApplication,ObjectProperty<PushToApplicationPreferences>)",0,1,1,1
"org.jabref.gui.push.PushToVim.operationCompleted()",3,1,3,3
"org.jabref.gui.push.PushToVim.pushEntries(BibDatabaseContext,List<BibEntry>,String)",11,2,7,8
"org.jabref.gui.push.PushToVimSettings.PushToVimSettings(PushToApplication,DialogService,PreferencesService,ObjectProperty<PushToApplicationPreferences>)",0,1,1,1
"org.jabref.gui.push.PushToVimSettings.storeSettings()",0,1,1,1
"org.jabref.gui.push.PushToWinEdt.PushToWinEdt(DialogService,PreferencesService)",0,1,1,1
"org.jabref.gui.push.PushToWinEdt.getCommandLine(String)",0,1,1,1
"org.jabref.gui.push.PushToWinEdt.getDisplayName()",0,1,1,1
"org.jabref.gui.push.PushToWinEdt.getIcon()",0,1,1,1
"org.jabref.gui.remote.JabRefMessageHandler.handleCommandLineArguments(String[],PreferencesService)",2,1,3,3
"org.jabref.gui.search.ContainsAndRegexBasedSearchRuleDescriberTest.onStart(Stage)",0,1,1,1
"org.jabref.gui.search.ContainsAndRegexBasedSearchRuleDescriberTest.testNoAst()",0,1,1,1
"org.jabref.gui.search.ContainsAndRegexBasedSearchRuleDescriberTest.testNoAstCaseSensitive()",0,1,1,1
"org.jabref.gui.search.ContainsAndRegexBasedSearchRuleDescriberTest.testNoAstRegex()",0,1,1,1
"org.jabref.gui.search.ContainsAndRegexBasedSearchRuleDescriberTest.testNoAstRegexCaseSensitive()",0,1,1,1
"org.jabref.gui.search.ContainsAndRegexBasedSearchRuleDescriberTest.testSimpleTerm()",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.GlobalSearchBar(JabRefFrame,StateManager,PreferencesService,CountingUndoManager)",6,1,4,4
"org.jabref.gui.search.GlobalSearchBar.SearchPopupSkin.SearchPopupSkin(AutoCompletePopup<T>)",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.SearchPopupSkin.dispose()",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.SearchPopupSkin.getNode()",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.SearchPopupSkin.getSkinnable()",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.SearchPopupSkin.onSuggestionChosen(T)",1,1,2,2
"org.jabref.gui.search.GlobalSearchBar.SearchPopupSkin.registerEventListener()",7,1,3,5
"org.jabref.gui.search.GlobalSearchBar.focus()",1,1,2,2
"org.jabref.gui.search.GlobalSearchBar.getPopup(AutoCompletionBinding<T>)",1,1,2,2
"org.jabref.gui.search.GlobalSearchBar.informUserAboutInvalidSearchQuery()",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.initSearchModifierButton(ButtonBase)",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.initSearchModifierButtons()",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.performSearch()",3,4,4,4
"org.jabref.gui.search.GlobalSearchBar.setAutoCompleter(SuggestionProvider<Author>)",1,1,2,2
"org.jabref.gui.search.GlobalSearchBar.setSearchFieldHintTooltip(TextFlow)",4,1,3,3
"org.jabref.gui.search.GlobalSearchBar.setSearchTerm(String)",1,2,1,2
"org.jabref.gui.search.GlobalSearchBar.updateHintVisibility()",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.updateResults(int,TextFlow,boolean)",4,1,2,3
"org.jabref.gui.search.GlobalSearchBar.updateSearchResultsForQuery(SearchQuery)",0,1,1,1
"org.jabref.gui.search.GlobalSearchBar.validRegex()",1,1,2,2
"org.jabref.gui.search.GlobalSearchResultDialog.GlobalSearchResultDialog(ExternalFileTypes,UndoManager)",0,1,1,1
"org.jabref.gui.search.GlobalSearchResultDialog.initialize()",5,1,3,3
"org.jabref.gui.search.GlobalSearchResultDialogViewModel.GlobalSearchResultDialogViewModel(PreferencesService)",0,1,1,1
"org.jabref.gui.search.GlobalSearchResultDialogViewModel.getSearchDatabaseContext()",0,1,1,1
"org.jabref.gui.search.GlobalSearchResultDialogViewModel.keepOnTop()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.createDescription(String,EnumSet<SearchFlags>)",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.onStart(Stage)",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testComplexQuery()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testComplexQueryCaseSensitive()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testComplexQueryCaseSensitiveRegex()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testComplexQueryRegex()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testSimpleQuery()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testSimpleQueryCaseSensitive()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testSimpleQueryCaseSensitiveRegex()",0,1,1,1
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest.testSimpleQueryRegex()",0,1,1,1
"org.jabref.gui.search.RebuildFulltextSearchIndexAction.RebuildFulltextSearchIndexAction(StateManager,GetCurrentLibraryTab,DialogService,FilePreferences)",0,1,1,1
"org.jabref.gui.search.RebuildFulltextSearchIndexAction.execute()",0,1,1,1
"org.jabref.gui.search.RebuildFulltextSearchIndexAction.init()",2,3,1,3
"org.jabref.gui.search.RebuildFulltextSearchIndexAction.rebuildIndex()",3,2,3,4
"org.jabref.gui.search.SearchDisplayMode.SearchDisplayMode(Supplier<String>,Supplier<String>)",0,1,1,1
"org.jabref.gui.search.SearchDisplayMode.getDisplayName()",0,1,1,1
"org.jabref.gui.search.SearchDisplayMode.getToolTipText()",0,1,1,1
"org.jabref.gui.search.SearchResultsTable.SearchResultsTable(SearchResultsTableDataModel,BibDatabaseContext,PreferencesService,UndoManager,DialogService,StateManager,ExternalFileTypes)",1,1,2,2
"org.jabref.gui.search.SearchResultsTableDataModel.SearchResultsTableDataModel(BibDatabaseContext,PreferencesService,StateManager)",1,1,2,2
"org.jabref.gui.search.SearchResultsTableDataModel.getEntriesFilteredAndSorted()",0,1,1,1
"org.jabref.gui.search.SearchResultsTableDataModel.isMatchedBySearch(Optional<SearchQuery>,BibEntryTableViewModel)",0,1,1,1
"org.jabref.gui.search.SearchResultsTableDataModel.refresh()",0,1,1,1
"org.jabref.gui.search.SearchTextField.create()",0,1,1,1
"org.jabref.gui.search.TextFlowEqualityHelper.assertEquals(List<Text>,TextFlow)",4,4,4,4
"org.jabref.gui.search.TextFlowEqualityHelper.checkIfTextsEqualsExpectedTexts(List<Text>,List<Text>)",4,4,2,4
"org.jabref.gui.search.rules.describer.ContainsAndRegexBasedSearchRuleDescriber.ContainsAndRegexBasedSearchRuleDescriber(EnumSet<SearchFlags>,String)",0,1,1,1
"org.jabref.gui.search.rules.describer.ContainsAndRegexBasedSearchRuleDescriber.getCaseSensitiveDescription()",2,2,2,2
"org.jabref.gui.search.rules.describer.ContainsAndRegexBasedSearchRuleDescriber.getDescription()",5,1,5,5
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.DescriptionSearchBaseVisitor.visitBinaryExpression(BinaryExpressionContext)",2,1,2,2
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.DescriptionSearchBaseVisitor.visitComparison(ComparisonContext)",15,5,9,9
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.DescriptionSearchBaseVisitor.visitParenExpression(ParenExpressionContext)",0,1,1,1
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.DescriptionSearchBaseVisitor.visitStart(StartContext)",0,1,1,1
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.DescriptionSearchBaseVisitor.visitUnaryExpression(UnaryExpressionContext)",0,1,1,1
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.GrammarBasedSearchRuleDescriber(EnumSet<SearchFlags>,ParseTree)",0,1,1,1
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.getDescription()",1,1,2,2
"org.jabref.gui.search.rules.describer.SearchDescribers.SearchDescribers()",0,1,1,1
"org.jabref.gui.search.rules.describer.SearchDescribers.getSearchDescriberFor(SearchQuery)",4,4,4,4
"org.jabref.gui.shared.ConnectToSharedDatabaseCommand.ConnectToSharedDatabaseCommand(JabRefFrame)",0,1,1,1
"org.jabref.gui.shared.ConnectToSharedDatabaseCommand.execute()",0,1,1,1
"org.jabref.gui.shared.PullChangesFromSharedAction.PullChangesFromSharedAction(StateManager)",0,1,1,1
"org.jabref.gui.shared.PullChangesFromSharedAction.execute()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogView.SharedDatabaseLoginDialogView(JabRefFrame)",2,1,2,2
"org.jabref.gui.shared.SharedDatabaseLoginDialogView.initialize()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogView.openDatabase()",1,1,2,2
"org.jabref.gui.shared.SharedDatabaseLoginDialogView.showOpenKeystoreFileDialog(ActionEvent)",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogView.showSaveDbToFileDialog(ActionEvent)",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.SharedDatabaseLoginDialogViewModel(JabRefFrame,DialogService)",1,1,2,2
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.applyPreferences()",5,1,5,5
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.autosaveProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.databaseproperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.dbValidation()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.folderProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.folderValidation()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.formValidation()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.hostProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.hostValidation()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.isSharedDatabaseAlreadyPresent(DBMSConnectionProperties)",1,1,2,2
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.keyStorePasswordProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.keyStoreProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.keystoreValidation()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.loadingProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.openDatabase()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.openSharedDatabase(DBMSConnectionProperties)",13,5,9,10
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.passwordProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.portProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.portValidation()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.rememberPasswordProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.selectedDbmstypeProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.serverTimezoneProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.setPreferences()",4,1,3,3
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.setupKeyStore()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.showOpenKeystoreFileDialog()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.showSaveDbToFileDialog()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.useSSLProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.userProperty()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel.userValidation()",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseUIManager.SharedDatabaseUIManager(JabRefFrame)",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseUIManager.listen(ConnectionLostEvent)",5,1,4,4
"org.jabref.gui.shared.SharedDatabaseUIManager.listen(SharedEntriesNotPresentEvent)",2,1,3,3
"org.jabref.gui.shared.SharedDatabaseUIManager.listen(UpdateRefusedEvent)",2,1,3,3
"org.jabref.gui.shared.SharedDatabaseUIManager.openNewSharedDatabaseTab(DBMSConnectionProperties)",0,1,1,1
"org.jabref.gui.shared.SharedDatabaseUIManager.openSharedDatabaseFromParserResult(ParserResult)",1,2,1,2
"org.jabref.gui.sidepane.SidePane.PreferredIndexSort.PreferredIndexSort(PreferencesService)",0,1,1,1
"org.jabref.gui.sidepane.SidePane.PreferredIndexSort.compare(SidePaneComponent,SidePaneComponent)",0,1,1,1
"org.jabref.gui.sidepane.SidePane.SidePane(PreferencesService,TaskExecutor,DialogService,StateManager,UndoManager)",0,1,1,1
"org.jabref.gui.sidepane.SidePane.getComponent(SidePaneType)",3,1,2,5
"org.jabref.gui.sidepane.SidePane.hide(SidePaneType)",1,1,2,2
"org.jabref.gui.sidepane.SidePane.isComponentVisible(SidePaneType)",0,1,1,1
"org.jabref.gui.sidepane.SidePane.moveDown(SidePaneComponent)",3,1,3,3
"org.jabref.gui.sidepane.SidePane.moveUp(SidePaneComponent)",3,1,3,3
"org.jabref.gui.sidepane.SidePane.setComponents(Collection<SidePaneComponent>)",1,1,2,2
"org.jabref.gui.sidepane.SidePane.show(SidePaneType)",1,1,2,2
"org.jabref.gui.sidepane.SidePane.toggle(SidePaneType)",2,1,2,2
"org.jabref.gui.sidepane.SidePane.updatePreferredPositions()",1,1,2,2
"org.jabref.gui.sidepane.SidePane.updateView()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.SidePaneComponent(SidePane,JabRefIcon,String)",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.ToggleCommand.ToggleCommand(SidePaneComponent)",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.ToggleCommand.execute()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.afterOpening()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.beforeClosing()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.getAdditionalHeaderButtons()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.getContentPane()",1,1,2,2
"org.jabref.gui.sidepane.SidePaneComponent.getHeader()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.getToggleCommand()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.hide()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.moveDown()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.moveUp()",0,1,1,1
"org.jabref.gui.sidepane.SidePaneComponent.show()",0,1,1,1
"org.jabref.gui.slr.ExistingStudySearchAction.ExistingStudySearchAction(JabRefFrame,FileUpdateMonitor,TaskExecutor,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.slr.ExistingStudySearchAction.crawl()",5,3,4,5
"org.jabref.gui.slr.ExistingStudySearchAction.execute()",0,1,1,1
"org.jabref.gui.slr.ExistingStudySearchAction.setupRepository(Path)",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.ManageStudyDefinitionView(Study,Path,Path)",2,1,2,3
"org.jabref.gui.slr.ManageStudyDefinitionView.addAuthor()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.addDatabase()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.addQuery()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.addResearchQuestion()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.initAuthorTab()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.initDatabasesTab()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.initQueriesTab()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.initQuestionsTab()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.initialize()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.selectStudyDirectory()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.setupCellFactories(TableColumn<String, String>,TableColumn<String, String>,Consumer<String>)",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionView.setupCommonPropertiesForTables(Node,Runnable,TableColumn<?, String>,TableColumn<?, String>)",2,1,2,2
"org.jabref.gui.slr.ManageStudyDefinitionView.setupSaveButton()",2,2,2,2
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.ManageStudyDefinitionViewModel(Study,Path,ImportFormatPreferences)",2,2,3,3
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.addAuthor(String)",1,2,1,2
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.addDatabase(StudyDatabaseItem)",2,2,2,3
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.addQuery(String)",1,2,1,2
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.addResearchQuestion(String)",2,2,2,3
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.computeNonSelectedDatabases(ImportFormatPreferences)",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.deleteAuthor(String)",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.deleteQuery(String)",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.deleteQuestion(String)",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.getAuthors()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.getDatabases()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.getDirectory()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.getNonSelectedDatabases()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.getQueries()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.getResearchQuestions()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.getTitle()",0,1,1,1
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.removeDatabase(String)",1,2,1,2
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.saveStudy()",2,1,2,3
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.setStudyDirectory(Optional<Path>)",1,1,2,2
"org.jabref.gui.slr.ManageStudyDefinitionViewModel.titleProperty()",0,1,1,1
"org.jabref.gui.slr.SlrStudyAndDirectory.SlrStudyAndDirectory(Study,Path)",0,1,1,1
"org.jabref.gui.slr.SlrStudyAndDirectory.getStudy()",0,1,1,1
"org.jabref.gui.slr.SlrStudyAndDirectory.getStudyDirectory()",0,1,1,1
"org.jabref.gui.slr.StartNewStudyAction.StartNewStudyAction(JabRefFrame,FileUpdateMonitor,TaskExecutor,PreferencesService,StateManager)",0,1,1,1
"org.jabref.gui.slr.StartNewStudyAction.execute()",2,2,2,3
"org.jabref.gui.slr.StartNewStudyAction.setupRepository(Path)",0,1,1,1
"org.jabref.gui.slr.StudyDatabaseItem.StudyDatabaseItem(String,boolean)",0,1,1,1
"org.jabref.gui.slr.StudyDatabaseItem.enabledProperty()",0,1,1,1
"org.jabref.gui.slr.StudyDatabaseItem.equals(Object)",5,4,3,6
"org.jabref.gui.slr.StudyDatabaseItem.getName()",0,1,1,1
"org.jabref.gui.slr.StudyDatabaseItem.hashCode()",2,1,2,3
"org.jabref.gui.slr.StudyDatabaseItem.isEnabled()",0,1,1,1
"org.jabref.gui.slr.StudyDatabaseItem.nameProperty()",0,1,1,1
"org.jabref.gui.slr.StudyDatabaseItem.setEnabled(boolean)",0,1,1,1
"org.jabref.gui.slr.StudyDatabaseItem.setName(String)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldAction.SpecialFieldAction(JabRefFrame,SpecialField,String,boolean,String,DialogService,PreferencesService,UndoManager,StateManager)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldAction.execute()",9,2,6,8
"org.jabref.gui.specialfields.SpecialFieldAction.getTextDone(SpecialField,String...)",7,4,11,11
"org.jabref.gui.specialfields.SpecialFieldDatabaseChangeListener.listen(EntriesAddedEvent)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldMenuItemFactory.createSpecialFieldMenu(SpecialField,ActionFactory,JabRefFrame,DialogService,PreferencesService,UndoManager,StateManager)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldMenuItemFactory.createSpecialFieldMenu(SpecialField,ActionFactory,PreferencesService,UndoManager,Function<SpecialFieldValueViewModel, Command>)",1,1,2,2
"org.jabref.gui.specialfields.SpecialFieldMenuItemFactory.getSpecialFieldSingleItem(SpecialField,ActionFactory,JabRefFrame,DialogService,PreferencesService,UndoManager,StateManager)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldValueViewModel.SpecialFieldValueViewModel(SpecialFieldValue)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldValueViewModel.getAction()",1,1,1,17
"org.jabref.gui.specialfields.SpecialFieldValueViewModel.getIcon()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldValueViewModel.getMenuString()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldValueViewModel.getToolTipText()",1,1,17,17
"org.jabref.gui.specialfields.SpecialFieldValueViewModel.getValue()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.SpecialFieldViewModel(SpecialField,PreferencesService,UndoManager)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.getAction()",1,1,1,7
"org.jabref.gui.specialfields.SpecialFieldViewModel.getEmptyIcon()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.getField()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.getIcon()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.getLocalization()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.getSpecialFieldAction(SpecialFieldValue,JabRefFrame,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.getValues()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.setSpecialFieldValue(BibEntry,SpecialFieldValue)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldViewModel.toggle(BibEntry)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldsPreferences.SpecialFieldsPreferences(boolean,boolean,boolean)",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldsPreferences.isKeywordSyncEnabled()",1,1,1,2
"org.jabref.gui.specialfields.SpecialFieldsPreferences.isSpecialFieldsEnabled()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldsPreferences.shouldAutoSyncSpecialFieldsToKeyWords()",0,1,1,1
"org.jabref.gui.specialfields.SpecialFieldsPreferences.shouldSerializeSpecialFields()",0,1,1,1
"org.jabref.gui.texparser.CitationsDisplay.CitationsDisplay()",0,1,1,1
"org.jabref.gui.texparser.CitationsDisplay.basePathProperty()",0,1,1,1
"org.jabref.gui.texparser.CitationsDisplay.getDisplayGraphic(Citation)",1,1,2,2
"org.jabref.gui.texparser.CitationsDisplay.getDisplayTooltip(Citation)",2,1,3,3
"org.jabref.gui.texparser.ParseLatexAction.ParseLatexAction(StateManager)",0,1,1,1
"org.jabref.gui.texparser.ParseLatexAction.execute()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogView.ParseLatexDialogView(BibDatabaseContext)",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogView.browseButtonClicked()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogView.initialize()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogView.searchButtonClicked()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogView.selectAll()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogView.unselectAll()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.ParseLatexDialogViewModel(BibDatabaseContext,DialogService,TaskExecutor,PreferencesService,FileUpdateMonitor)",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.browseButtonClicked()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.getCheckedFileList()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.handleFailure(Exception)",3,1,4,4
"org.jabref.gui.texparser.ParseLatexDialogViewModel.latexDirectoryValidation()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.latexFileDirectoryProperty()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.noFilesFoundProperty()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.parseButtonClicked()",1,2,2,2
"org.jabref.gui.texparser.ParseLatexDialogViewModel.rootProperty()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.searchButtonClicked()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.searchDirectory(Path)",7,2,6,6
"org.jabref.gui.texparser.ParseLatexDialogViewModel.searchInProgressProperty()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexDialogViewModel.successfulSearchProperty()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexResultView.ParseLatexResultView(LatexBibEntriesResolverResult,BibDatabaseContext,Path)",0,1,1,1
"org.jabref.gui.texparser.ParseLatexResultView.initialize()",2,1,2,2
"org.jabref.gui.texparser.ParseLatexResultViewModel.ParseLatexResultViewModel(LatexBibEntriesResolverResult,BibDatabaseContext)",1,1,2,2
"org.jabref.gui.texparser.ParseLatexResultViewModel.activeReferenceChanged(ReferenceViewModel)",2,1,2,2
"org.jabref.gui.texparser.ParseLatexResultViewModel.getCitationListByReference()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexResultViewModel.getReferenceList()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexResultViewModel.importButtonClicked()",0,1,1,1
"org.jabref.gui.texparser.ParseLatexResultViewModel.importButtonDisabledProperty()",0,1,1,1
"org.jabref.gui.texparser.ReferenceViewModel.ReferenceViewModel(String,boolean,Collection<Citation>)",0,1,1,1
"org.jabref.gui.texparser.ReferenceViewModel.getCitationList()",0,1,1,1
"org.jabref.gui.texparser.ReferenceViewModel.getDisplayText()",0,1,1,1
"org.jabref.gui.texparser.ReferenceViewModel.isHighlighted()",0,1,1,1
"org.jabref.gui.texparser.ReferenceViewModel.toString()",0,1,1,1
"org.jabref.gui.undo.AbstractUndoableJabRefEdit.getRedoPresentationName()",0,1,1,1
"org.jabref.gui.undo.AbstractUndoableJabRefEdit.getUndoPresentationName()",0,1,1,1
"org.jabref.gui.undo.CountingUndoManager.addEdit(UndoableEdit)",0,1,1,1
"org.jabref.gui.undo.CountingUndoManager.hasChanged()",0,1,1,1
"org.jabref.gui.undo.CountingUndoManager.markUnchanged()",0,1,1,1
"org.jabref.gui.undo.CountingUndoManager.postAddUndoEvent()",2,1,3,3
"org.jabref.gui.undo.CountingUndoManager.postUndoRedoEvent()",2,1,3,3
"org.jabref.gui.undo.CountingUndoManager.redo()",0,1,1,1
"org.jabref.gui.undo.CountingUndoManager.registerListener(Object)",0,1,1,1
"org.jabref.gui.undo.CountingUndoManager.undo()",0,1,1,1
"org.jabref.gui.undo.CountingUndoManager.unregisterListener(Object)",0,1,1,1
"org.jabref.gui.undo.NamedCompound.NamedCompound(String)",0,1,1,1
"org.jabref.gui.undo.NamedCompound.addEdit(UndoableEdit)",0,1,1,1
"org.jabref.gui.undo.NamedCompound.getPresentationName()",1,1,2,2
"org.jabref.gui.undo.NamedCompound.getRedoPresentationName()",0,1,1,1
"org.jabref.gui.undo.NamedCompound.getUndoPresentationName()",0,1,1,1
"org.jabref.gui.undo.NamedCompound.hasEdits()",0,1,1,1
"org.jabref.gui.undo.UndoRedoAction.UndoRedoAction(StandardActions,JabRefFrame,DialogService,StateManager)",0,1,1,1
"org.jabref.gui.undo.UndoRedoAction.execute()",7,1,5,5
"org.jabref.gui.undo.UndoableChangeType.UndoableChangeType(BibEntry,EntryType,EntryType)",0,1,1,1
"org.jabref.gui.undo.UndoableChangeType.UndoableChangeType(FieldChange)",0,1,1,1
"org.jabref.gui.undo.UndoableChangeType.getPresentationName()",0,1,1,1
"org.jabref.gui.undo.UndoableChangeType.redo()",0,1,1,1
"org.jabref.gui.undo.UndoableChangeType.undo()",0,1,1,1
"org.jabref.gui.undo.UndoableFieldChange.UndoableFieldChange(BibEntry,Field,String,String)",0,1,1,1
"org.jabref.gui.undo.UndoableFieldChange.UndoableFieldChange(FieldChange)",0,1,1,1
"org.jabref.gui.undo.UndoableFieldChange.getPresentationName()",0,1,1,1
"org.jabref.gui.undo.UndoableFieldChange.redo()",3,1,3,3
"org.jabref.gui.undo.UndoableFieldChange.undo()",3,1,3,3
"org.jabref.gui.undo.UndoableInsertEntries.UndoableInsertEntries(BibDatabase,BibEntry)",0,1,1,1
"org.jabref.gui.undo.UndoableInsertEntries.UndoableInsertEntries(BibDatabase,List<BibEntry>)",0,1,1,1
"org.jabref.gui.undo.UndoableInsertEntries.UndoableInsertEntries(BibDatabase,List<BibEntry>,boolean)",0,1,1,1
"org.jabref.gui.undo.UndoableInsertEntries.getPresentationName()",10,6,6,6
"org.jabref.gui.undo.UndoableInsertEntries.redo()",0,1,1,1
"org.jabref.gui.undo.UndoableInsertEntries.undo()",1,1,2,2
"org.jabref.gui.undo.UndoableInsertString.UndoableInsertString(BibDatabase,BibtexString)",0,1,1,1
"org.jabref.gui.undo.UndoableInsertString.getPresentationName()",0,1,1,1
"org.jabref.gui.undo.UndoableInsertString.redo()",1,1,2,2
"org.jabref.gui.undo.UndoableInsertString.undo()",0,1,1,1
"org.jabref.gui.undo.UndoableKeyChange.UndoableKeyChange(BibEntry,String,String)",0,1,1,1
"org.jabref.gui.undo.UndoableKeyChange.UndoableKeyChange(FieldChange)",0,1,1,1
"org.jabref.gui.undo.UndoableKeyChange.getPresentationName()",0,1,1,1
"org.jabref.gui.undo.UndoableKeyChange.redo()",0,1,1,1
"org.jabref.gui.undo.UndoableKeyChange.undo()",0,1,1,1
"org.jabref.gui.undo.UndoablePreambleChange.UndoablePreambleChange(BibDatabase,String,String)",0,1,1,1
"org.jabref.gui.undo.UndoablePreambleChange.getPresentationName()",0,1,1,1
"org.jabref.gui.undo.UndoablePreambleChange.redo()",0,1,1,1
"org.jabref.gui.undo.UndoablePreambleChange.undo()",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveEntries.UndoableRemoveEntries(BibDatabase,BibEntry)",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveEntries.UndoableRemoveEntries(BibDatabase,List<BibEntry>)",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveEntries.UndoableRemoveEntries(BibDatabase,List<BibEntry>,boolean)",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveEntries.getPresentationName()",10,6,6,6
"org.jabref.gui.undo.UndoableRemoveEntries.redo()",1,1,2,2
"org.jabref.gui.undo.UndoableRemoveEntries.undo()",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveString.UndoableRemoveString(BibDatabase,BibtexString)",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveString.getPresentationName()",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveString.redo()",0,1,1,1
"org.jabref.gui.undo.UndoableRemoveString.undo()",1,1,2,2
"org.jabref.gui.undo.UndoableStringChange.UndoableStringChange(BibtexString,boolean,String,String)",0,1,1,1
"org.jabref.gui.undo.UndoableStringChange.getPresentationName()",1,1,2,2
"org.jabref.gui.undo.UndoableStringChange.redo()",2,1,2,2
"org.jabref.gui.undo.UndoableStringChange.undo()",2,1,2,2
"org.jabref.gui.util.BackgroundTask.BackgroundProgress.BackgroundProgress(double,double)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.BackgroundProgress.getMax()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.BackgroundProgress.getWorkDone()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.BackgroundProgress.getWorkDonePercentage()",2,2,1,2
"org.jabref.gui.util.BackgroundTask.BackgroundTask()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.cancel()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.chain(Runnable,Consumer<T>)",5,3,3,3
"org.jabref.gui.util.BackgroundTask.executeWith(TaskExecutor)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.getIcon(Task<?>)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.getOnException()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.getOnRunning()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.getOnSuccess()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.getProgress()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.getWorkDonePercentage()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.isCanceled()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.isCanceledProperty()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.messageProperty()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.onFailure(Consumer<Exception>)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.onFinished(Runnable)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.onRunning(Runnable)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.onSuccess(Consumer<V>)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.progressProperty()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.scheduleWith(TaskExecutor,long,TimeUnit)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.showToUser()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.showToUser(boolean)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.then(Function<V, BackgroundTask<T>>)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.thenRun(Consumer<V>)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.thenRun(Function<V, T>)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.titleProperty()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.updateMessage(String)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.updateProgress(BackgroundProgress)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.updateProgress(double,double)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.withInitialMessage(String)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.workDonePercentageProperty()",0,1,1,1
"org.jabref.gui.util.BackgroundTask.wrap(Callable<V>)",0,1,1,1
"org.jabref.gui.util.BackgroundTask.wrap(Runnable)",0,1,1,1
"org.jabref.gui.util.BaseDialog.BaseDialog()",8,1,5,5
"org.jabref.gui.util.BaseDialog.getDefaultButton()",0,1,1,1
"org.jabref.gui.util.BaseDialog.getDefaultButtonType()",0,1,1,1
"org.jabref.gui.util.BaseDialog.setDialogIcon(Image)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalBinding.BidirectionalBinding(ObservableValue<A>,ObservableValue<B>,Consumer<B>,Consumer<A>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalBinding.changedA(ObservableValue<? extends A>,A,A)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalBinding.changedB(ObservableValue<? extends B>,B,B)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalBinding.getChangeListenerA()",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalBinding.getChangeListenerB()",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalBinding.updateLocked(Consumer<T>,T,T)",1,1,2,2
"org.jabref.gui.util.BindingsHelper.BidirectionalListBinding.BidirectionalListBinding(ObservableList<A>,ObservableValue<B>,Consumer<B>,Consumer<List<A>>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalListBinding.changed(ObservableValue<? extends B>,B,B)",1,1,2,2
"org.jabref.gui.util.BindingsHelper.BidirectionalListBinding.onChanged(Change<? extends A>)",1,1,2,2
"org.jabref.gui.util.BindingsHelper.BidirectionalMapBinding.BidirectionalMapBinding(ObservableMap<A, V>,ObservableValue<B>,Consumer<B>,Consumer<Map<A, V>>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.BidirectionalMapBinding.changed(ObservableValue<? extends B>,B,B)",1,1,2,2
"org.jabref.gui.util.BindingsHelper.BidirectionalMapBinding.onChanged(Change<? extends A, ? extends V>)",1,1,2,2
"org.jabref.gui.util.BindingsHelper.BindingsHelper()",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindBidirectional(ObservableValue<A>,ObservableValue<B>,Consumer<B>,Consumer<A>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindBidirectional(Property<A>,ObservableValue<A>,Consumer<A>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindBidirectional(Property<A>,Property<B>,Function<A, B>,Function<B, A>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindContentBidirectional(ListProperty<A>,Property<B>,Function<List<A>, B>,Function<B, List<A>>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindContentBidirectional(ObservableList<A>,ListProperty<B>,Consumer<ObservableList<B>>,Consumer<List<A>>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindContentBidirectional(ObservableList<A>,ObservableValue<B>,Consumer<B>,Consumer<List<A>>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindContentBidirectional(ObservableMap<A, V>,ObservableValue<B>,Consumer<B>,Consumer<Map<A, V>>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.bindContentBidirectional(ObservableMap<A, V>,Property<B>,Consumer<B>,Function<Map<A, V>, B>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.constantOf(T)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.constantOf(boolean)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.emptyString()",0,1,1,1
"org.jabref.gui.util.BindingsHelper.forUI(ObservableList<T>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.ifThenElse(ObservableValue<Boolean>,T,T)",3,2,1,2
"org.jabref.gui.util.BindingsHelper.includePseudoClassWhen(Node,PseudoClass,ObservableValue<? extends Boolean>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.map(ObservableValue<T>,Function<T, List<U>>)",0,1,1,1
"org.jabref.gui.util.BindingsHelper.subscribeFuture(ObservableValue<T>,Consumer<? super T>)",0,1,1,1
"org.jabref.gui.util.ColorUtil.toHex(Color)",0,1,1,1
"org.jabref.gui.util.ColorUtil.toRGBACode(Color)",0,1,1,1
"org.jabref.gui.util.ColorUtil.toRGBCode(Color)",0,1,1,1
"org.jabref.gui.util.ColorUtilTest.provideToRGBACodeTest()",0,1,1,1
"org.jabref.gui.util.ColorUtilTest.toHexTest()",0,1,1,1
"org.jabref.gui.util.ColorUtilTest.toRGBACodeTest(Color,String)",0,1,1,1
"org.jabref.gui.util.ColorUtilTest.toRGBCodeTest()",0,1,1,1
"org.jabref.gui.util.ControlHelper.childIsFocused(Parent)",4,2,3,3
"org.jabref.gui.util.ControlHelper.getDroppingMouseLocation(Cell<?>,DragEvent)",3,3,2,3
"org.jabref.gui.util.ControlHelper.getIntegerTextFormatter()",2,2,1,2
"org.jabref.gui.util.ControlHelper.removeDroppingPseudoClasses(Cell<?>)",0,1,1,1
"org.jabref.gui.util.ControlHelper.removePseudoClasses(Cell<?>,PseudoClass...)",1,1,2,2
"org.jabref.gui.util.ControlHelper.setAction(ButtonType,DialogPane,Consumer<Event>)",0,1,1,1
"org.jabref.gui.util.ControlHelper.setDroppingPseudoClasses(Cell<?>)",0,1,1,1
"org.jabref.gui.util.ControlHelper.setDroppingPseudoClasses(Cell<?>,DragEvent)",1,1,1,4
"org.jabref.gui.util.ControlHelper.truncateString(String,int,String,EllipsisPosition)",7,5,6,9
"org.jabref.gui.util.CurrentThreadTaskExecutor.FailedFuture.FailedFuture(Throwable)",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.FailedFuture.cancel(boolean)",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.FailedFuture.get()",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.FailedFuture.get(long,TimeUnit)",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.FailedFuture.isCancelled()",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.FailedFuture.isDone()",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.createThrottler(int)",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.execute(BackgroundTask<V>)",6,1,5,5
"org.jabref.gui.util.CurrentThreadTaskExecutor.execute(Task<V>)",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.schedule(BackgroundTask<V>,long,TimeUnit)",0,1,1,1
"org.jabref.gui.util.CurrentThreadTaskExecutor.shutdown()",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.clear(Class<?>)",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.clearAll()",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.getBibEntries()",1,2,2,2
"org.jabref.gui.util.CustomLocalDragboard.getPreviewLayouts()",1,2,2,2
"org.jabref.gui.util.CustomLocalDragboard.getValue(Class<T>)",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.hasBibEntries()",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.hasType(Class<?>)",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.putBibEntries(List<BibEntry>)",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.putPreviewLayouts(List<PreviewLayout>)",0,1,1,1
"org.jabref.gui.util.CustomLocalDragboard.putValue(Class<T>,T)",0,1,1,1
"org.jabref.gui.util.CustomTitledPaneSkin.CustomTitledPaneSkin(TitledPane)",0,1,1,1
"org.jabref.gui.util.CustomTitledPaneSkin.adjustTitleLayout()",4,2,2,4
"org.jabref.gui.util.CustomTitledPaneSkin.arrowSideProperty()",0,1,1,1
"org.jabref.gui.util.CustomTitledPaneSkin.clearBindings()",4,1,4,4
"org.jabref.gui.util.CustomTitledPaneSkin.dispose()",0,1,1,1
"org.jabref.gui.util.CustomTitledPaneSkin.getArrowSide()",0,1,1,1
"org.jabref.gui.util.CustomTitledPaneSkin.getClassCssMetaData()",0,1,1,1
"org.jabref.gui.util.CustomTitledPaneSkin.getCssMetaData()",0,1,1,1
"org.jabref.gui.util.CustomTitledPaneSkin.setArrowSide(ArrowSide)",0,1,1,1
"org.jabref.gui.util.DefaultFileUpdateMonitor.addListenerForFile(Path,FileUpdateListener)",1,1,2,2
"org.jabref.gui.util.DefaultFileUpdateMonitor.isActive()",0,1,1,1
"org.jabref.gui.util.DefaultFileUpdateMonitor.notifyAboutChange(Path)",0,1,1,1
"org.jabref.gui.util.DefaultFileUpdateMonitor.removeListener(Path,FileUpdateListener)",0,1,1,1
"org.jabref.gui.util.DefaultFileUpdateMonitor.run()",11,4,6,8
"org.jabref.gui.util.DefaultFileUpdateMonitor.shutdown()",2,1,3,3
"org.jabref.gui.util.DefaultTaskExecutor.DefaultTaskExecutor(StateManager)",0,1,1,1
"org.jabref.gui.util.DefaultTaskExecutor.convertToException(Throwable)",2,2,1,2
"org.jabref.gui.util.DefaultTaskExecutor.createThrottler(int)",0,1,1,1
"org.jabref.gui.util.DefaultTaskExecutor.execute(BackgroundTask<V>)",1,1,2,2
"org.jabref.gui.util.DefaultTaskExecutor.execute(Task<V>)",0,1,1,1
"org.jabref.gui.util.DefaultTaskExecutor.getJavaFXTask(BackgroundTask<V>)",5,1,5,5
"org.jabref.gui.util.DefaultTaskExecutor.runAndWaitInJavaFXThread(Runnable)",2,2,3,3
"org.jabref.gui.util.DefaultTaskExecutor.runInJavaFXThread(Callable<V>)",4,2,4,4
"org.jabref.gui.util.DefaultTaskExecutor.runInJavaFXThread(Runnable)",0,1,1,1
"org.jabref.gui.util.DefaultTaskExecutor.schedule(BackgroundTask<V>,long,TimeUnit)",0,1,1,1
"org.jabref.gui.util.DefaultTaskExecutor.shutdown()",0,1,1,1
"org.jabref.gui.util.DialogWindowState.DialogWindowState(double,double,double,double)",0,1,1,1
"org.jabref.gui.util.DialogWindowState.getHeight()",0,1,1,1
"org.jabref.gui.util.DialogWindowState.getWidth()",0,1,1,1
"org.jabref.gui.util.DialogWindowState.getX()",0,1,1,1
"org.jabref.gui.util.DialogWindowState.getY()",0,1,1,1
"org.jabref.gui.util.DirectoryDialogConfiguration.Builder.build()",0,1,1,1
"org.jabref.gui.util.DirectoryDialogConfiguration.Builder.withInitialDirectory(Path)",2,1,2,3
"org.jabref.gui.util.DirectoryDialogConfiguration.Builder.withInitialDirectory(String)",0,1,1,1
"org.jabref.gui.util.DirectoryDialogConfiguration.DirectoryDialogConfiguration(Path)",0,1,1,1
"org.jabref.gui.util.DirectoryDialogConfiguration.getInitialDirectory()",0,1,1,1
"org.jabref.gui.util.FieldsUtil.getNameWithType(Field)",5,5,5,5
"org.jabref.gui.util.FileDialogConfiguration.Builder.addExtensionFilter(ExtensionFilter)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.addExtensionFilter(FileType...)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.addExtensionFilter(List<ExtensionFilter>)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.addExtensionFilter(String,FileType)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.build()",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.withDefaultExtension(ExtensionFilter)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.withDefaultExtension(FileType)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.withDefaultExtension(String)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.withDefaultExtension(String,FileType)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.Builder.withInitialDirectory(Path)",7,1,4,5
"org.jabref.gui.util.FileDialogConfiguration.Builder.withInitialDirectory(String)",2,1,2,2
"org.jabref.gui.util.FileDialogConfiguration.Builder.withInitialFileName(String)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.FileDialogConfiguration(Path,List<ExtensionFilter>,ExtensionFilter,String)",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.getDefaultExtension()",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.getExtensionFilters()",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.getInitialDirectory()",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.getInitialFileName()",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.getSelectedExtensionFilter()",0,1,1,1
"org.jabref.gui.util.FileDialogConfiguration.setSelectedExtensionFilter(ExtensionFilter)",0,1,1,1
"org.jabref.gui.util.FileDialogConfigurationTest.testSingleExtension()",0,1,1,1
"org.jabref.gui.util.FileDialogConfigurationTest.testWithNonExistingDirectoryAndParentNull()",0,1,1,1
"org.jabref.gui.util.FileDialogConfigurationTest.testWithNullPathDirectory()",0,1,1,1
"org.jabref.gui.util.FileDialogConfigurationTest.testWithNullStringDirectory()",0,1,1,1
"org.jabref.gui.util.FileDialogConfigurationTest.testWithValidDirectoryPath(Path)",0,1,1,1
"org.jabref.gui.util.FileDialogConfigurationTest.testWithValidDirectoryString(Path)",0,1,1,1
"org.jabref.gui.util.FileDialogConfigurationTest.toFilter(String,FileType)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.FileFilterConverter()",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.exporterToExtensionFilter(Collection<Exporter>)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.forAllImporters(SortedSet<Importer>)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.getExporter(ExtensionFilter,Collection<Exporter>)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.getImporter(ExtensionFilter,Collection<Importer>)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.importerToExtensionFilter(Collection<Importer>)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.toDirFilter(List<String>)",2,2,2,2
"org.jabref.gui.util.FileFilterConverter.toExtensionFilter(FileType)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.toExtensionFilter(String,FileType)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.toFileFilter(ExtensionFilter)",0,1,1,1
"org.jabref.gui.util.FileFilterConverter.toFileFilter(List<String>)",2,1,1,2
"org.jabref.gui.util.FileNodeViewModel.FileNodeViewModel(Path)",0,1,1,1
"org.jabref.gui.util.FileNodeViewModel.formatDateTime(FileTime)",0,1,1,1
"org.jabref.gui.util.FileNodeViewModel.getChildren()",0,1,1,1
"org.jabref.gui.util.FileNodeViewModel.getDisplayText()",3,2,3,3
"org.jabref.gui.util.FileNodeViewModel.getDisplayTextWithEditDate()",4,2,4,4
"org.jabref.gui.util.FileNodeViewModel.getFileCount()",0,1,1,1
"org.jabref.gui.util.FileNodeViewModel.getPath()",0,1,1,1
"org.jabref.gui.util.FileNodeViewModel.setFileCount(int)",0,1,1,1
"org.jabref.gui.util.FileNodeViewModel.toString()",0,1,1,1
"org.jabref.gui.util.IconValidationDecorator.IconValidationDecorator()",0,1,1,1
"org.jabref.gui.util.IconValidationDecorator.IconValidationDecorator(Pos)",0,1,1,1
"org.jabref.gui.util.IconValidationDecorator.createDecorationNode(ValidationMessage)",2,1,2,3
"org.jabref.gui.util.IconValidationDecorator.createErrorNode()",0,1,1,1
"org.jabref.gui.util.IconValidationDecorator.createTooltip(ValidationMessage)",1,1,1,2
"org.jabref.gui.util.IconValidationDecorator.createValidationDecorations(ValidationMessage)",0,1,1,1
"org.jabref.gui.util.IconValidationDecorator.createWarningNode()",0,1,1,1
"org.jabref.gui.util.JabRefResourceLocator.getResourceBundle(String)",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.clearAndSelect(int)",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.clearSelection()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.clearSelection(int)",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.getSelectedIndices()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.getSelectedItems()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.isEmpty()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.isSelected(int)",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.select(T)",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.select(int)",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.selectAll()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.selectFirst()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.selectIndices(int,int...)",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.selectLast()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.selectNext()",0,1,1,1
"org.jabref.gui.util.NoSelectionModel.selectPrevious()",0,1,1,1
"org.jabref.gui.util.OnlyIntegerFormatter.IntegerFilter.apply(Change)",1,1,1,2
"org.jabref.gui.util.OnlyIntegerFormatter.OnlyIntegerFormatter()",0,1,1,1
"org.jabref.gui.util.OnlyIntegerFormatter.OnlyIntegerFormatter(Integer)",0,1,1,1
"org.jabref.gui.util.OpenHyperlinksInExternalBrowser.OpenHyperlinksInExternalBrowser(WebView)",0,1,1,1
"org.jabref.gui.util.OpenHyperlinksInExternalBrowser.changed(ObservableValue<? extends State>,State,State)",3,1,3,3
"org.jabref.gui.util.OpenHyperlinksInExternalBrowser.handleEvent(Event)",1,1,2,2
"org.jabref.gui.util.OptionalObjectProperty.OptionalObjectProperty(Optional<T>)",0,1,1,1
"org.jabref.gui.util.OptionalObjectProperty.empty()",0,1,1,1
"org.jabref.gui.util.OptionalObjectProperty.isPresent()",0,1,1,1
"org.jabref.gui.util.OptionalObjectProperty.orElse(T)",0,1,1,1
"org.jabref.gui.util.OptionalValueTableCellFactory.setToGraphic()",4,2,3,3
"org.jabref.gui.util.OptionalValueTableCellFactory.withDefaultGraphic(Node)",0,1,1,1
"org.jabref.gui.util.OptionalValueTableCellFactory.withGraphicIfPresent(BiFunction<S, T, Node>)",0,1,1,1
"org.jabref.gui.util.RadioButtonCell.RadioButtonCell(EnumSet<T>)",0,1,1,1
"org.jabref.gui.util.RadioButtonCell.updateItem(T,boolean)",8,1,4,5
"org.jabref.gui.util.RecursiveTreeItem.RecursiveTreeItem(T,Callback<T, ObservableList<T>>)",0,1,1,1
"org.jabref.gui.util.RecursiveTreeItem.RecursiveTreeItem(T,Callback<T, ObservableList<T>>,Callback<T, BooleanProperty>,ObservableValue<Predicate<T>>)",0,1,1,1
"org.jabref.gui.util.RecursiveTreeItem.RecursiveTreeItem(T,Callback<T, ObservableList<T>>,ObservableValue<Predicate<T>>)",0,1,1,1
"org.jabref.gui.util.RecursiveTreeItem.RecursiveTreeItem(T,Node,Callback<T, ObservableList<T>>,Callback<T, BooleanProperty>,ObservableValue<Predicate<T>>)",4,1,4,4
"org.jabref.gui.util.RecursiveTreeItem.addChildrenListener(T)",0,1,1,1
"org.jabref.gui.util.RecursiveTreeItem.bindExpandedProperty(T,Callback<T, BooleanProperty>)",1,1,2,2
"org.jabref.gui.util.RecursiveTreeItem.showNode(RecursiveTreeItem<T>)",2,3,1,3
"org.jabref.gui.util.RecursiveTreeItemTest.addsAllChildrenNodes()",0,1,1,1
"org.jabref.gui.util.RecursiveTreeItemTest.addsAllChildrenOfChildNode()",0,1,1,1
"org.jabref.gui.util.RecursiveTreeItemTest.respectsFilter()",0,1,1,1
"org.jabref.gui.util.RecursiveTreeItemTest.setUp()",0,1,1,1
"org.jabref.gui.util.StreamGobbler.StreamGobbler(InputStream,Consumer<String>)",0,1,1,1
"org.jabref.gui.util.StreamGobbler.run()",1,1,2,2
"org.jabref.gui.util.TextFlowLimited.TextFlowLimited(Text...)",0,1,1,1
"org.jabref.gui.util.TextFlowLimited.computePrefHeight(double)",2,2,2,2
"org.jabref.gui.util.TextFlowLimited.expand()",0,1,1,1
"org.jabref.gui.util.TextFlowLimited.layoutChildren()",4,1,3,3
"org.jabref.gui.util.Theme.Theme(String,PreferencesService)",12,1,6,6
"org.jabref.gui.util.Theme.addAndWatchForChanges(Scene,URL,FileUpdateMonitor,int)",2,1,3,3
"org.jabref.gui.util.Theme.additionalCssToLoad()",9,5,5,5
"org.jabref.gui.util.Theme.getAdditionalStylesheet()",1,1,2,2
"org.jabref.gui.util.Theme.getCssPathString()",0,1,1,1
"org.jabref.gui.util.Theme.getType()",0,1,1,1
"org.jabref.gui.util.Theme.installCss(Scene)",0,1,1,1
"org.jabref.gui.util.Theme.installCss(Scene,FileUpdateMonitor)",1,1,2,2
"org.jabref.gui.util.Theme.isAdditionalCssExternal()",1,1,2,2
"org.jabref.gui.util.Theme.loadCssToMemory(URL)",3,1,3,3
"org.jabref.gui.util.ThemeTest.customThemeAvailableEvenWhenDeleted()",0,1,1,1
"org.jabref.gui.util.ThemeTest.customThemeIgnoredIfDirectory()",0,1,1,1
"org.jabref.gui.util.ThemeTest.customThemeIgnoredIfInvalidPath()",0,1,1,1
"org.jabref.gui.util.ThemeTest.darkThemeUsedWhenPathIsDarkCss()",0,1,1,1
"org.jabref.gui.util.ThemeTest.largeCustomThemeNotHeldInMemory()",1,1,2,2
"org.jabref.gui.util.ThemeTest.lightThemeUsedWhenPathIsBaseCss()",0,1,1,1
"org.jabref.gui.util.ThemeTest.lightThemeUsedWhenPathIsBlank()",0,1,1,1
"org.jabref.gui.util.ThemeTest.liveReloadCssDataUrl()",3,1,4,4
"org.jabref.gui.util.ThemeTest.setUp(Path)",0,1,1,1
"org.jabref.gui.util.TooltipTextUtil.TextReplacement.TextReplacement(String,String,TextType)",0,1,1,1
"org.jabref.gui.util.TooltipTextUtil.convertHtmlBold(String)",4,1,4,4
"org.jabref.gui.util.TooltipTextUtil.createText(String)",0,1,1,1
"org.jabref.gui.util.TooltipTextUtil.createText(String,TextType)",1,1,1,4
"org.jabref.gui.util.TooltipTextUtil.createTextsFromHtml(String)",4,1,4,4
"org.jabref.gui.util.TooltipTextUtil.formatToTexts(String,TextReplacement...)",1,1,2,2
"org.jabref.gui.util.TooltipTextUtil.splitReplace(List<Text>,TextReplacement)",10,4,5,5
"org.jabref.gui.util.TooltipTextUtil.textToHtmlString(Text)",3,1,4,4
"org.jabref.gui.util.TooltipTextUtilTest.formatToTextsBegin()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.formatToTextsEnd()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.formatToTextsMiddle()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.formatToTextsNoReplacements()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.retrieveCorrectStyleMonospaced()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.retrieveCorrectTextStyleBold()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.retrieveCorrectTextStyleItalic()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.retrieveCorrectTextStyleNormal()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.stringRemainsTheSameAfterTransformationToBold()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.stringRemainsTheSameAfterTransformationToItalic()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.stringRemainsTheSameAfterTransformationToMonospaced()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.stringRemainsTheSameAfterTransformationToNormal()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.testCreateTextMonospaced()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.transformTextToHtmlStringBold()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.transformTextToHtmlStringItalic()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.transformTextToHtmlStringMonospaced()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.transformTextToHtmlStringMonospacedBold()",0,1,1,1
"org.jabref.gui.util.TooltipTextUtilTest.transformTextToHtmlStringWithLinebreaks()",0,1,1,1
"org.jabref.gui.util.UiThreadList.UiThreadList(ObservableList<? extends T>)",0,1,1,1
"org.jabref.gui.util.UiThreadList.get(int)",0,1,1,1
"org.jabref.gui.util.UiThreadList.getSourceIndex(int)",0,1,1,1
"org.jabref.gui.util.UiThreadList.getViewIndex(int)",0,1,1,1
"org.jabref.gui.util.UiThreadList.size()",0,1,1,1
"org.jabref.gui.util.UiThreadList.sourceChanged(Change<? extends T>)",4,1,3,3
"org.jabref.gui.util.ValueTableCellFactory.call(TableColumn<S, T>)",51,1,18,18
"org.jabref.gui.util.ValueTableCellFactory.install(TableColumn<S, T>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withContextMenu(Function<T, ContextMenu>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withDisableExpression(Function<T, BooleanExpression>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withGraphic(BiFunction<S, T, Node>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withGraphic(Function<T, Node>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withMenu(BiFunction<S, T, ContextMenu>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withOnMouseClickedEvent(BiFunction<S, T, EventHandler<? super MouseEvent>>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withOnMouseClickedEvent(Function<T, EventHandler<? super MouseEvent>>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withText(Function<T, String>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withTooltip(BiFunction<S, T, String>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withTooltip(Function<T, String>)",0,1,1,1
"org.jabref.gui.util.ValueTableCellFactory.withVisibleExpression(Function<T, BooleanExpression>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.call(ListView<T>)",43,1,15,16
"org.jabref.gui.util.ViewModelListCellFactory.install(ComboBox<T>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.install(ListView<T>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.setOnDragDetected(BiConsumer<T, ? super MouseEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.setOnDragDropped(BiConsumer<T, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.setOnDragEntered(BiConsumer<T, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.setOnDragExited(BiConsumer<T, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.setOnDragOver(BiConsumer<T, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withContextMenu(Callback<T, ContextMenu>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withGraphic(Callback<T, Node>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withIcon(Callback<T, JabRefIcon>)",2,2,2,2
"org.jabref.gui.util.ViewModelListCellFactory.withIcon(Callback<T, JabRefIcon>,Callback<T, Color>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withOnMouseClickedEvent(BiConsumer<T, ? super MouseEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withPseudoClass(PseudoClass,Callback<T, ObservableValue<Boolean>>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withStringTooltip(Callback<T, String>)",2,2,1,2
"org.jabref.gui.util.ViewModelListCellFactory.withStyleClass(Callback<T, String>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withText(Callback<T, String>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withTooltip(Callback<T, Tooltip>)",0,1,1,1
"org.jabref.gui.util.ViewModelListCellFactory.withValidation(Callback<T, ValidationStatus>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.call(TableView<S>)",44,1,23,23
"org.jabref.gui.util.ViewModelTableRowFactory.install(TableView<S>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragDetected(BiConsumer<S, ? super MouseEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragDetected(TriConsumer<TableRow<S>, S, ? super MouseEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragDropped(BiConsumer<S, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragDropped(TriConsumer<TableRow<S>, S, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragEntered(BiConsumer<S, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragExited(BiConsumer<S, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragExited(TriConsumer<TableRow<S>, S, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragOver(BiConsumer<S, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnDragOver(TriConsumer<TableRow<S>, S, ? super DragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnMouseDragEntered(BiConsumer<S, ? super MouseDragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.setOnMouseDragEntered(TriConsumer<TableRow<S>, S, ? super MouseDragEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.withContextMenu(Function<S, ContextMenu>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.withOnMouseClickedEvent(BiConsumer<S, ? super MouseEvent>)",0,1,1,1
"org.jabref.gui.util.ViewModelTableRowFactory.withTooltip(Callback<S, String>)",0,1,1,1
"org.jabref.gui.util.ViewModelTextFieldTableCellVisualizationFactory.call(TableColumn<S, T>)",18,4,9,9
"org.jabref.gui.util.ViewModelTextFieldTableCellVisualizationFactory.install(TableColumn<S, T>,StringConverter<T>)",0,1,1,1
"org.jabref.gui.util.ViewModelTextFieldTableCellVisualizationFactory.withValidation(Function<S, ValidationStatus>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeCellFactory.call(TreeView<T>)",5,2,5,5
"org.jabref.gui.util.ViewModelTreeCellFactory.install(TreeView<T>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeCellFactory.withGraphic(Callback<T, Node>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeCellFactory.withIcon(Callback<T, JabRefIcon>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeCellFactory.withOnMouseClickedEvent(Callback<T, EventHandler<? super MouseEvent>>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeCellFactory.withText(Callback<T, String>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeCellFactory.withTooltip(Callback<T, String>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeTableCellFactory.call(TreeTableColumn<S, S>)",20,1,7,8
"org.jabref.gui.util.ViewModelTreeTableCellFactory.install(TreeTableColumn<S, S>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeTableCellFactory.withGraphic(Callback<S, Node>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeTableCellFactory.withIcon(Callback<S, JabRefIcon>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeTableCellFactory.withOnMouseClickedEvent(Callback<S, EventHandler<? super MouseEvent>>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeTableCellFactory.withText(Callback<S, String>)",0,1,1,1
"org.jabref.gui.util.ViewModelTreeTableCellFactory.withTooltip(Callback<S, String>)",0,1,1,1
"org.jabref.gui.util.ZipFileChooser.ZipFileChooser(FileSystem)",7,2,2,4
"org.jabref.gui.util.ZipFileChooser.getSelectableZipEntries(FileSystem)",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparator.compare(String,String)",8,5,3,7
"org.jabref.gui.util.comparator.NumericFieldComparator.isNumber(String)",10,6,5,10
"org.jabref.gui.util.comparator.NumericFieldComparator.parseInt(String)",2,2,1,3
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareIntegerWithString()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareNegativeInteger()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareStringWithInteger()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareTwoInputsWithFirstNull()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareTwoInputsWithSecondNull()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareTwoNotNumericInputs()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareTwoNullInputs()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareTwoNumericInputs()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareWithMinusString()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareWithPlusString()",0,1,1,1
"org.jabref.gui.util.comparator.NumericFieldComparatorTest.compareWordWithMinus()",0,1,1,1
"org.jabref.gui.util.comparator.RankingFieldComparator.compare(Optional<SpecialFieldValueViewModel>,Optional<SpecialFieldValueViewModel>)",12,5,3,5
"org.jabref.gui.util.comparator.RankingFieldComparatorTest.compareHigherRankFirst()",0,1,1,1
"org.jabref.gui.util.comparator.RankingFieldComparatorTest.compareLowerRankFirst()",0,1,1,1
"org.jabref.gui.util.comparator.RankingFieldComparatorTest.compareSameRank()",0,1,1,1
"org.jabref.gui.util.comparator.RankingFieldComparatorTest.compareTwoEmptyInputs()",0,1,1,1
"org.jabref.gui.util.comparator.RankingFieldComparatorTest.compareTwoInputsWithFirstEmpty()",0,1,1,1
"org.jabref.gui.util.comparator.RankingFieldComparatorTest.compareTwoInputsWithSecondEmpty()",0,1,1,1
"org.jabref.gui.util.comparator.RankingFieldComparatorTest.setUp()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparator.compare(Optional<SpecialFieldValueViewModel>,Optional<SpecialFieldValueViewModel>)",8,4,3,4
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.compareHigherPriorityFirst()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.compareLowerPriorityFirst()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.compareSamePriority()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.compareTwoEmptyInputs()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.compareTwoInputsWithFirstEmpty()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.compareTwoInputsWithSecondEmpty()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.compareUnrelatedFields()",0,1,1,1
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest.setUp()",0,1,1,1
"org.jabref.gui.util.component.DiffHighlightingTextPane.DiffHighlightingTextPane()",0,1,1,1
"org.jabref.gui.util.component.Tag.Tag(Function<T, String>)",0,1,1,1
"org.jabref.gui.util.component.Tag.Tag(Function<T, String>,T)",0,1,1,1
"org.jabref.gui.util.component.Tag.getValue()",0,1,1,1
"org.jabref.gui.util.component.Tag.removeButtonClicked(ActionEvent)",1,1,2,2
"org.jabref.gui.util.component.Tag.setOnTagRemoved(Consumer<T>)",0,1,1,1
"org.jabref.gui.util.component.Tag.setValue(T)",0,1,1,1
"org.jabref.gui.util.component.Tag.valueProperty()",0,1,1,1
"org.jabref.gui.util.component.TagBar.TagBar()",0,1,1,1
"org.jabref.gui.util.component.TagBar.addTextAsNewTag(ActionEvent)",5,1,6,6
"org.jabref.gui.util.component.TagBar.createTag(T)",1,1,2,2
"org.jabref.gui.util.component.TagBar.getInputTextField()",0,1,1,1
"org.jabref.gui.util.component.TagBar.getTags()",0,1,1,1
"org.jabref.gui.util.component.TagBar.onTagsChanged(Change<? extends T>)",5,1,5,5
"org.jabref.gui.util.component.TagBar.setFieldProperties(Set<FieldProperty>)",0,1,1,1
"org.jabref.gui.util.component.TagBar.setOnTagClicked(BiConsumer<T, MouseEvent>)",0,1,1,1
"org.jabref.gui.util.component.TagBar.setStringConverter(StringConverter<T>)",0,1,1,1
"org.jabref.gui.util.component.TagBar.setTags(Collection<T>)",0,1,1,1
"org.jabref.gui.util.component.TagBar.tagsProperty()",0,1,1,1
"org.jabref.gui.util.component.TemporalAccessorPicker.InternalConverter.fromString(String)",2,2,3,3
"org.jabref.gui.util.component.TemporalAccessorPicker.InternalConverter.toString(LocalDate)",1,1,2,2
"org.jabref.gui.util.component.TemporalAccessorPicker.TemporalAccessorPicker()",0,1,1,1
"org.jabref.gui.util.component.TemporalAccessorPicker.addCurrentTime(LocalDate)",1,2,1,2
"org.jabref.gui.util.component.TemporalAccessorPicker.getDate(TemporalAccessor)",1,2,1,2
"org.jabref.gui.util.component.TemporalAccessorPicker.getLocalDate(TemporalAccessor)",2,2,2,3
"org.jabref.gui.util.component.TemporalAccessorPicker.getStringConverter()",0,1,1,1
"org.jabref.gui.util.component.TemporalAccessorPicker.getTemporalAccessorValue()",0,1,1,1
"org.jabref.gui.util.component.TemporalAccessorPicker.setStringConverter(StringConverter<TemporalAccessor>)",0,1,1,1
"org.jabref.gui.util.component.TemporalAccessorPicker.setTemporalAccessorValue(TemporalAccessor)",0,1,1,1
"org.jabref.gui.util.component.TemporalAccessorPicker.stringConverterProperty()",0,1,1,1
"org.jabref.gui.util.component.TemporalAccessorPicker.temporalAccessorValueProperty()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.UiThreadBinding(Binding<T>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.addListener(ChangeListener<? super T>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.addListener(InvalidationListener)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.dispose()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.getDependencies()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.getValue()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.invalidate()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.isValid()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.removeListener(ChangeListener<? super T>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadBinding.removeListener(InvalidationListener)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadChangeListener.UiThreadChangeListener(ChangeListener<T>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadChangeListener.changed(ObservableValue<? extends T>,T,T)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadChangeListener.equals(Object)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadChangeListener.hashCode()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadHelper.ensureUiThreadExecution(Runnable)",2,1,2,2
"org.jabref.gui.util.uithreadaware.UiThreadInvalidationListener.UiThreadInvalidationListener(InvalidationListener)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadInvalidationListener.equals(Object)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadInvalidationListener.hashCode()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadInvalidationListener.invalidated(Observable)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadListChangeListener.UiThreadListChangeListener(ListChangeListener<E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadListChangeListener.equals(Object)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadListChangeListener.hashCode()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadListChangeListener.onChanged(Change<? extends E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.UiThreadObservableList(ObservableList<E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.add(E)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.add(int,E)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.addAll(Collection<? extends E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.addAll(E...)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.addAll(int,Collection<? extends E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.addListener(InvalidationListener)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.addListener(ListChangeListener<? super E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.clear()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.contains(Object)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.containsAll(Collection<?>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.get(int)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.indexOf(Object)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.isEmpty()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.iterator()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.lastIndexOf(Object)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.listIterator()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.listIterator(int)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.remove(Object)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.remove(int)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.remove(int,int)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.removeAll(Collection<?>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.removeAll(E...)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.removeListener(InvalidationListener)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.removeListener(ListChangeListener<? super E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.retainAll(Collection<?>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.retainAll(E...)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.set(int,E)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.setAll(Collection<? extends E>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.setAll(E...)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.size()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.subList(int,int)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.toArray()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadObservableList.toArray(T[])",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.UiThreadStringProperty(StringProperty)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.addListener(ChangeListener<? super String>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.addListener(InvalidationListener)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.bind(ObservableValue<? extends String>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.get()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.getBean()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.getName()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.isBound()",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.removeListener(ChangeListener<? super String>)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.removeListener(InvalidationListener)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.set(String)",0,1,1,1
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty.unbind()",0,1,1,1
"org.jabref.logic.JabRefException.JabRefException(String)",0,1,1,1
"org.jabref.logic.JabRefException.JabRefException(String,String)",0,1,1,1
"org.jabref.logic.JabRefException.JabRefException(String,String,Throwable)",0,1,1,1
"org.jabref.logic.JabRefException.JabRefException(String,Throwable)",0,1,1,1
"org.jabref.logic.JabRefException.JabRefException(Throwable)",0,1,1,1
"org.jabref.logic.JabRefException.getLocalizedMessage()",2,2,2,2
"org.jabref.logic.TypedBibEntry.TypedBibEntry(BibEntry,BibDatabaseContext)",0,1,1,1
"org.jabref.logic.TypedBibEntry.TypedBibEntry(BibEntry,BibDatabaseMode)",0,1,1,1
"org.jabref.logic.TypedBibEntry.getTypeForDisplay()",0,1,1,1
"org.jabref.logic.TypedBibEntry.hasAllRequiredFields(BibEntryTypesManager)",2,2,2,2
"org.jabref.logic.TypedBibEntryTest.getTypeForDisplayForUnknownTypeCapitalizeFirstLetter()",0,1,1,1
"org.jabref.logic.TypedBibEntryTest.getTypeForDisplayReturnsTypeName()",0,1,1,1
"org.jabref.logic.TypedBibEntryTest.hasAllRequiredFields()",0,1,1,1
"org.jabref.logic.TypedBibEntryTest.hasAllRequiredFieldsFail()",0,1,1,1
"org.jabref.logic.TypedBibEntryTest.hasAllRequiredFieldsForUnknownTypeReturnsTrue()",0,1,1,1
"org.jabref.logic.TypedBibEntryTest.setUp()",0,1,1,1
"org.jabref.logic.WatchServiceUnavailableException.WatchServiceUnavailableException(String,String,Throwable)",0,1,1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager.AutosaveManager(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager.listen(BibDatabaseContextChangedEvent)",1,1,2,2
"org.jabref.logic.autosaveandbackup.AutosaveManager.registerListener(Object)",0,1,1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager.shutdown()",0,1,1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager.shutdown(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager.start(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager.startAutosaveTask()",0,1,1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager.unregisterListener(Object)",1,1,2,2
"org.jabref.logic.autosaveandbackup.BackupManager.BackupManager(BibDatabaseContext,BibEntryTypesManager,PreferencesService)",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManager.backupFileDiffers(Path)",3,2,3,4
"org.jabref.logic.autosaveandbackup.BackupManager.deleteBackupFile(Path)",3,1,4,4
"org.jabref.logic.autosaveandbackup.BackupManager.determineBackupPath()",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManager.getBackupPath(Path)",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManager.listen(BibDatabaseContextChangedEvent)",1,1,2,2
"org.jabref.logic.autosaveandbackup.BackupManager.logIfCritical(Path,IOException)",2,1,3,3
"org.jabref.logic.autosaveandbackup.BackupManager.performBackup(Path)",1,1,2,2
"org.jabref.logic.autosaveandbackup.BackupManager.restoreBackup(Path)",1,1,2,2
"org.jabref.logic.autosaveandbackup.BackupManager.shutdown()",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManager.shutdown(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManager.start(BibDatabaseContext,BibEntryTypesManager,PreferencesService)",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManager.startBackupTask()",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManagerTest.autosaveFileIsEqualForNonExistingBackup()",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManagerTest.autosaveFileNameIsCorrectlyGeneratedWithinTmpDirectory()",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManagerTest.backupFileDiffers()",0,1,1,1
"org.jabref.logic.autosaveandbackup.BackupManagerTest.backupFileIsEqual()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.AuxParserResult(BibDatabase)",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getCrossRefEntriesCount()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getFoundKeysInAux()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getGeneratedBibDatabase()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getInsertedStrings()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getMasterDatabase()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getNestedAuxCount()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getResolvedKeysCount()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getUniqueKeys()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeys()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.getUnresolvedKeysCount()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.increaseCrossRefEntriesCounter()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.increaseNestedAuxFilesCounter()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserResult.insertStrings(Collection<BibtexString>)",1,1,2,2
"org.jabref.logic.auxparser.AuxParserTest.duplicateBibDatabaseConfiguration()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserTest.setUp()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserTest.tearDown()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserTest.testCrossRef()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserTest.testFileNotFound()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserTest.testNestedAux()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserTest.testNormal()",0,1,1,1
"org.jabref.logic.auxparser.AuxParserTest.testNotAllFound()",0,1,1,1
"org.jabref.logic.auxparser.DefaultAuxParser.DefaultAuxParser(BibDatabase)",0,1,1,1
"org.jabref.logic.auxparser.DefaultAuxParser.insertEntries(List<BibEntry>,AuxParserResult)",1,1,2,2
"org.jabref.logic.auxparser.DefaultAuxParser.matchCitation(AuxParserResult,String)",3,1,3,3
"org.jabref.logic.auxparser.DefaultAuxParser.matchNestedAux(Path,AuxParserResult,List<Path>,String)",6,1,4,4
"org.jabref.logic.auxparser.DefaultAuxParser.parse(Path)",0,1,1,1
"org.jabref.logic.auxparser.DefaultAuxParser.parseAuxFile(Path)",7,1,5,5
"org.jabref.logic.auxparser.DefaultAuxParser.resolveCrossReferences(List<BibEntry>,AuxParserResult)",14,1,5,5
"org.jabref.logic.auxparser.DefaultAuxParser.resolveTags(AuxParserResult)",8,1,5,5
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(Class<?>,String,BibEntry)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(Class<?>,String,List<BibEntry>)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(InputStream,BibEntry)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(InputStream,List<BibEntry>)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(InputStream,Path,Importer)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(InputStream,URL,Importer)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(List<BibEntry>,InputStream)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(List<BibEntry>,Path,Importer)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.assertEquals(List<BibEntry>,URL,Importer)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryAssert.getListFromInputStream(InputStream)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriter.BibEntryWriter(FieldWriter,BibEntryTypesManager)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriter.getFormattedFieldName(Field,int)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriter.getLengthOfLongestFieldName(BibEntry)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriter.serializeAll(List<BibEntry>,BibDatabaseMode)",1,1,2,2
"org.jabref.logic.bibtex.BibEntryWriter.write(BibEntry,BibWriter,BibDatabaseMode)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriter.write(BibEntry,BibWriter,BibDatabaseMode,Boolean)",2,2,3,3
"org.jabref.logic.bibtex.BibEntryWriter.writeField(BibEntry,BibWriter,Field,int)",4,2,4,4
"org.jabref.logic.bibtex.BibEntryWriter.writeKeyField(BibEntry,BibWriter)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriter.writeRequiredFieldsFirstRemainingFieldsSecond(BibEntry,BibWriter,BibDatabaseMode)",6,1,5,5
"org.jabref.logic.bibtex.BibEntryWriter.writeUserComments(BibEntry,BibWriter)",1,1,2,2
"org.jabref.logic.bibtex.BibEntryWriterTest.addFieldWithLongerLength()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.alphabeticSerialization()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.constantMonthApril()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.doNotWriteEmptyFields()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.monthApril()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.monthFieldSpecialSyntax()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.multipleWritesWithoutModification()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripNormalizesNewLines()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripTest()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithAppendedNewlines()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithCamelCasingInTheOriginalEntryAndResultInLowerCase()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithKeepsCRLFLineBreakStyle()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithKeepsLFLineBreakStyle()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithModification()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithPrecedingCommentAndModificationTest()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithPrecedingCommentTest()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.roundTripWithPrependingNewlines()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.setUpWriter()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.testEntryTypeChange()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.testSerialization()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.testSerializeAll()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.testSingleWrite(String)",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.writeEntryWithFile()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.writeEntryWithOrField()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.writeEntryWithOrFieldBothFieldsPresent()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.writeOtherTypeTest()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.writeReallyUnknownTypeTest()",0,1,1,1
"org.jabref.logic.bibtex.BibEntryWriterTest.writeThrowsErrorIfFieldContainsUnbalancedBraces()",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatter.FieldContentFormatter(FieldContentFormatterPreferences)",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatter.format(String,Field)",1,2,2,2
"org.jabref.logic.bibtex.FieldContentFormatter.format(StringBuilder,Field)",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatterPreferences.FieldContentFormatterPreferences()",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatterPreferences.FieldContentFormatterPreferences(List<Field>)",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatterPreferences.getNonWrappableFields()",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatterTest.removeWhitespaceFromNonMultiLineFields()",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatterTest.retainsWhitespaceForMultiLineFields()",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.bibtex.FieldContentFormatterTest.unifiesLineBreaks()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriter.FieldWriter(FieldWriterPreferences)",0,1,1,1
"org.jabref.logic.bibtex.FieldWriter.FieldWriter(boolean,FieldWriterPreferences)",0,1,1,1
"org.jabref.logic.bibtex.FieldWriter.buildIgnoreHashes(FieldWriterPreferences)",0,1,1,1
"org.jabref.logic.bibtex.FieldWriter.checkBraces(String)",14,4,6,13
"org.jabref.logic.bibtex.FieldWriter.formatAndResolveStrings(String,Field)",27,5,10,12
"org.jabref.logic.bibtex.FieldWriter.formatWithoutResolvingStrings(String,Field)",0,1,1,1
"org.jabref.logic.bibtex.FieldWriter.shouldResolveStrings(Field)",3,2,3,3
"org.jabref.logic.bibtex.FieldWriter.write(Field,String)",2,3,3,3
"org.jabref.logic.bibtex.FieldWriter.writeStringLabel(StringBuilder,String,int,int,boolean,boolean)",2,1,1,3
"org.jabref.logic.bibtex.FieldWriter.writeText(StringBuilder,String,int,int)",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterPreferences.FieldWriterPreferences()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterPreferences.FieldWriterPreferences(boolean,List<Field>,FieldContentFormatterPreferences)",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterPreferences.getDoNotResolveStringsFor()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterPreferences.getFieldContentFormatterPreferences()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterPreferences.getLineLength()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterPreferences.isResolveStringsAllFields()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.hashEnclosedWordsGetRealStringsInMonthField()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.hashEnclosedWordsGetRealStringsInMonthFieldBecauseMonthIsStandardField()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.normalizeNewlineInAbstractField()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.preserveMultipleNewlinesInAbstractField()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.preserveNewlineInAbstractField()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.preserveNewlineInReviewField()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.removeWhitespaceFromNonMultiLineFields()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.reportUnbalancedBracing()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.reportUnbalancedBracingWithEscapedBraces()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.setUp()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.tolerateBalancedBrace()",0,1,1,1
"org.jabref.logic.bibtex.FieldWriterTests.tolerateEscapeCharacters()",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriter.FileFieldWriter()",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriter.encodeStringArray(String[])",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriter.encodeStringArray(String[][])",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriter.getStringRepresentation(LinkedFile)",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriter.getStringRepresentation(List<LinkedFile>)",1,1,2,2
"org.jabref.logic.bibtex.FileFieldWriter.quote(String)",5,2,3,6
"org.jabref.logic.bibtex.FileFieldWriterTest.getEncodingTestData()",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriterTest.testEncodeStringArray(String,String[][])",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriterTest.testFileFieldWriterGetStringRepresentation()",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriterTest.testQuoteAllCharacters()",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriterTest.testQuoteEmpty()",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriterTest.testQuoteNull()",0,1,1,1
"org.jabref.logic.bibtex.FileFieldWriterTest.testQuoteStandard()",0,1,1,1
"org.jabref.logic.bibtex.InvalidFieldValueException.InvalidFieldValueException(String)",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.BibDatabaseDiff(BibDatabaseContext,BibDatabaseContext)",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.compare(BibDatabaseContext,BibDatabaseContext)",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.compareEntries(List<BibEntry>,List<BibEntry>)",38,7,15,16
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.getBibStringDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.getEntryComparator()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.getEntryDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.getMetaDataDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff.getPreambleDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfDifferentEntriesWithSameDataReportsNoDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfEmptyDatabasesReportsNoDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfSameEntryReportsNoDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfThreeDifferentEntriesWithDifferentDataReportsDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfTwoDifferentEntriesWithDifferentDataReportsDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfTwoEntriesWithSameContentAndCrLfEndingsReportsNoDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfTwoEntriesWithSameContentAndLfEndingsReportsNoDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest.compareOfTwoEntriesWithSameContentAndMixedLineEndingsReportsNoDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibEntryDiff.BibEntryDiff(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibEntryDiff.getNewEntry()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibEntryDiff.getOriginalEntry()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibStringDiff.BibStringDiff(BibtexString,BibtexString)",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibStringDiff.compare(BibDatabase,BibDatabase)",13,2,9,9
"org.jabref.logic.bibtex.comparator.BibStringDiff.equals(Object)",4,3,3,5
"org.jabref.logic.bibtex.comparator.BibStringDiff.getNewString()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibStringDiff.getOriginalString()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibStringDiff.hashCode()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibStringDiffTest.compareTest()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibStringDiffTest.setUp()",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibtexStringComparator.BibtexStringComparator(boolean)",0,1,1,1
"org.jabref.logic.bibtex.comparator.BibtexStringComparator.compare(BibtexString,BibtexString)",7,2,2,5
"org.jabref.logic.bibtex.comparator.BibtexStringComparatorTest.test()",0,1,1,1
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparator.compare(BibEntry,BibEntry)",6,3,1,6
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparatorTest.isEqualForEntriesWithCrossRef()",0,1,1,1
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparatorTest.isEqualForEntriesWithoutCrossRef()",0,1,1,1
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparatorTest.isGreaterForEntriesWithoutCrossRef()",0,1,1,1
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparatorTest.isSmallerForEntriesWithCrossRef()",0,1,1,1
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparatorTest.setUp()",0,1,1,1
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparatorTest.tearDown()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparator.EntryComparator(boolean,boolean,Field)",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparator.EntryComparator(boolean,boolean,Field,Comparator<BibEntry>)",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparator.compare(BibEntry,BibEntry)",47,9,20,26
"org.jabref.logic.bibtex.comparator.EntryComparator.idCompare(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.bothEntriesHaveNotSetTheFieldToCompareAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.bothEntriesNumericAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.compareAuthorFieldBiggerAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.compareObjectsByKeyAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.compareObjectsByKeyWithBlank()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.compareObjectsByKeyWithNull()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.compareWithCrLfFields()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.compareWithLfFields()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.compareWithMixedLineEndings()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.firstEntryHasNotSetFieldToCompareAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.recognizeIdenticObjectsAsEqual()",0,1,1,1
"org.jabref.logic.bibtex.comparator.EntryComparatorTest.secondEntryHasNotSetFieldToCompareAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparator.FieldComparator(Field)",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparator.FieldComparator(OrFields,boolean)",1,1,1,2
"org.jabref.logic.bibtex.comparator.FieldComparator.FieldComparator(SortCriterion)",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparator.compare(BibEntry,BibEntry)",15,11,9,14
"org.jabref.logic.bibtex.comparator.FieldComparator.determineFieldType()",5,5,4,5
"org.jabref.logic.bibtex.comparator.FieldComparator.getCollator()",1,1,2,2
"org.jabref.logic.bibtex.comparator.FieldComparator.getFieldValue(BibEntry)",3,3,3,3
"org.jabref.logic.bibtex.comparator.FieldComparatorStack.FieldComparatorStack(List<? extends Comparator<? super T>>)",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorStack.compare(T,T)",3,3,2,3
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareMonthFieldBiggerAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareMonthFieldBiggerDescending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareMonthFieldEquality()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareMonthFieldIdentity()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareNumericFieldsBiggerDescending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareNumericalValues(int,String,String,String)",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareParsableWithNonParsableNumericFieldDescending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareStringFieldsBiggerAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareStringFieldsBiggerDescending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareStringFieldsEquality()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareStringFieldsIdentity()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareTypeFieldBiggerAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareTypeFieldBiggerDescending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareTypeFieldEquality()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareTypeFieldIdentity()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareYearFieldBiggerAscending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareYearFieldBiggerDescending()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareYearFieldEquality()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.compareYearFieldIdentity()",0,1,1,1
"org.jabref.logic.bibtex.comparator.FieldComparatorTest.provideArgumentsForNumericalComparison()",0,1,1,1
"org.jabref.logic.bibtex.comparator.GroupDiff.GroupDiff(GroupTreeNode,GroupTreeNode)",0,1,1,1
"org.jabref.logic.bibtex.comparator.GroupDiff.compare(MetaData,MetaData)",2,2,2,2
"org.jabref.logic.bibtex.comparator.GroupDiff.getNewGroupRoot()",0,1,1,1
"org.jabref.logic.bibtex.comparator.GroupDiff.getOriginalGroupRoot()",0,1,1,1
"org.jabref.logic.bibtex.comparator.GroupDiffTest.compareEmptyGroups()",0,1,1,1
"org.jabref.logic.bibtex.comparator.GroupDiffTest.compareGroupWithItself()",0,1,1,1
"org.jabref.logic.bibtex.comparator.GroupDiffTest.compareWithChangedGroup()",0,1,1,1
"org.jabref.logic.bibtex.comparator.GroupDiffTest.setup()",0,1,1,1
"org.jabref.logic.bibtex.comparator.IdComparator.compare(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.bibtex.comparator.MetaDataDiff.MetaDataDiff(MetaData,MetaData)",0,1,1,1
"org.jabref.logic.bibtex.comparator.MetaDataDiff.compare(MetaData,MetaData)",2,2,2,2
"org.jabref.logic.bibtex.comparator.MetaDataDiff.getDifferences(PreferencesService)",12,1,13,13
"org.jabref.logic.bibtex.comparator.MetaDataDiff.getGroupDifferences()",0,1,1,1
"org.jabref.logic.bibtex.comparator.MetaDataDiff.getNewMetaData()",0,1,1,1
"org.jabref.logic.bibtex.comparator.MetaDataDiffTest.compareWithSameContentSelectorsDoesNotReportAnyDiffs()",0,1,1,1
"org.jabref.logic.bibtex.comparator.PreambleDiff.PreambleDiff(String,String)",0,1,1,1
"org.jabref.logic.bibtex.comparator.PreambleDiff.compare(BibDatabaseContext,BibDatabaseContext)",2,2,2,2
"org.jabref.logic.bibtex.comparator.PreambleDiff.equals(Object)",4,3,3,5
"org.jabref.logic.bibtex.comparator.PreambleDiff.getNewPreamble()",0,1,1,1
"org.jabref.logic.bibtex.comparator.PreambleDiff.getOriginalPreamble()",0,1,1,1
"org.jabref.logic.bibtex.comparator.PreambleDiff.hashCode()",0,1,1,1
"org.jabref.logic.bibtex.comparator.PreambleDiffTest.compareDifferentPreambleTest()",0,1,1,1
"org.jabref.logic.bibtex.comparator.PreambleDiffTest.compareSamePreambleTest()",0,1,1,1
"org.jabref.logic.bibtex.comparator.PreambleDiffTest.setUp()",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChanger.BibtexCaseChanger()",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE.FORMAT_MODE(char)",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE.asChar()",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE.getFormatModeForBSTFormat(char)",3,3,1,3
"org.jabref.logic.bst.BibtexCaseChanger.changeCase(String,FORMAT_MODE)",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChanger.convertAccented(char[],int,String,StringBuilder,FORMAT_MODE)",12,1,5,8
"org.jabref.logic.bst.BibtexCaseChanger.convertCharIfBraceLevelIsZero(char[],int,StringBuilder,FORMAT_MODE)",9,1,5,9
"org.jabref.logic.bst.BibtexCaseChanger.convertNonControl(char[],int,StringBuilder,FORMAT_MODE)",1,1,1,3
"org.jabref.logic.bst.BibtexCaseChanger.convertSpecialChar(StringBuilder,char[],int,FORMAT_MODE)",11,1,4,9
"org.jabref.logic.bst.BibtexCaseChanger.doChangeCase(String,FORMAT_MODE)",22,7,12,14
"org.jabref.logic.bst.BibtexCaseChanger.findSpecialChar(char[],int)",23,10,10,17
"org.jabref.logic.bst.BibtexCaseChangersTest.provideStringsForAllLowers()",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.provideStringsForAllUppers()",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.provideStringsForTitleLowers()",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.provideTitleCaseAllLowers()",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.testChangeCaseAllLowers(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.testChangeCaseAllUppers(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.testChangeCaseTitleLowers(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.testTitleCaseAllLowers(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexCaseChangersTest.testTitleCaseAllUppers()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatter.BibtexNameFormatter()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatter.consumeToMatchingBrace(StringBuilder,char[],int)",7,4,4,5
"org.jabref.logic.bst.BibtexNameFormatter.formatName(Author,String,Warn)",154,8,38,50
"org.jabref.logic.bst.BibtexNameFormatter.formatName(String,int,String,Warn)",2,2,3,3
"org.jabref.logic.bst.BibtexNameFormatter.getFirstCharOfString(String)",6,4,4,6
"org.jabref.logic.bst.BibtexNameFormatter.numberOfChars(String,int)",21,1,1,13
"org.jabref.logic.bst.BibtexNameFormatterTest.assertNameFormat(String,String,int,String)",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.assertNameFormatA(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.assertNameFormatB(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.assertNameFormatC(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.matchingBraceConsumedForBracesInWords()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.matchingBraceConsumedForCompleteWords()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.testConsumeToMatchingBrace()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.testFormatName()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.testGetFirstCharOfString()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.testNumberOfChars()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.testUmlautsAbbreviations()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.testUmlautsAbbreviationsWithQuestionMark()",0,1,1,1
"org.jabref.logic.bst.BibtexNameFormatterTest.testUmlautsFullNames()",0,1,1,1
"org.jabref.logic.bst.BibtexPurify.BibtexPurify()",0,1,1,1
"org.jabref.logic.bst.BibtexPurify.purify(String,Warn)",46,6,16,25
"org.jabref.logic.bst.BibtexPurifyTest.provideTestStrings()",0,1,1,1
"org.jabref.logic.bst.BibtexPurifyTest.testPurify(String,String)",0,1,1,1
"org.jabref.logic.bst.BibtexTextPrefix.BibtexTextPrefix()",0,1,1,1
"org.jabref.logic.bst.BibtexTextPrefix.textPrefix(int,String,Warn)",30,1,7,15
"org.jabref.logic.bst.BibtexWidth.BibtexWidth()",0,1,1,1
"org.jabref.logic.bst.BibtexWidth.getCharWidth(char)",3,2,1,3
"org.jabref.logic.bst.BibtexWidth.getSpecialCharWidth(char[],int)",16,7,1,12
"org.jabref.logic.bst.BibtexWidth.width(String)",57,4,15,23
"org.jabref.logic.bst.BibtexWidthTest.provideTestGetCharWidth()",0,1,1,1
"org.jabref.logic.bst.BibtexWidthTest.provideTestWidth()",0,1,1,1
"org.jabref.logic.bst.BibtexWidthTest.testGetCharWidth(int,Character)",0,1,1,1
"org.jabref.logic.bst.BibtexWidthTest.testWidth(int,String)",0,1,1,1
"org.jabref.logic.bst.BstPreviewLayout.BstPreviewLayout(Path)",2,2,3,3
"org.jabref.logic.bst.BstPreviewLayout.generatePreview(BibEntry,BibDatabase)",1,2,1,2
"org.jabref.logic.bst.BstPreviewLayout.getDisplayName()",0,1,1,1
"org.jabref.logic.bst.BstPreviewLayout.getName()",0,1,1,1
"org.jabref.logic.bst.BstPreviewLayoutTest.generatePreviewForSimpleEntryUsingAbbr()",0,1,1,1
"org.jabref.logic.bst.BstPreviewLayoutTest.generatePreviewForSliceTheoremPaperUsingAbbr()",0,1,1,1
"org.jabref.logic.bst.BstPreviewLayoutTest.generatePreviewForSliceTheoremPaperUsingIEEE()",0,1,1,1
"org.jabref.logic.bst.BstPreviewLayoutTest.getSliceTheoremPaper()",0,1,1,1
"org.jabref.logic.bst.BstPreviewLayoutTest.monthMayIsCorrectlyRendered()",0,1,1,1
"org.jabref.logic.bst.ChangeCaseFunction.ChangeCaseFunction(VM)",0,1,1,1
"org.jabref.logic.bst.ChangeCaseFunction.execute(BstEntry)",4,4,2,5
"org.jabref.logic.bst.FormatNameFunction.FormatNameFunction(VM)",0,1,1,1
"org.jabref.logic.bst.FormatNameFunction.execute(BstEntry)",7,5,3,7
"org.jabref.logic.bst.PurifyFunction.PurifyFunction(VM)",0,1,1,1
"org.jabref.logic.bst.PurifyFunction.execute(BstEntry)",2,3,2,3
"org.jabref.logic.bst.TestVM.bibtexString2BibtexEntry(String)",0,1,1,1
"org.jabref.logic.bst.TestVM.t1BibtexEntry()",0,1,1,1
"org.jabref.logic.bst.TestVM.t1BibtexString()",0,1,1,1
"org.jabref.logic.bst.TestVM.testAbbrv()",0,1,1,1
"org.jabref.logic.bst.TestVM.testBuildIn()",0,1,1,1
"org.jabref.logic.bst.TestVM.testCallType()",0,1,1,1
"org.jabref.logic.bst.TestVM.testChangeCase()",0,1,1,1
"org.jabref.logic.bst.TestVM.testDuplicateEmptyPopSwapIf()",0,1,1,1
"org.jabref.logic.bst.TestVM.testEmpty()",0,1,1,1
"org.jabref.logic.bst.TestVM.testFormatName()",0,1,1,1
"org.jabref.logic.bst.TestVM.testFormatName2()",0,1,1,1
"org.jabref.logic.bst.TestVM.testHypthenatedName()",0,1,1,1
"org.jabref.logic.bst.TestVM.testIterate()",2,1,2,2
"org.jabref.logic.bst.TestVM.testLabel()",0,1,1,1
"org.jabref.logic.bst.TestVM.testMissing()",0,1,1,1
"org.jabref.logic.bst.TestVM.testNumNames()",0,1,1,1
"org.jabref.logic.bst.TestVM.testNumNames2()",0,1,1,1
"org.jabref.logic.bst.TestVM.testQuote()",0,1,1,1
"org.jabref.logic.bst.TestVM.testSort()",0,1,1,1
"org.jabref.logic.bst.TestVM.testSubstring()",0,1,1,1
"org.jabref.logic.bst.TestVM.testTextLength()",0,1,1,1
"org.jabref.logic.bst.TestVM.testType()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMArithmetic()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMArithmetic2()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMChrToInt()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMChrToIntIntToChr()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMExecuteSimple()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMExecuteSimple2()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMFunction1()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMIfSkipPop()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMIntToStr()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMSimple()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMStringOps1()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVMSwap()",0,1,1,1
"org.jabref.logic.bst.TestVM.testVariables()",0,1,1,1
"org.jabref.logic.bst.TestVM.testWhile()",0,1,1,1
"org.jabref.logic.bst.TestVM.testWidth()",0,1,1,1
"org.jabref.logic.bst.TextPrefixFunction.TextPrefixFunction(VM)",0,1,1,1
"org.jabref.logic.bst.TextPrefixFunction.execute(BstEntry)",3,4,3,4
"org.jabref.logic.bst.TextPrefixFunctionTest.assertPrefix(String,String)",0,1,1,1
"org.jabref.logic.bst.TextPrefixFunctionTest.testPrefix()",0,1,1,1
"org.jabref.logic.bst.VM.BstEntry.BstEntry(BibEntry)",0,1,1,1
"org.jabref.logic.bst.VM.Identifier.Identifier(String)",0,1,1,1
"org.jabref.logic.bst.VM.Identifier.getName()",0,1,1,1
"org.jabref.logic.bst.VM.MacroFunction.MacroFunction(String)",0,1,1,1
"org.jabref.logic.bst.VM.MacroFunction.execute(BstEntry)",0,1,1,1
"org.jabref.logic.bst.VM.StackFunction.StackFunction(Tree)",0,1,1,1
"org.jabref.logic.bst.VM.StackFunction.execute(BstEntry)",9,2,4,8
"org.jabref.logic.bst.VM.StackFunction.getTree()",0,1,1,1
"org.jabref.logic.bst.VM.VM(CharStream)",0,1,1,1
"org.jabref.logic.bst.VM.VM(CommonTree)",97,36,10,55
"org.jabref.logic.bst.VM.VM(File)",0,1,1,1
"org.jabref.logic.bst.VM.VM(String)",0,1,1,1
"org.jabref.logic.bst.VM.Variable.Variable(String)",0,1,1,1
"org.jabref.logic.bst.VM.Variable.getName()",0,1,1,1
"org.jabref.logic.bst.VM.addPeriodFunction()",6,3,3,5
"org.jabref.logic.bst.VM.assign(BstEntry,Object,Object)",12,7,8,11
"org.jabref.logic.bst.VM.charStream2CommonTree(CharStream)",0,1,1,1
"org.jabref.logic.bst.VM.entry(Tree)",10,1,8,8
"org.jabref.logic.bst.VM.execute(String,BstEntry)",10,8,8,8
"org.jabref.logic.bst.VM.execute(Tree)",0,1,1,1
"org.jabref.logic.bst.VM.executeInContext(Object,BstEntry)",2,1,3,3
"org.jabref.logic.bst.VM.function(Tree)",0,1,1,1
"org.jabref.logic.bst.VM.getEntries()",0,1,1,1
"org.jabref.logic.bst.VM.getFunctions()",0,1,1,1
"org.jabref.logic.bst.VM.getIntegers()",0,1,1,1
"org.jabref.logic.bst.VM.getStack()",0,1,1,1
"org.jabref.logic.bst.VM.getStrings()",0,1,1,1
"org.jabref.logic.bst.VM.integers(Tree)",1,1,2,2
"org.jabref.logic.bst.VM.iterate(Tree)",1,1,2,2
"org.jabref.logic.bst.VM.macro(Tree)",0,1,1,1
"org.jabref.logic.bst.VM.push(Identifier)",0,1,1,1
"org.jabref.logic.bst.VM.push(Integer)",0,1,1,1
"org.jabref.logic.bst.VM.push(String)",0,1,1,1
"org.jabref.logic.bst.VM.push(Tree)",0,1,1,1
"org.jabref.logic.bst.VM.read(BibDatabase)",18,3,7,8
"org.jabref.logic.bst.VM.reverse(Tree)",1,1,2,2
"org.jabref.logic.bst.VM.run(BibDatabase)",0,1,1,1
"org.jabref.logic.bst.VM.run(Collection<BibEntry>)",0,1,1,1
"org.jabref.logic.bst.VM.run(Collection<BibEntry>,BibDatabase)",4,1,3,13
"org.jabref.logic.bst.VM.sort()",0,1,1,1
"org.jabref.logic.bst.VM.strings(Tree)",1,1,2,2
"org.jabref.logic.bst.VM.substringFunction()",7,3,2,9
"org.jabref.logic.bst.VM.textLengthFunction()",31,3,1,14
"org.jabref.logic.bst.VM.warn(String)",0,1,1,1
"org.jabref.logic.bst.VM.whileFunction(BstEntry)",10,6,2,9
"org.jabref.logic.bst.VMException.VMException(String)",0,1,1,1
"org.jabref.logic.bst.WidthFunction.WidthFunction(VM)",0,1,1,1
"org.jabref.logic.bst.WidthFunction.execute(BstEntry)",2,3,2,3
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.addCitationKeyPattern(EntryType,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.equals(Object)",4,3,3,5
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.getAllKeys()",0,1,1,1
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.getDefaultValue()",0,1,1,1
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.getPatterns()",0,1,1,1
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.getValue(EntryType)",4,3,4,4
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.hashCode()",0,1,1,1
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.isDefaultValue(EntryType)",0,1,1,1
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.setDefaultValue(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.split(String)",1,1,2,2
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern.toString()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.BracketedPattern()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.BracketedPattern(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.Institution.findTypes(List<String>)",7,1,7,7
"org.jabref.logic.citationkeypattern.BracketedPattern.allAuthors(AuthorList)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.appendQuote(StringBuilder,StringTokenizer)",2,1,3,3
"org.jabref.logic.citationkeypattern.BracketedPattern.applyModifiers(String,List<String>,int,Function<String, String>)",22,1,12,12
"org.jabref.logic.citationkeypattern.BracketedPattern.authAuthEa(AuthorList)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.authEtal(AuthorList,String,String)",2,2,2,2
"org.jabref.logic.citationkeypattern.BracketedPattern.authIniN(AuthorList,int)",8,3,5,6
"org.jabref.logic.citationkeypattern.BracketedPattern.authN(AuthorList,int)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.authNofMth(AuthorList,int,int)",3,2,4,5
"org.jabref.logic.citationkeypattern.BracketedPattern.authorsAlpha(AuthorList)",12,1,7,7
"org.jabref.logic.citationkeypattern.BracketedPattern.authshort(AuthorList)",7,1,5,6
"org.jabref.logic.citationkeypattern.BracketedPattern.camelizeSignificantWordsInTitle(String)",5,1,4,4
"org.jabref.logic.citationkeypattern.BracketedPattern.camelizeTitle(String)",3,1,3,3
"org.jabref.logic.citationkeypattern.BracketedPattern.contentBetweenBrackets(StringTokenizer,String)",10,1,9,9
"org.jabref.logic.citationkeypattern.BracketedPattern.createAuthorList(String)",3,1,2,2
"org.jabref.logic.citationkeypattern.BracketedPattern.expand(BibEntry)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.expand(BibEntry,BibDatabase)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.expand(BibEntry,Character,BibDatabase)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.expandBracketContent(Character,BibEntry,BibDatabase)",2,1,2,2
"org.jabref.logic.citationkeypattern.BracketedPattern.expandBrackets(String,Character,BibEntry,BibDatabase)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.expandBrackets(String,Function<String, String>)",7,1,6,6
"org.jabref.logic.citationkeypattern.BracketedPattern.firstAuthor(AuthorList)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.firstAuthorForenameInitials(AuthorList)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.firstAuthorVonAndLast(AuthorList)",1,1,2,2
"org.jabref.logic.citationkeypattern.BracketedPattern.firstPage(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.formatTitle(String)",8,3,6,7
"org.jabref.logic.citationkeypattern.BracketedPattern.generateInstitutionKey(String)",54,4,21,27
"org.jabref.logic.citationkeypattern.BracketedPattern.getCamelizedTitle(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.getFieldValue(BibEntry,String,Character,BibDatabase)",56,49,55,56
"org.jabref.logic.citationkeypattern.BracketedPattern.getTitleWords(int,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.getTitleWordsWithSpaces(int,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.getValidInstitutionNameParts(String)",6,1,8,8
"org.jabref.logic.citationkeypattern.BracketedPattern.isInstitution(Author)",1,1,6,6
"org.jabref.logic.citationkeypattern.BracketedPattern.joinAuthorsOnLastName(AuthorList,int,String,String)",1,1,1,2
"org.jabref.logic.citationkeypattern.BracketedPattern.keepLettersAndDigitsOnly(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.lastAuthor(AuthorList)",1,2,1,2
"org.jabref.logic.citationkeypattern.BracketedPattern.lastAuthorForenameInitials(AuthorList)",1,2,1,2
"org.jabref.logic.citationkeypattern.BracketedPattern.lastPage(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.nAuthors(AuthorList,int)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.noOtherInstitutionKeyWord(String)",1,1,4,4
"org.jabref.logic.citationkeypattern.BracketedPattern.oneAuthorPlusInitials(AuthorList)",2,2,2,3
"org.jabref.logic.citationkeypattern.BracketedPattern.pagePrefix(String)",2,2,2,2
"org.jabref.logic.citationkeypattern.BracketedPattern.parseFieldAndModifiers(String)",15,1,8,13
"org.jabref.logic.citationkeypattern.BracketedPattern.removeSmallWords(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPattern.toString()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.authorPatternTreatsVonNamePrefixCorrectly()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.bibentryExpansionTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.bibtexkeyPatternExpandsToCitationKey()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.bracketedExpressionDefaultConstructorTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.citationKeyPatternExpandsToCitationKey()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.citationKeyPatternWithEmptyModifierExpandsToBibTeXKey()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.databaseWithStringsExpansionTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.emptyDatabaseExpansionTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.emptyPatternAndEmptyModifierExpandsToEmptyString()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.emptyPatternAndValidModifierExpandsToEmptyString()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.entryTypeExpansionLowercaseTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.entryTypeExpansionTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsChainsTwoTruncateModifiers()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsDoesNotTruncateWithoutAnArgumentToTruncateModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsEmptyStringFromEmptyBrackets()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsInstitutionAbbreviationForAuthorContainingUnion()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsInstitutionAbbreviationFromProvidedAbbreviation()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsLastNameForAuthorStartingWithOnlyLastNameStartingWithLowerCase()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsLastNameWithChineseCharacters()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsUnmodifiedStringFromLongFirstPageNumber()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsUnmodifiedStringFromLongLastPageNumber()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsWithAuthorStartingWithBrackets()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsWithFallback(String,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsWithModifierContainingRegexCharacterClass()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsWithTestCasesFromRegExpBasedFileFinder()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.expandBracketsWithoutProtectiveBracesUsingUnprotectTermsModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.lowerFormatterWorksOnVonNamePrefixes()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.nullBibentryBracketExpansionTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.nullDatabaseExpansionTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.provideArgumentsForFallback()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.pureauthReturnsAuthorIfEditorIsAbsent()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.pureauthReturnsAuthorIfEditorIsPresent()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.pureauthReturnsEmptyStringIfAuthorIsAbsent()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.pureauthReturnsEmptyStringIfAuthorIsAbsentAndEditorIsPresent()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.regularExpressionReplace()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.regularExpressionWithBrackets()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.setUp()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.suppliedBibentryBracketExpansionTest()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.testEmptyBrackets()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.testResolvedFieldAndFormat()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.testResolvedParentNotInDatabase()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.unbalancedBracketsExpandToSomething()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.unbalancedLastBracketExpandsToSomething()",0,1,1,1
"org.jabref.logic.citationkeypattern.BracketedPatternTest.unknownKeyExpandsToEmptyString()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.CitationKeyGenerator(AbstractCitationKeyPattern,BibDatabase,CitationKeyPatternPreferences)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.CitationKeyGenerator(BibDatabaseContext,CitationKeyPatternPreferences)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.appendLettersToKey(String,String)",11,1,3,8
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.cleanKey(String,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.createCitationKeyFromPattern(BibEntry)",1,2,1,2
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.expandBracketContent(BibEntry)",2,1,2,2
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.generateAndSetKey(BibEntry)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.generateKey(BibEntry)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.generateKey(BibEntry,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.generateKey(BibEntry,String,BibDatabase)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.getAppendix(int)",3,2,2,2
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.removeDefaultUnwantedCharacters(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.removeUnwantedCharacters(String,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGenerator.replaceWithRegex(String)",4,1,4,4
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.authAuthEa()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.authNM()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.authorsAlpha()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.camel()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.createABibEntryAuthor(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.crossrefkeywordNKeywordsSeparatedBySpace()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.crossrefkeywordsNKeywordsSeparatedBySpace()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.firstAuthorForenameInitials()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.firstAuthorVonAndLast()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.firstAuthorVonAndLastNoVonInName()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKey(BibEntry,String)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKey(BibEntry,String,BibDatabase)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyAbbreviateCorporateAuthorDepartmentWithoutAcademicInstitute()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyAbbreviateCorporateAuthorSchoolWithoutAcademicInstitute()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyCorrectKeyLengthWithAuthNofMthAndUnicode()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyCorrectKeyLengthWithTruncateModifierAndUnicode()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyDoesNotModifyTheKeyWithIncorrectRegexReplacement()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyStripsApostropheFromTitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyStripsColonFromTitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithAuthUpperYearShortTitleCapitalizeModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithFallbackField()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithMinusInCitationStyleOutsideAField()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithModifierContainingRegexCharacterClass()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithNonNormalizedUnicode()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithOneModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithShortTitleCapitalizeModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithShortTitleTitleCaseModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithTitleCapitalizeModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithTitleSentenceCaseModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithTitleTitleCaseModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithTwoModifiers()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithWithFirstNCharacters()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.generateKeyWithYearAuthUpperTitleSentenceCaseModifier()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.keywordNKeywordsSeparatedBySpace()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.keywordsNKeywordsSeparatedBySpace()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.lastAuthor()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.lastAuthorForenameInitials()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.oneAuthorPlusIni()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.setUp()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.shortTitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAllAuthors()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAndAuthorNames()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAndInAuthorName()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testApplyModifiers()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAuthEaEmptyReturnsEmpty()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAuthEtAl()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAuthIniN()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAuthIniNEmptyReturnsEmpty()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAuthShort()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testAuthShortEmptyReturnsEmpty()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testCheckLegalKey()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testCheckLegalKeyNoUnwantedCharacters()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testCheckLegalKeyUnwantedCharacters()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testCheckLegalNullInNullOut()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testCrossrefAndAuthorNames()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testCrossrefAndInAuthorNames()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testDepartment()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testFirstAuthor()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testFirstPage()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testFirstPageNull()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testInstituteOfTechnology()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testLastPage()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testLastPageNull()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testMakeLabelAndCheckLegalKeys()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testMakeLabelAndCheckLegalKeysAccentGrave()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testNAuthors1()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testNAuthors1EmptyReturnEmpty()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testNAuthors3()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testPagePrefix()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testPagePrefixNull()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testSchool()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testSpecialLatexCharacterInAuthorName()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testUniversity()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testcrossrefDepartment()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testcrossrefInstituteOfTechnology()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testcrossrefSchool()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testcrossrefShorttitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testcrossrefShorttitleInitials()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.testcrossrefUniversity()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.title()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest.veryShortTitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.CitationKeyPatternPreferences(boolean,boolean,boolean,KeySuffix,String,String,String,GlobalCitationKeyPattern,Character)",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.getKeyPattern()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.getKeyPatternRegex()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.getKeyPatternReplacement()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.getKeySuffix()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.getKeywordDelimiter()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.getUnwantedCharacters()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.shouldAvoidOverwriteCiteKey()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.shouldGenerateCiteKeysBeforeSaving()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.shouldWarnBeforeOverwriteCiteKey()",0,1,1,1
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.withWarnBeforeOverwriteCiteKey(boolean)",0,1,1,1
"org.jabref.logic.citationkeypattern.DatabaseCitationKeyPattern.DatabaseCitationKeyPattern(GlobalCitationKeyPattern)",0,1,1,1
"org.jabref.logic.citationkeypattern.DatabaseCitationKeyPattern.getLastLevelCitationKeyPattern(EntryType)",0,1,1,1
"org.jabref.logic.citationkeypattern.GlobalCitationKeyPattern.GlobalCitationKeyPattern(List<String>)",0,1,1,1
"org.jabref.logic.citationkeypattern.GlobalCitationKeyPattern.fromPattern(String)",0,1,1,1
"org.jabref.logic.citationkeypattern.GlobalCitationKeyPattern.getLastLevelCitationKeyPattern(EntryType)",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKey()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyAlreadyExistsDuplicatesStartAtA()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyAlreadyExistsDuplicatesStartAtB()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyAlreadyExistsManyDuplicates()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyAlwaysLetter()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyAlwaysLetterAlreadyExistsDuplicatesStartAtB()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyFirstTwoAlreadyExists()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyFixedValue()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateDefaultKeyStartDuplicatesAtB()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthCapitalizeModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthIni()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthIniMany()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthLowerModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthN()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthNM()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthNMLargeM()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthNMLargeMReallyReturnsEmptyString()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthNMLargeN()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthNShortName()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthSentenceCaseModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthTitleCaseModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyAuthUpperModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyCamel()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyEmptyField()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyEmptyFieldDefaultText()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyEmptyFieldNoColonInDefaultText()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyRegExReplace()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShortYear()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShorttitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShorttitleCapitalizeModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShorttitleINI()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShorttitleLowerModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShorttitleSentenceCaseModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShorttitleTitleCaseModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyShorttitleUpperModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleAbbr()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleCapitalize()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleCapitalizeAbbr()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleRegexe()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleSentenceCase()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleSentenceCaseAbbr()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleTitleCase()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyTitleTitleCaseAbbr()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyVeryshorttitle()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyVeryshorttitleCapitalizeModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyVeryshorttitleLowerModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyVeryshorttitleSentenceCaseModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyVeryshorttitleTitleCaseModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.generateKeyVeryshorttitleUpperModified()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest.setUp()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithoutDatabaseTest.makeEditorLabelForFileSearch()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithoutDatabaseTest.makeLabelForFileSearch()",0,1,1,1
"org.jabref.logic.citationkeypattern.MakeLabelWithoutDatabaseTest.setUp()",0,1,1,1
"org.jabref.logic.citationstyle.CSLAdapter.JabRefItemDataProvider.bibEntryToCSLItemData(BibEntry)",4,1,3,3
"org.jabref.logic.citationstyle.CSLAdapter.JabRefItemDataProvider.getIds()",0,1,1,1
"org.jabref.logic.citationstyle.CSLAdapter.JabRefItemDataProvider.retrieveItem(String)",0,1,1,1
"org.jabref.logic.citationstyle.CSLAdapter.JabRefItemDataProvider.setData(List<BibEntry>)",0,1,1,1
"org.jabref.logic.citationstyle.CSLAdapter.initialize(String,CitationStyleOutputFormat)",3,1,3,4
"org.jabref.logic.citationstyle.CSLAdapter.makeBibliography(List<BibEntry>,String,CitationStyleOutputFormat)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.CitationStyle(String,String,String)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.createCitationStyleFromFile(String)",6,2,5,6
"org.jabref.logic.citationstyle.CitationStyle.createCitationStyleFromSource(String,String)",4,2,6,6
"org.jabref.logic.citationstyle.CitationStyle.discoverCitationStyles()",2,2,2,3
"org.jabref.logic.citationstyle.CitationStyle.discoverCitationStylesInPath(Path)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.equals(Object)",3,3,2,4
"org.jabref.logic.citationstyle.CitationStyle.getDefault()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.getFilePath()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.getSource()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.getTitle()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.hashCode()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.isCitationStyleFile(String)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyle.stripInvalidProlog(String)",2,2,2,2
"org.jabref.logic.citationstyle.CitationStyle.toString()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleCache.BibDatabaseEntryListener.listen(EntriesRemovedEvent)",1,1,2,2
"org.jabref.logic.citationstyle.CitationStyleCache.BibDatabaseEntryListener.listen(EntryChangedEvent)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleCache.CitationStyleCache(BibDatabaseContext)",3,2,2,2
"org.jabref.logic.citationstyle.CitationStyleCache.getCitationFor(BibEntry)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleCache.setCitationStyle(PreviewLayout)",1,1,2,2
"org.jabref.logic.citationstyle.CitationStyleCacheTest.getCitationForTest()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGenerator.CitationStyleGenerator()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGenerator.generateCitation(BibEntry,CitationStyle)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGenerator.generateCitation(BibEntry,String)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGenerator.generateCitation(BibEntry,String,CitationStyleOutputFormat)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGenerator.generateCitations(List<BibEntry>,String,CitationStyleOutputFormat)",3,1,4,4
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testAsciiDocFormat()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testHandleAmpersand()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testHandleDiacritics()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testHtmlFormat()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testIgnoreCarriageReturnNewLine()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testIgnoreNewLine()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testMissingCitationStyle()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testRtfFormat()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testTextFormat()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest.testXslFoFormat()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleOutputFormat.CitationStyleOutputFormat(String,String)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleOutputFormat.getFormat()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleOutputFormat.getLineSeparator()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleOutputFormat.toString()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStylePreviewLayout.CitationStylePreviewLayout(CitationStyle)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStylePreviewLayout.generatePreview(BibEntry,BibDatabase)",0,1,1,1
"org.jabref.logic.citationstyle.CitationStylePreviewLayout.getDisplayName()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStylePreviewLayout.getFilePath()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStylePreviewLayout.getName()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStylePreviewLayout.getSource()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleTest.getDefault()",0,1,1,1
"org.jabref.logic.citationstyle.CitationStyleTest.testDefaultCitation()",0,1,1,1
"org.jabref.logic.citationstyle.JabRefLocaleProvider.retrieveLocale(String)",4,2,1,3
"org.jabref.logic.cleanup.BibtexBiblatexRoundtripTest.roundTripBiblatexToBibtexIsIdentity()",0,1,1,1
"org.jabref.logic.cleanup.BibtexBiblatexRoundtripTest.roundTripBibtexToBiblatexIsIdentity()",0,1,1,1
"org.jabref.logic.cleanup.BibtexBiblatexRoundtripTest.setUp()",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreferences.CleanupPreferences(LayoutFormatterPreferences,FilePreferences)",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreferences.getFilePreferences()",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreferences.getLayoutFormatterPreferences()",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.CleanupPreset(CleanupStep)",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.CleanupPreset(FieldFormatterCleanups)",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.CleanupPreset(Set<CleanupStep>)",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.CleanupPreset(Set<CleanupStep>,FieldFormatterCleanups)",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.getActiveJobs()",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.getFormatterCleanups()",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.isActive(CleanupStep)",0,1,1,1
"org.jabref.logic.cleanup.CleanupPreset.isRenamePDFActive()",1,1,2,2
"org.jabref.logic.cleanup.CleanupWorker.CleanupWorker(BibDatabaseContext,CleanupPreferences,TimestampPreferences)",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorker.cleanup(CleanupPreset,BibEntry)",1,1,2,2
"org.jabref.logic.cleanup.CleanupWorker.determineCleanupActions(CleanupPreset)",2,1,3,3
"org.jabref.logic.cleanup.CleanupWorker.toJob(CleanupStep)",1,14,1,14
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupCasesAddsBracketAroundAluminiumGalliumArsenid()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupDatesConvertsToCorrectFormat()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupDoesNothingByDefault(Path)",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupDoiFindsDoiInURLFieldAndMoveItToDOIField()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupDoiRemovesLeadingHttp()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupDoiReturnsChangeWhenDoiInURLField()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupDoiReturnsChanges()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupFixFileLinksMovesSingleDescriptionToLink()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupHtmlToLatexConvertsEpsilonToLatex()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupLatexMergesTwoLatexMathEnvironments()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupMonthChangesNumberToBibtex()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupMoveFilesMovesFileFromSubfolder(Path)",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupNullEntryThrowsException()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupPageNumbersConvertsSingleDashToDouble()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupRelativePathsConvertAbsoluteToRelativePath()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupRenamePdfRenamesRelativeFile()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupUnitsConvertsOneAmpereToLatex()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupWithDisabledFieldFormatterChangesNothing()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.cleanupWithNullPresetThrowsException()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.convertToBiblatexMovesAddressToLocation()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.convertToBiblatexMovesJournalToJournalTitle()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.setUp(Path)",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.upgradeExternalLinksMoveFromPdfToFile()",0,1,1,1
"org.jabref.logic.cleanup.CleanupWorkerTest.upgradeExternalLinksMoveFromPsToFile()",0,1,1,1
"org.jabref.logic.cleanup.Cleanups.Cleanups()",0,1,1,1
"org.jabref.logic.cleanup.Cleanups.getBuiltInFormatters()",0,1,1,1
"org.jabref.logic.cleanup.Cleanups.getFormatterFromString(String)",3,3,2,3
"org.jabref.logic.cleanup.Cleanups.parse(List<String>)",3,2,3,3
"org.jabref.logic.cleanup.Cleanups.parse(String)",14,5,6,10
"org.jabref.logic.cleanup.ConvertToBiblatexCleanup.cleanup(BibEntry)",10,1,6,6
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest.cleanupMovesJournalToJournaltitle()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest.cleanupMovesYearMonthToDate()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest.cleanupWithDateAlreadyPresentAndDifferentFromMonthDoesNothing()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest.cleanupWithDateAlreadyPresentAndDifferentFromYearDoesNothing()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest.cleanupWithDateAlreadyPresentAndEqualsToYearAndMonth()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest.cleanupWithEmptyDateDoesNothing()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest.setUp()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBibtexCleanup.cleanup(BibEntry)",11,1,7,7
"org.jabref.logic.cleanup.ConvertToBibtexCleanupTest.cleanUpDoesntMoveFileField()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBibtexCleanupTest.cleanupMovesDateToYearAndMonth()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBibtexCleanupTest.cleanupMovesJournaltitleToJournal()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBibtexCleanupTest.cleanupWithYearAlreadyPresentDoesNothing()",0,1,1,1
"org.jabref.logic.cleanup.ConvertToBibtexCleanupTest.setUp()",0,1,1,1
"org.jabref.logic.cleanup.DoiCleanup.cleanup(BibEntry)",15,1,7,7
"org.jabref.logic.cleanup.DoiCleanup.removeFieldValue(BibEntry,Field,List<FieldChange>)",0,1,1,1
"org.jabref.logic.cleanup.DoiCleanupTest.provideDoiForAllLowers()",0,1,1,1
"org.jabref.logic.cleanup.DoiCleanupTest.testChangeDoi(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.cleanup.EprintCleanup.cleanup(BibEntry)",6,1,4,4
"org.jabref.logic.cleanup.EprintCleanupTest.cleanupCompleteEntry()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanup.FieldFormatterCleanup(Field,Formatter)",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanup.cleanup(BibEntry)",3,3,3,3
"org.jabref.logic.cleanup.FieldFormatterCleanup.cleanupAllFields(BibEntry)",3,1,3,3
"org.jabref.logic.cleanup.FieldFormatterCleanup.cleanupAllTextFields(BibEntry)",3,1,3,3
"org.jabref.logic.cleanup.FieldFormatterCleanup.cleanupSingleField(Field,BibEntry)",7,3,4,5
"org.jabref.logic.cleanup.FieldFormatterCleanup.equals(Object)",3,3,3,4
"org.jabref.logic.cleanup.FieldFormatterCleanup.getField()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanup.getFormatter()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanup.hashCode()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanup.toString()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanupTest.setUp()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanupTest.testCleanupAllFieldsIgnoresKeyField()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanupTest.testCleanupAllTextFieldsIgnoresKeyField()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanupTest.testCleanupKeyFieldCleansUpKeyField()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanupTest.testInternalAllField()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanupTest.testInternalAllTextFieldsField()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanups.FieldFormatterCleanups(boolean,List<FieldFormatterCleanup>)",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanups.applyAllActions(BibEntry)",1,1,2,2
"org.jabref.logic.cleanup.FieldFormatterCleanups.applySaveActions(BibEntry)",2,2,2,2
"org.jabref.logic.cleanup.FieldFormatterCleanups.equals(Object)",4,4,2,5
"org.jabref.logic.cleanup.FieldFormatterCleanups.getAsStringList(String)",2,1,2,2
"org.jabref.logic.cleanup.FieldFormatterCleanups.getConfiguredActions()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanups.getMetaDataString(List<FieldFormatterCleanup>,String)",6,1,5,5
"org.jabref.logic.cleanup.FieldFormatterCleanups.hashCode()",0,1,1,1
"org.jabref.logic.cleanup.FieldFormatterCleanups.isEnabled()",0,1,1,1
"org.jabref.logic.cleanup.FileLinksCleanup.cleanup(BibEntry)",2,3,3,3
"org.jabref.logic.cleanup.Formatter.equals(Object)",2,2,2,2
"org.jabref.logic.cleanup.Formatter.hashCode()",0,1,1,1
"org.jabref.logic.cleanup.ISSNCleanup.cleanup(BibEntry)",2,3,3,3
"org.jabref.logic.cleanup.ISSNCleanupTest.cleanupISSNAddsMissingDash()",0,1,1,1
"org.jabref.logic.cleanup.ISSNCleanupTest.cleanupISSNJunkStaysJunk()",0,1,1,1
"org.jabref.logic.cleanup.ISSNCleanupTest.cleanupISSNReturnsCorrectISSN()",0,1,1,1
"org.jabref.logic.cleanup.ISSNCleanupTest.setUp()",0,1,1,1
"org.jabref.logic.cleanup.MoveFieldCleanup.MoveFieldCleanup(Field,Field)",0,1,1,1
"org.jabref.logic.cleanup.MoveFieldCleanup.cleanup(BibEntry)",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanup.MoveFilesCleanup(BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanup.cleanup(BibEntry)",6,2,4,5
"org.jabref.logic.cleanup.MoveFilesCleanupTest.doesNotMoveFileWithEmptyFileDirPattern()",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanupTest.movesFile()",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanupTest.movesFileWithFileDirPattern()",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanupTest.movesFileWithMulitpleLinked()",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanupTest.movesFileWithNoDirectory()",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanupTest.movesFileWithSubdirectoryPattern()",0,1,1,1
"org.jabref.logic.cleanup.MoveFilesCleanupTest.setUp(Path)",0,1,1,1
"org.jabref.logic.cleanup.NormalizeNewlinesFormatter.format(String)",3,2,3,3
"org.jabref.logic.cleanup.NormalizeNewlinesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.cleanup.NormalizeNewlinesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.cleanup.NormalizeNewlinesFormatter.getKey()",0,1,1,1
"org.jabref.logic.cleanup.NormalizeNewlinesFormatter.getName()",0,1,1,1
"org.jabref.logic.cleanup.RelativePathsCleanup.RelativePathsCleanup(BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.logic.cleanup.RelativePathsCleanup.cleanup(BibEntry)",10,3,6,6
"org.jabref.logic.cleanup.RenamePdfCleanup.RenamePdfCleanup(boolean,BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.logic.cleanup.RenamePdfCleanup.cleanup(BibEntry)",9,4,5,7
"org.jabref.logic.cleanup.RenamePdfCleanupTest.cleanupRenamePdfRenamesFileEvenIfOnlyDifferenceIsCase()",0,1,1,1
"org.jabref.logic.cleanup.RenamePdfCleanupTest.cleanupRenamePdfRenamesFileInSameFolder()",0,1,1,1
"org.jabref.logic.cleanup.RenamePdfCleanupTest.cleanupRenamePdfRenamesFileStartingWithCitationKey()",0,1,1,1
"org.jabref.logic.cleanup.RenamePdfCleanupTest.cleanupRenamePdfRenamesWithMultipleFiles()",0,1,1,1
"org.jabref.logic.cleanup.RenamePdfCleanupTest.setUp(Path)",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDate.TimeStampToCreationDate(TimestampPreferences)",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDate.cleanup(BibEntry)",3,3,3,3
"org.jabref.logic.cleanup.TimeStampToCreationDate.formatTimeStamp(String)",2,2,2,2
"org.jabref.logic.cleanup.TimeStampToCreationDate.getMonth(Date)",1,2,2,2
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.customFieldToCreationDate()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.entriesMigratedToCreationDateFromDifferentFormats()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.makeMockReturnCustomField()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.makeMockReturnStandardField()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.standardFieldToCreationDate()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.withCustomFieldToCreationDate(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.withDifferentFormats(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToCreationDateTest.withStandardFieldToCreationDate(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToModificationDate.TimeStampToModificationDate(TimestampPreferences)",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToModificationDate.cleanup(BibEntry)",3,3,3,3
"org.jabref.logic.cleanup.TimeStampToModificationDate.formatTimeStamp(String)",2,2,2,2
"org.jabref.logic.cleanup.TimeStampToModificationDate.getMonth(Date)",1,2,2,2
"org.jabref.logic.cleanup.TimeStampToModificationDateTest.customFieldToModificationDate()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToModificationDateTest.makeMockReturnCustomField()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToModificationDateTest.makeMockReturnStandardField()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToModificationDateTest.standardFieldToModificationDate()",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToModificationDateTest.withCustomFieldToModificationDate(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.cleanup.TimeStampToModificationDateTest.withStandardFieldToModificationDate(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.cleanup.UpgradePdfPsToFileCleanup.UpgradePdfPsToFileCleanup()",0,1,1,1
"org.jabref.logic.cleanup.UpgradePdfPsToFileCleanup.cleanup(BibEntry)",5,2,3,4
"org.jabref.logic.crawler.Crawler.Crawler(Path,SlrGitHandler,GeneralPreferences,ImportFormatPreferences,SavePreferences,BibEntryTypesManager,FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.crawler.Crawler.performCrawl()",0,1,1,1
"org.jabref.logic.crawler.CrawlerTest.getPathToStudyDefinitionFile()",0,1,1,1
"org.jabref.logic.crawler.CrawlerTest.setUp()",0,1,1,1
"org.jabref.logic.crawler.CrawlerTest.setUpRepository()",0,1,1,1
"org.jabref.logic.crawler.CrawlerTest.setUpTestStudyDefinitionFile()",0,1,1,1
"org.jabref.logic.crawler.CrawlerTest.testWhetherAllFilesAreCreated()",0,1,1,1
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverter.StudyDatabaseToFetcherConverter(List<StudyDatabase>,ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverter.createFetcherFromLibraryEntry(StudyDatabase)",0,1,1,1
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverter.getActiveFetchers()",0,1,1,1
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverter.getFetchersFromLibraryEntries(List<StudyDatabase>)",0,1,1,1
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverterTest.copyTestStudyDefinitionFileIntoDirectory(Path)",0,1,1,1
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverterTest.getActiveFetcherInstances()",0,1,1,1
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverterTest.setUpMocks()",0,1,1,1
"org.jabref.logic.crawler.StudyFetcher.StudyFetcher(List<SearchBasedFetcher>,List<String>)",0,1,1,1
"org.jabref.logic.crawler.StudyFetcher.crawl()",0,1,1,1
"org.jabref.logic.crawler.StudyFetcher.getQueryResult(String)",0,1,1,1
"org.jabref.logic.crawler.StudyFetcher.performSearchOnQuery(String)",0,1,1,1
"org.jabref.logic.crawler.StudyFetcher.performSearchOnQueryForFetcher(String,SearchBasedFetcher)",5,1,4,4
"org.jabref.logic.crawler.StudyRepository.StudyRepository(Path,SlrGitHandler,GeneralPreferences,ImportFormatPreferences,FileUpdateMonitor,SavePreferences,BibEntryTypesManager)",7,3,6,8
"org.jabref.logic.crawler.StudyRepository.computeIDForQuery(String)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.createBibFile(Path)",3,2,2,3
"org.jabref.logic.crawler.StudyRepository.createFetcherResultFile(String,SearchBasedFetcher)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.createFolder(Path)",1,1,2,2
"org.jabref.logic.crawler.StudyRepository.createQueryResultFile(String)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.createQueryResultFolder(String)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.createStudyResultFile()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.generateCiteKeys(BibDatabaseContext,BibDatabase)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getActiveLibraryEntries()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getFetcherResultEntries(String,String)",1,2,2,2
"org.jabref.logic.crawler.StudyRepository.getPathToFetcherResultFile(String,String)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getPathToQueryDirectory(String)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getPathToQueryResultFile(String)",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getPathToStudyResultFile()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getQueryResultEntries(String)",1,2,2,2
"org.jabref.logic.crawler.StudyRepository.getSearchQueryStrings()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getStudy()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.getStudyResultEntries()",1,2,2,2
"org.jabref.logic.crawler.StudyRepository.parseStudyFile()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.persist(List<QueryResult>)",2,2,2,3
"org.jabref.logic.crawler.StudyRepository.persistResults(List<QueryResult>)",3,1,3,3
"org.jabref.logic.crawler.StudyRepository.persistStudy()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.setUpRepositoryStructure()",1,1,2,2
"org.jabref.logic.crawler.StudyRepository.trimNameAndAddID(String)",1,1,2,2
"org.jabref.logic.crawler.StudyRepository.updateRemoteSearchAndWorkBranch()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.updateWorkAndSearchBranch()",0,1,1,1
"org.jabref.logic.crawler.StudyRepository.writeResultToFile(Path,BibDatabase)",3,1,3,4
"org.jabref.logic.crawler.StudyRepositoryTest.bibEntriesCorrectlyStored()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.fetcherResultsPersistedCorrectly()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.getArXivQuantumMockResults()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.getMockResults()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.getNonDuplicateBibEntryResult()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.getSpringerCloudComputingMockResults()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.getSpringerQuantumMockResults()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.getTestStudyRepository()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.mergedResultsPersistedCorrectly()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.providePathToNonExistentRepositoryThrowsException()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.repositoryStructureCorrectlyCreated()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.setUpMocks()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.setUpTestResultFile()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.setUpTestStudyDefinitionFile()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.setsLastSearchDatePersistedCorrectly()",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.stripCitationKeys(List<BibEntry>)",0,1,1,1
"org.jabref.logic.crawler.StudyRepositoryTest.studyResultsPersistedCorrectly()",0,1,1,1
"org.jabref.logic.crawler.StudyYamlParser.parseStudyYamlFile(Path)",0,1,1,1
"org.jabref.logic.crawler.StudyYamlParser.writeStudyYamlFile(Study,Path)",0,1,1,1
"org.jabref.logic.crawler.StudyYamlParserTest.parseStudyFileSuccessfully()",0,1,1,1
"org.jabref.logic.crawler.StudyYamlParserTest.setupStudy()",0,1,1,1
"org.jabref.logic.crawler.StudyYamlParserTest.writeStudyFileSuccessfully()",0,1,1,1
"org.jabref.logic.database.DatabaseMerger.DatabaseMerger(char)",0,1,1,1
"org.jabref.logic.database.DatabaseMerger.merge(BibDatabase,BibDatabase)",0,1,1,1
"org.jabref.logic.database.DatabaseMerger.merge(BibDatabaseContext,BibDatabaseContext,String)",0,1,1,1
"org.jabref.logic.database.DatabaseMerger.mergeContentSelectors(MetaData,MetaData)",1,1,2,2
"org.jabref.logic.database.DatabaseMerger.mergeEntries(BibDatabase,BibDatabase)",0,1,1,1
"org.jabref.logic.database.DatabaseMerger.mergeGroups(MetaData,MetaData,String,List<BibEntry>)",5,1,3,3
"org.jabref.logic.database.DatabaseMerger.mergeMetaData(MetaData,MetaData,String,List<BibEntry>)",0,1,1,1
"org.jabref.logic.database.DatabaseMerger.mergeStrings(BibDatabase,BibDatabase)",11,1,4,5
"org.jabref.logic.database.DatabaseMergerTest.TestGroup.TestGroup(String,GroupHierarchyType)",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.TestGroup.contains(BibEntry)",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.TestGroup.deepCopy()",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.TestGroup.isDynamic()",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.mergeAddsNonDuplicateEntries()",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.mergeBibTexStringsWithSameNameAndContentAreIgnored()",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.mergeBibTexStringsWithSameNameAreImportedWithModifiedName()",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.mergeMetaDataWithAllEntriesGroup()",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.mergeMetaDataWithoutAllEntriesGroup()",0,1,1,1
"org.jabref.logic.database.DatabaseMergerTest.setUp()",0,1,1,1
"org.jabref.logic.database.DuplicateCheck.DuplicateCheck(BibEntryTypesManager)",0,1,1,1
"org.jabref.logic.database.DuplicateCheck.compareAuthorField(String,String)",1,2,1,2
"org.jabref.logic.database.DuplicateCheck.compareChapterField(String,String)",0,1,1,1
"org.jabref.logic.database.DuplicateCheck.compareEntriesStrictly(BibEntry,BibEntry)",4,2,2,4
"org.jabref.logic.database.DuplicateCheck.compareField(String,String)",1,2,1,2
"org.jabref.logic.database.DuplicateCheck.compareFieldSet(Collection<Field>,BibEntry,BibEntry)",6,3,2,6
"org.jabref.logic.database.DuplicateCheck.compareJournalField(String,String)",1,2,1,2
"org.jabref.logic.database.DuplicateCheck.compareOptionalFields(BibEntryType,BibEntry,BibEntry,double[])",1,2,1,2
"org.jabref.logic.database.DuplicateCheck.comparePagesField(String,String)",1,2,1,2
"org.jabref.logic.database.DuplicateCheck.compareRequiredFields(BibEntryType,BibEntry,BibEntry)",1,1,2,2
"org.jabref.logic.database.DuplicateCheck.compareSingleField(Field,BibEntry,BibEntry)",8,8,6,8
"org.jabref.logic.database.DuplicateCheck.containsDuplicate(BibDatabase,BibEntry,BibDatabaseMode)",0,1,1,1
"org.jabref.logic.database.DuplicateCheck.correlateByWords(String,String)",3,1,2,3
"org.jabref.logic.database.DuplicateCheck.haveDifferentChaptersOrPagesOfTheSameBook(BibEntry,BibEntry)",2,1,4,4
"org.jabref.logic.database.DuplicateCheck.haveDifferentEditions(BibEntry,BibEntry)",1,1,3,3
"org.jabref.logic.database.DuplicateCheck.haveDifferentEntryType(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.database.DuplicateCheck.haveSameIdentifier(BibEntry,BibEntry)",4,3,3,4
"org.jabref.logic.database.DuplicateCheck.isDuplicate(BibEntry,BibEntry,BibDatabaseMode)",12,8,8,12
"org.jabref.logic.database.DuplicateCheck.isFarFromThreshold(double)",1,1,2,2
"org.jabref.logic.database.DuplicateCheck.isSingleFieldEqual(BibEntry,BibEntry,Field)",4,3,3,5
"org.jabref.logic.database.DuplicateCheck.similarity(String,String)",3,2,1,3
"org.jabref.logic.database.DuplicateCheckTest.compareOfTwoEntriesWithSameContentAndCrLfEndingsReportsNoDifferences()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.compareOfTwoEntriesWithSameContentAndLfEndingsReportsNoDifferences()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.compareOfTwoEntriesWithSameContentAndMixedLineEndingsReportsNoDifferences()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.inbookWithoutChapterCouldBeDuplicateOfInbookWithChapter()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.sameBooksWithDifferentEditionsAreNotDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.sameBooksWithMissingEditionAreDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.sameBooksWithPartiallyMissingEditionAreDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.setUp()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.testDuplicateDetection()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.testWordCorrelation()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoBooksWithDifferentEditionsAreNotDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoEntriesWithDifferentSpecificFieldsAreNotDuplicates(BibEntry,Field,String,String)",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoEntriesWithDoiContainingUnderscoresAreNotEqual()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoEntriesWithSameDoiButDifferentTypesAreDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoEntriesWithSameISBNButDifferentTypesAreDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoInbooksWithDifferentChaptersAreNotDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoInbooksWithDifferentPagesAreNotDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoIncollectionsWithDifferentChaptersAreNotDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoIncollectionsWithDifferentPagesAreNotDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoUnrelatedEntriesAreNoDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoUnrelatedEntriesWithDifferentDoisAreNoDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoUnrelatedEntriesWithEqualDoisAreDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoUnrelatedEntriesWithEqualEprintAreDuplicates()",0,1,1,1
"org.jabref.logic.database.DuplicateCheckTest.twoUnrelatedEntriesWithEqualPmidAreDuplicates()",0,1,1,1
"org.jabref.logic.exporter.AtomicFileOutputStream.AtomicFileOutputStream(Path)",0,1,1,1
"org.jabref.logic.exporter.AtomicFileOutputStream.AtomicFileOutputStream(Path,boolean)",3,1,2,3
"org.jabref.logic.exporter.AtomicFileOutputStream.abort()",1,1,2,2
"org.jabref.logic.exporter.AtomicFileOutputStream.cleanup()",3,1,4,4
"org.jabref.logic.exporter.AtomicFileOutputStream.close()",12,1,9,9
"org.jabref.logic.exporter.AtomicFileOutputStream.flush()",1,1,2,2
"org.jabref.logic.exporter.AtomicFileOutputStream.getBackup()",0,1,1,1
"org.jabref.logic.exporter.AtomicFileOutputStream.getPathOfBackupFile(Path)",0,1,1,1
"org.jabref.logic.exporter.AtomicFileOutputStream.getPathOfTemporaryFile(Path)",0,1,1,1
"org.jabref.logic.exporter.AtomicFileOutputStream.write(byte[],int,int)",1,1,2,2
"org.jabref.logic.exporter.AtomicFileOutputStream.write(int)",1,1,2,2
"org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(Path,Charset)",0,1,1,1
"org.jabref.logic.exporter.AtomicFileWriter.AtomicFileWriter(Path,Charset,boolean)",0,1,1,1
"org.jabref.logic.exporter.AtomicFileWriter.getEncodingProblems()",0,1,1,1
"org.jabref.logic.exporter.AtomicFileWriter.hasEncodingProblems()",0,1,1,1
"org.jabref.logic.exporter.AtomicFileWriter.write(String)",6,1,4,4
"org.jabref.logic.exporter.BibDatabaseWriter.BibDatabaseWriter(BibWriter,GeneralPreferences,SavePreferences,BibEntryTypesManager)",0,1,1,1
"org.jabref.logic.exporter.BibDatabaseWriter.applySaveActions(BibEntry,MetaData)",0,1,1,1
"org.jabref.logic.exporter.BibDatabaseWriter.applySaveActions(List<BibEntry>,MetaData)",5,1,4,4
"org.jabref.logic.exporter.BibDatabaseWriter.generateCitationKeys(BibDatabaseContext,List<BibEntry>)",3,1,3,3
"org.jabref.logic.exporter.BibDatabaseWriter.getSaveActionsFieldChanges()",0,1,1,1
"org.jabref.logic.exporter.BibDatabaseWriter.getSaveComparators(MetaData,SavePreferences)",2,1,2,2
"org.jabref.logic.exporter.BibDatabaseWriter.getSaveOrder(MetaData,SavePreferences)",2,3,3,3
"org.jabref.logic.exporter.BibDatabaseWriter.getSortedEntries(BibDatabaseContext,List<BibEntry>,SavePreferences)",1,2,1,2
"org.jabref.logic.exporter.BibDatabaseWriter.saveDatabase(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.exporter.BibDatabaseWriter.savePartOfDatabase(BibDatabaseContext,List<BibEntry>)",7,1,7,7
"org.jabref.logic.exporter.BibDatabaseWriter.writeEntryTypeDefinitions(Set<BibEntryType>)",1,1,2,2
"org.jabref.logic.exporter.BibDatabaseWriter.writeMetaData(MetaData,GlobalCitationKeyPattern)",1,1,2,2
"org.jabref.logic.exporter.BibDatabaseWriter.writeString(BibtexString,Map<String, BibtexString>,int)",4,1,3,3
"org.jabref.logic.exporter.BibDatabaseWriter.writeStrings(BibDatabase)",8,1,6,6
"org.jabref.logic.exporter.BibTeXMLExporter.BibTeXMLExporter()",0,1,1,1
"org.jabref.logic.exporter.BibTeXMLExporter.createMarshallerAndWriteToFile(File,Path)",2,1,2,3
"org.jabref.logic.exporter.BibTeXMLExporter.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",18,2,16,17
"org.jabref.logic.exporter.BibTeXMLExporter.getListOfSetMethods(T)",0,1,1,1
"org.jabref.logic.exporter.BibTeXMLExporter.parse(T,BibEntry,Entry)",36,7,13,14
"org.jabref.logic.exporter.BibTeXMLExporter.parseInbook(Inbook,BibEntry,Entry)",12,1,7,7
"org.jabref.logic.exporter.BibTeXMLExporterTestFiles.fileNames()",0,1,1,1
"org.jabref.logic.exporter.BibTeXMLExporterTestFiles.setUp(Path)",0,1,1,1
"org.jabref.logic.exporter.BibTeXMLExporterTestFiles.testPerformExport(String)",0,1,1,1
"org.jabref.logic.exporter.BibWriter.BibWriter(Writer,String)",0,1,1,1
"org.jabref.logic.exporter.BibWriter.finishBlock()",2,2,2,3
"org.jabref.logic.exporter.BibWriter.finishLine()",1,1,2,2
"org.jabref.logic.exporter.BibWriter.write(String)",1,1,2,2
"org.jabref.logic.exporter.BibWriter.writeLine(String)",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriter.BibtexDatabaseWriter(BibWriter,GeneralPreferences,SavePreferences,BibEntryTypesManager)",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriter.BibtexDatabaseWriter(Writer,String,GeneralPreferences,SavePreferences,BibEntryTypesManager)",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriter.writeDatabaseID(String)",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriter.writeEntry(BibEntry,BibDatabaseMode)",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriter.writeEntryTypeDefinition(BibEntryType)",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriter.writeEpilogue(String)",1,1,2,2
"org.jabref.logic.exporter.BibtexDatabaseWriter.writeMetaDataItem(Entry<String, String>)",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriter.writePreamble(String)",1,1,2,2
"org.jabref.logic.exporter.BibtexDatabaseWriter.writeProlog(BibDatabaseContext,Charset)",2,2,1,3
"org.jabref.logic.exporter.BibtexDatabaseWriter.writeString(BibtexString,int)",7,3,5,6
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.doNotWriteUtf8StringAndEncoding()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.newlineAtEndOfAbstractFieldIsDeleted()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.reformatEntryIfAskedToDoSo()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.reformatStringIfAskedToDoSo()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripUtf8EncodingHeaderRemoved()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithArticleMonths()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithComplexBib()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithContentSelectorsAndUmlauts()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithOneUserCommentAndEntryChange()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithTwoEntriesAndOneUserCommentAndEntryChange()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithUnknownMetaData()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithUserComment()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithUserCommentAndEntryChange()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.roundtripWithUserCommentBeforeStringAndChange()",1,1,2,2
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.saveAlsoSavesSecondModification()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.saveReturnsToOriginalEntryWhenEntryIsFlaggedUnchanged()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.saveReturnsToOriginalEntryWhenEntryIsFlaggedUnchangedEvenInThePresenceOfSavedModifications()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.trimFieldContents()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeBiblatexMode()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeCustomKeyPattern()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeCustomizedTypesInAlphabeticalOrder()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEncoding()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEncodingAndEntry()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEntriesInOriginalOrderWhenNoSaveOrderConfigIsSetInMetadata()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEntriesSorted()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEntry()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEntryWithCustomizedTypeAlsoWritesTypeDeclaration()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEpilogue()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeEpilogueAndEncoding()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeFileDirectories()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeGroups()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeGroupsAndEncoding()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeMetadata()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeMetadataAndEncoding()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writePreamble()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writePreambleAndEncoding()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeProtectedFlag()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeSaveActions()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeSaveOrderConfig()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeSavedSerializationOfEntryIfUnchanged()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeSavedSerializationOfStringIfUnchanged()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeString()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeStringAndEncoding()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeWithNullContextThrowsException()",0,1,1,1
"org.jabref.logic.exporter.BibtexDatabaseWriterTest.writeWithNullEntriesThrowsException()",0,1,1,1
"org.jabref.logic.exporter.CsvExportFormatTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.CsvExportFormatTest.tearDown()",0,1,1,1
"org.jabref.logic.exporter.CsvExportFormatTest.testPerformExportForMultipleAuthors(Path)",0,1,1,1
"org.jabref.logic.exporter.CsvExportFormatTest.testPerformExportForMultipleEditors(Path)",0,1,1,1
"org.jabref.logic.exporter.CsvExportFormatTest.testPerformExportForSingleAuthor(Path)",0,1,1,1
"org.jabref.logic.exporter.CsvExportFormatTest.testPerformExportForSingleEditor(Path)",0,1,1,1
"org.jabref.logic.exporter.DocBook5ExporterTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.DocBook5ExporterTest.testPerformExportForSingleEntry(Path)",0,1,1,1
"org.jabref.logic.exporter.DocbookExporterTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.DocbookExporterTest.testCorruptedTitleBraces(Path)",0,1,1,1
"org.jabref.logic.exporter.DocbookExporterTest.testCorruptedTitleUnicode(Path)",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporter.EmbeddedBibFilePdfExporter(BibDatabaseMode,BibEntryTypesManager,FieldWriterPreferences)",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporter.embedBibTex(String,Path,Charset)",5,2,4,5
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporter.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporter.getBibString(List<BibEntry>)",1,1,2,2
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.createDefaultLinkedFile(String,Path)",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.initBibEntries()",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.provideBibEntriesWithInvalidPdfFileLinks()",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.provideBibEntriesWithValidPdfFileLinks()",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.providePathsToInvalidPDFs()",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.providePathsToValidPDFs()",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.successfulExportToAllFilesOfEntry(BibEntry)",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.successfulExportToFileByPath(Path)",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.unsuccessfulExportToAllFilesOfEntry(BibEntry)",0,1,1,1
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest.unsuccessfulExportToFileByPath(Path)",0,1,1,1
"org.jabref.logic.exporter.Exporter.Exporter(String,String,FileType)",0,1,1,1
"org.jabref.logic.exporter.Exporter.exportToAllFilesOfEntry(BibDatabaseContext,Charset,FilePreferences,BibEntry,List<BibEntry>)",6,1,4,4
"org.jabref.logic.exporter.Exporter.exportToFileByPath(BibDatabaseContext,BibDatabase,Charset,FilePreferences,Path)",12,2,7,8
"org.jabref.logic.exporter.Exporter.getFileType()",0,1,1,1
"org.jabref.logic.exporter.Exporter.getId()",0,1,1,1
"org.jabref.logic.exporter.Exporter.getName()",0,1,1,1
"org.jabref.logic.exporter.Exporter.toString()",0,1,1,1
"org.jabref.logic.exporter.ExporterFactory.ExporterFactory(List<Exporter>)",0,1,1,1
"org.jabref.logic.exporter.ExporterFactory.create(List<TemplateExporter>,LayoutFormatterPreferences,SavePreferences,XmpPreferences,BibDatabaseMode,BibEntryTypesManager)",0,1,1,1
"org.jabref.logic.exporter.ExporterFactory.getExporterByName(String)",0,1,1,1
"org.jabref.logic.exporter.ExporterFactory.getExporters()",0,1,1,1
"org.jabref.logic.exporter.ExporterFactory.getExportersAsString(int,int,String)",4,1,4,4
"org.jabref.logic.exporter.ExporterTest.exportFormats()",1,1,2,2
"org.jabref.logic.exporter.ExporterTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.ExporterTest.testExportingEmptyDatabaseYieldsEmptyFile(Exporter,String,Path)",0,1,1,1
"org.jabref.logic.exporter.ExporterTest.testExportingNullDatabaseThrowsNPE(Exporter,String,Path)",0,1,1,1
"org.jabref.logic.exporter.ExporterTest.testExportingNullEntriesThrowsNPE(Exporter,String,Path)",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.checkLowerCaseSaveAction()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.checkMultipleSaveActions()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.checkMultipleSaveActionsWithMultipleFormatters()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.checkSimpleUseCase()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.checkThreeSaveActionsForOneField()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.checkTwoSaveActionsForOneField()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.clearFormatterRemovesField()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.invalidSaveActionSting()",0,1,1,1
"org.jabref.logic.exporter.FieldFormatterCleanupsTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.appendAutomaticGroupDetails(StringBuilder,AutomaticGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.appendGroupDetails(StringBuilder,AbstractGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeAllEntriesGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeAutomaticKeywordGroup(AutomaticKeywordGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeAutomaticPersonsGroup(AutomaticPersonsGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeExplicitGroup(ExplicitGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeGroup(AbstractGroup)",8,8,8,8
"org.jabref.logic.exporter.GroupSerializer.serializeKeywordGroup(KeywordGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeSearchGroup(SearchGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeTexGroup(TexGroup)",0,1,1,1
"org.jabref.logic.exporter.GroupSerializer.serializeTree(GroupTreeNode)",2,1,2,2
"org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInComplexTree()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.getTreeAsStringInSimpleTree()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleAllEntriesGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticKeywordGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleAutomaticPersonGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithEscapedSlash()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleExplicitGroupWithIconAndDescription()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleRegexKeywordGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleSearchGroupWithRegex()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleSimpleKeywordGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.serializeSingleTexGroup()",0,1,1,1
"org.jabref.logic.exporter.GroupSerializerTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.HtmlExportFormatTest.emitWellFormedHtml(Path)",0,1,1,1
"org.jabref.logic.exporter.HtmlExportFormatTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.HtmlExportFormatTest.tearDown()",0,1,1,1
"org.jabref.logic.exporter.MSBibExportFormatTestFiles.fileNames()",0,1,1,1
"org.jabref.logic.exporter.MSBibExportFormatTestFiles.setUp(Path)",0,1,1,1
"org.jabref.logic.exporter.MSBibExportFormatTestFiles.testPerformExport(String)",0,1,1,1
"org.jabref.logic.exporter.MSBibExporter.MSBibExporter()",0,1,1,1
"org.jabref.logic.exporter.MSBibExporter.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",3,2,1,4
"org.jabref.logic.exporter.MetaDataSerializer.MetaDataSerializer()",0,1,1,1
"org.jabref.logic.exporter.MetaDataSerializer.getSerializedStringMap(MetaData,GlobalCitationKeyPattern)",5,1,5,5
"org.jabref.logic.exporter.MetaDataSerializer.serializeCiteKeyPattern(MetaData,GlobalCitationKeyPattern)",5,1,5,5
"org.jabref.logic.exporter.MetaDataSerializer.serializeGroups(GroupTreeNode)",1,1,2,2
"org.jabref.logic.exporter.MetaDataSerializer.serializeMetaData(Map<String, List<String>>)",11,1,8,8
"org.jabref.logic.exporter.MetaDataSerializerTest.serializeNewMetadataReturnsEmptyMap()",0,1,1,1
"org.jabref.logic.exporter.MetaDataSerializerTest.serializeSingleContentSelectors()",0,1,1,1
"org.jabref.logic.exporter.MetaDataSerializerTest.serializeSingleSaveAction()",0,1,1,1
"org.jabref.logic.exporter.MetaDataSerializerTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.ModsExportFormatTest.exportForNoEntriesWritesNothing(Path)",0,1,1,1
"org.jabref.logic.exporter.ModsExportFormatTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.ModsExportFormatTestFiles.fileNames()",0,1,1,1
"org.jabref.logic.exporter.ModsExportFormatTestFiles.setUp(Path)",0,1,1,1
"org.jabref.logic.exporter.ModsExportFormatTestFiles.testExportAsModsAndThenImportAsMods(String)",0,1,1,1
"org.jabref.logic.exporter.ModsExportFormatTestFiles.testImportAsModsAndExportAsMods(String)",0,1,1,1
"org.jabref.logic.exporter.ModsExportFormatTestFiles.testPerformExport(String)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.ModsExporter()",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addAbstract(ModsDefinition,String)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addAffiliation(ModsDefinition,String)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addDate(String,String,OriginInfoDefinition)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addDetail(Field,String,PartDefinition)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addGenre(ModsDefinition,EntryType)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addIdentifier(Field,String,ModsDefinition)",1,1,2,2
"org.jabref.logic.exporter.ModsExporter.addJournal(String,RelatedItemDefinition)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addKeyWords(ModsDefinition,String)",1,1,2,2
"org.jabref.logic.exporter.ModsExporter.addLanguage(ModsDefinition,String)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addLocation(ModsDefinition,String)",1,1,2,2
"org.jabref.logic.exporter.ModsExporter.addNote(ModsDefinition,String)",1,1,2,2
"org.jabref.logic.exporter.ModsExporter.addOriginInformation(Field,String,OriginInfoDefinition)",10,1,10,10
"org.jabref.logic.exporter.ModsExporter.addPages(PartDefinition,String)",3,1,3,3
"org.jabref.logic.exporter.ModsExporter.addRelatedAndOriginInfoToModsGroup(RelatedItemDefinition,PartDefinition,ModsDefinition)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addStartAndEndPage(String,PartDefinition,String)",2,1,3,3
"org.jabref.logic.exporter.ModsExporter.addTitle(ModsDefinition,String)",0,1,1,1
"org.jabref.logic.exporter.ModsExporter.addUrl(ModsDefinition,String)",1,1,2,2
"org.jabref.logic.exporter.ModsExporter.createMarshallerAndWriteToFile(Path,JAXBElement<ModsCollectionDefinition>)",1,1,2,2
"org.jabref.logic.exporter.ModsExporter.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",25,2,21,23
"org.jabref.logic.exporter.ModsExporter.handleAuthors(ModsDefinition,String)",11,1,5,5
"org.jabref.logic.exporter.MsBibExportFormatTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.MsBibExportFormatTest.testPerformExportWithNoEntry(Path)",0,1,1,1
"org.jabref.logic.exporter.OOCalcDatabase.OOCalcDatabase(BibDatabase,List<BibEntry>)",1,1,2,2
"org.jabref.logic.exporter.OOCalcDatabase.addEntryRow(BibEntry,Element,Document)",3,1,2,2
"org.jabref.logic.exporter.OOCalcDatabase.addTableCell(Document,Element,String)",0,1,1,1
"org.jabref.logic.exporter.OOCalcDatabase.addTableHeader(Element,Document)",1,1,2,2
"org.jabref.logic.exporter.OOCalcDatabase.createRootElement(Document)",0,1,1,1
"org.jabref.logic.exporter.OOCalcDatabase.createTableElement(Document)",0,1,1,1
"org.jabref.logic.exporter.OOCalcDatabase.getDOMrepresentation()",2,1,3,3
"org.jabref.logic.exporter.OOCalcDatabase.getField(BibEntry,Field)",0,1,1,1
"org.jabref.logic.exporter.OpenDocumentRepresentation.OpenDocumentRepresentation(BibDatabase,List<BibEntry>)",2,1,2,2
"org.jabref.logic.exporter.OpenDocumentRepresentation.addTableCell(Document,Element,String)",0,1,1,1
"org.jabref.logic.exporter.OpenDocumentRepresentation.getDOMrepresentation()",2,1,3,3
"org.jabref.logic.exporter.OpenDocumentRepresentation.getField(BibEntry,Field)",0,1,1,1
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator.OpenDocumentSpreadsheetCreator()",0,1,1,1
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator.addFromResource(String,OutputStream)",4,3,3,4
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator.addResourceFile(String,String,ZipOutputStream)",0,1,1,1
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",1,1,2,2
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator.exportOpenDocumentSpreadsheet(Path,BibDatabase,List<BibEntry>)",1,1,2,2
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator.exportOpenDocumentSpreadsheetXML(File,BibDatabase,List<BibEntry>)",1,1,1,2
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator.storeOpenDocumentSpreadsheetFile(Path,InputStream)",2,1,3,3
"org.jabref.logic.exporter.OpenOfficeDocumentCreator.OpenOfficeDocumentCreator()",0,1,1,1
"org.jabref.logic.exporter.OpenOfficeDocumentCreator.addFromResource(String,OutputStream)",4,3,3,4
"org.jabref.logic.exporter.OpenOfficeDocumentCreator.addResourceFile(String,String,ZipOutputStream)",0,1,1,1
"org.jabref.logic.exporter.OpenOfficeDocumentCreator.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",1,1,2,2
"org.jabref.logic.exporter.OpenOfficeDocumentCreator.exportOpenOfficeCalc(Path,BibDatabase,List<BibEntry>)",1,1,2,2
"org.jabref.logic.exporter.OpenOfficeDocumentCreator.exportOpenOfficeCalcXML(File,BibDatabase,List<BibEntry>)",1,1,1,2
"org.jabref.logic.exporter.OpenOfficeDocumentCreator.storeOpenOfficeFile(Path,InputStream)",1,1,2,2
"org.jabref.logic.exporter.OpenOfficeDocumentCreatorTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.OpenOfficeDocumentCreatorTest.testPerformExportForSingleEntry(Path)",0,1,1,1
"org.jabref.logic.exporter.OpenOfficeDocumentCreatorTest.unzipContentXml(Path,Path)",10,1,5,5
"org.jabref.logic.exporter.OpenOfficeDocumentCreatorTest.zipSlipProtect(ZipEntry,Path)",1,2,2,2
"org.jabref.logic.exporter.SaveException.SaveException(String)",0,1,1,1
"org.jabref.logic.exporter.SaveException.SaveException(String,BibEntry)",0,1,1,1
"org.jabref.logic.exporter.SaveException.SaveException(String,String)",0,1,1,1
"org.jabref.logic.exporter.SaveException.SaveException(String,String,BibEntry,Throwable)",0,1,1,1
"org.jabref.logic.exporter.SaveException.SaveException(String,Throwable)",0,1,1,1
"org.jabref.logic.exporter.SaveException.SaveException(String,int)",0,1,1,1
"org.jabref.logic.exporter.SaveException.SaveException(Throwable)",0,1,1,1
"org.jabref.logic.exporter.SaveException.SaveException(Throwable,BibEntry)",0,1,1,1
"org.jabref.logic.exporter.SaveException.getEntry()",0,1,1,1
"org.jabref.logic.exporter.SaveException.getLocalizedMessage()",2,2,2,2
"org.jabref.logic.exporter.SaveException.getStatus()",0,1,1,1
"org.jabref.logic.exporter.SaveException.specificEntry()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.SavePreferences(Boolean,SaveOrderConfig,Boolean,DatabaseSaveType,Boolean,Boolean,FieldWriterPreferences,CitationKeyPatternPreferences)",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.SavePreferences(Boolean,SaveOrderConfig,DatabaseSaveType,Boolean,Boolean,FieldWriterPreferences,CitationKeyPatternPreferences)",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.getCitationKeyPatternPreferences()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.getFieldWriterPreferences()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.getSaveOrder()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.getSaveType()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.shouldMakeBackup()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.shouldReformatFile()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.shouldSaveInOriginalOrder()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.takeMetadataSaveOrderInAccount()",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.withMakeBackup(Boolean)",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.withSaveInOriginalOrder(Boolean)",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.withSaveOrder(SaveOrderConfig)",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.withSaveType(DatabaseSaveType)",0,1,1,1
"org.jabref.logic.exporter.SavePreferences.withTakeMetadataSaveOrderInAccount(boolean)",0,1,1,1
"org.jabref.logic.exporter.TemplateExporter.TemplateExporter(String,String,String,LayoutFormatterPreferences,SavePreferences)",0,1,1,1
"org.jabref.logic.exporter.TemplateExporter.TemplateExporter(String,String,String,String,FileType)",0,1,1,1
"org.jabref.logic.exporter.TemplateExporter.TemplateExporter(String,String,String,String,FileType,LayoutFormatterPreferences,SavePreferences)",2,1,2,2
"org.jabref.logic.exporter.TemplateExporter.TemplateExporter(String,String,String,String,FileType,LayoutFormatterPreferences,SavePreferences,BlankLineBehaviour)",2,1,2,2
"org.jabref.logic.exporter.TemplateExporter.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",38,2,15,21
"org.jabref.logic.exporter.TemplateExporter.getLayoutFileName()",0,1,1,1
"org.jabref.logic.exporter.TemplateExporter.getLayoutFileNameWithExtension()",0,1,1,1
"org.jabref.logic.exporter.TemplateExporter.getReader(String)",7,1,2,5
"org.jabref.logic.exporter.TemplateExporter.readFormatterFile()",14,4,7,8
"org.jabref.logic.exporter.TemplateExporter.setCustomExport(boolean)",0,1,1,1
"org.jabref.logic.exporter.TemplateExporter.withEncoding(Charset)",0,1,1,1
"org.jabref.logic.exporter.XmpExporter.XmpExporter(XmpPreferences)",0,1,1,1
"org.jabref.logic.exporter.XmpExporter.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",9,2,4,5
"org.jabref.logic.exporter.XmpExporter.writeBibToXmp(Path,List<BibEntry>,Charset)",0,1,1,1
"org.jabref.logic.exporter.XmpExporterTest.exportSingleEntry(Path)",0,1,1,1
"org.jabref.logic.exporter.XmpExporterTest.exportSingleEntryWithPrivacyFilter(Path)",0,1,1,1
"org.jabref.logic.exporter.XmpExporterTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.XmpExporterTest.writeMultipleEntriesInASingleFile(Path)",0,1,1,1
"org.jabref.logic.exporter.XmpExporterTest.writeMultipleEntriesInDifferentFiles(Path)",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporter.XmpPdfExporter(XmpPreferences)",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporter.export(BibDatabaseContext,Path,Charset,List<BibEntry>)",1,1,2,2
"org.jabref.logic.exporter.XmpPdfExporterTest.createDefaultLinkedFile(String,Path)",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.initBibEntries()",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.provideBibEntriesWithInvalidPdfFileLinks()",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.provideBibEntriesWithValidPdfFileLinks()",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.providePathsToInvalidPDFs()",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.providePathsToValidPDFs()",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.setUp()",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.successfulExportToAllFilesOfEntry(BibEntry)",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.successfulExportToFileByPath(Path)",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.unsuccessfulExportToAllFilesOfEntry(BibEntry)",0,1,1,1
"org.jabref.logic.exporter.XmpPdfExporterTest.unsuccessfulExportToFileByPath(Path)",0,1,1,1
"org.jabref.logic.exporter.YamlExporterTest.exportForNoEntriesWritesNothing(Path)",0,1,1,1
"org.jabref.logic.exporter.YamlExporterTest.exportsCorrectContent(Path)",0,1,1,1
"org.jabref.logic.exporter.YamlExporterTest.formatsContentCorrect(Path)",0,1,1,1
"org.jabref.logic.exporter.YamlExporterTest.passesModifiedCharset(Path)",0,1,1,1
"org.jabref.logic.exporter.YamlExporterTest.passesModifiedCharsetASCII(Path)",0,1,1,1
"org.jabref.logic.exporter.YamlExporterTest.passesModifiedCharsetNull(Path)",0,1,1,1
"org.jabref.logic.exporter.YamlExporterTest.setUp()",0,1,1,1
"org.jabref.logic.externalfiles.ExternalFilesContentImporter.ExternalFilesContentImporter(GeneralPreferences,ImporterPreferences,ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.externalfiles.ExternalFilesContentImporter.importFromBibFile(Path,FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.externalfiles.ExternalFilesContentImporter.importPDFContent(Path)",1,1,2,2
"org.jabref.logic.externalfiles.LinkedFileHandler.LinkedFileHandler(LinkedFile,BibEntry,BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.logic.externalfiles.LinkedFileHandler.findExistingFile(LinkedFile,BibEntry,String)",1,1,2,2
"org.jabref.logic.externalfiles.LinkedFileHandler.getSuggestedFileName()",0,1,1,1
"org.jabref.logic.externalfiles.LinkedFileHandler.getSuggestedFileName(String)",0,1,1,1
"org.jabref.logic.externalfiles.LinkedFileHandler.moveToDefaultDirectory()",5,4,3,5
"org.jabref.logic.externalfiles.LinkedFileHandler.relativize(Path)",0,1,1,1
"org.jabref.logic.externalfiles.LinkedFileHandler.renameToName(String,boolean)",7,3,8,9
"org.jabref.logic.externalfiles.LinkedFileHandler.renameToSuggestedName()",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.allFormatterKeysAreUnique()",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.formatNotReturnsNull(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.formatOfEmptyStringReturnsEmpty(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.formatOfNullThrowsException(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.getDescriptionAlwaysNonEmpty(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.getExampleInputAlwaysNonEmpty(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.getFormatters()",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.getKeyReturnsNotEmpty(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.getKeyReturnsNotNull(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.getNameReturnsNotEmpty(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.getNameReturnsNotNull(Formatter)",0,1,1,1
"org.jabref.logic.formatter.FormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.Formatters.Formatters()",0,1,1,1
"org.jabref.logic.formatter.Formatters.getAll()",0,1,1,1
"org.jabref.logic.formatter.Formatters.getCaseChangers()",0,1,1,1
"org.jabref.logic.formatter.Formatters.getConverters()",0,1,1,1
"org.jabref.logic.formatter.Formatters.getFormatterForModifier(String)",4,8,8,8
"org.jabref.logic.formatter.Formatters.getOthers()",0,1,1,1
"org.jabref.logic.formatter.IdentityFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.IdentityFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.IdentityFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.IdentityFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.IdentityFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.IdentityFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.IdentityFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatter.format(String)",3,2,3,4
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatAddsSingleEnclosingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatDoesNotRemoveBracesInBrokenString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsDoubleEnclosingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsEmptyString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsNonMatchingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsOnlyMatchingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsShortString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsTripleEnclosingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsUnmatchedBracesAtBeginning()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatKeepsUnmatchedBracesAtEnd()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.formatStringWithMinimalRequiredLength()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatter.format(String)",1,1,2,2
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest.extractURLFormLink()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest.latexCommandsNotRemoved()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest.removeSpecialSymbolsFromURLLink()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest.urlencodedSlashesAreAlsoConverted()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest.validUrlUnmodified()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatterTest.formatReturnsEmptyForEmptyString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatterTest.formatReturnsEmptyForSomeString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ClearFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatter.format(String)",35,1,18,25
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatterTest.formatEscapesAmpersandsIfPresent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatterTest.formatReturnsSameTextIfNoAmpersandsPresent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatterTest.formatReturnsSameTextInLatexCommandIfOneAmpersandPresent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatterTest.formatReturnsSameTextInNewUserDefinedLatexCommandIfNoAmpersandsPresent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatterTest.formatEscapesUnderscoresIfPresent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatterTest.formatReturnsSameTextIfNoUnderscoresPresent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatter.format(String)",19,2,12,13
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatter.readTag(String,int)",3,2,1,3
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.formatCombinedAccent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.formatMultipleHtmlCharacters()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.formatWithoutHtmlCharactersReturnsSameString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.testBasic()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.testHTML()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.testHTMLCombiningAccents()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest.testHTMLRemoveTags()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.formatCombinedAccent()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.formatMultipleHtmlCharacters()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.formatWithoutHtmlCharactersReturnsSameString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.testBasic()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.testGreekLetter()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.testHTMLRemoveTags()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest.testUmlauts()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatterTest.escapePercentSignOnlnyOnceWithNumber()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatterTest.escapePercentSignOnlyOnce()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatterTest.preservePercentSign()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatterTest.test()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDate0Ddot0MdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDate0DdotMMdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDate0DdotMdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDate0MYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDate0MYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateDDdot0MdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateDDdotMMdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateDDdotMdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateDdot0MdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateDdotMMdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateDdotMdotYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateMMMCommaYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateMMMDCommaYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateMMMDDCommaYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateMMYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateMMYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateMYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateMYYYY()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateYYYYM()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateYYYYM0D()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateYYYYMD()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateYYYYMM()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatDateYYYYMM0D()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.dashAtTheBeginningIsKept()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.dashAtTheEndIsKept()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.dashesFollowedByASpaceAreKept()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.dashesPreceededByASpaceAreKept()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.dashesWithinWordsAreKept()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.formatExampleOfChangelog()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatterTest.plainAprilShouldBeApril()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialDotThenLast()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialThenLast()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.initialsThenLast()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenInitial()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenInitials()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.lastThenJuniorThenFirst()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testAndInName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testAvoidNameAffixes()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testAvoidPreposition()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testAvoidSpecialCharacter()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testCommaSeperatedNames()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testConcatenationOfAuthorsWithCommas()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testMultipleNameAffixes()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testMultipleSpaces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testNameAffixe()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testNormalizeAuthorList()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testOddCountOfCommas()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testOneCommaUntouched()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testPreposition()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testSemiCorrectNamesWithSemicolon()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.testUpperCaseSensitiveList()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAnd()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAndWithDash()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByAndWithLatex()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.threeAuthorsSeperatedByColon()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest.twoAuthorsSeperatedByColon()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatter.format(String)",5,4,3,5
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatterTest.test(String,String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatterTest.tests()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatter.format(String)",1,2,1,2
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.expectCorrect(String,String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.ignoreSuperscriptsInsideWords()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.replaceAllSuperscripts()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.replaceSuperscriptsIgnoresCase()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.replaceSuperscriptsInMultilineStrings()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.replacesSuperscript()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatter.RegexFormatter(String)",2,1,2,2
"org.jabref.logic.formatter.bibtexfields.RegexFormatter.format(String)",2,2,1,3
"org.jabref.logic.formatter.bibtexfields.RegexFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatter.replaceHonoringProtectedGroups(String)",3,1,4,4
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.constructorAllowsSpacesBetweenQuotes()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.constructorWithEmptyStringArgumentReturnUnchangedString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.constructorWithInvalidConstructorArgumentReturnUnchangedString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.escapedBracesAreNotReplaced()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.escapedBracesAreNotReplacedAndProtectionStillWorks()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.escapedBracesAreNotReplacedInTwoCases()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.formatCanRemoveMatchesWithEmptyReplacement()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.formatWithSyntaxErrorReturnUnchangedString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.protectedSpacesNotReplacedInSingleProtectedBlock()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.protectedSpacesNotReplacedInTwoProtectedBlocks()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest.spacesReplacedCorrectly()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.format(String)",5,3,4,5
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter.hasNegativeBraceCount(String)",6,3,2,5
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatDoesNotRemoveBracesInBrokenString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatKeepsEmptyString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatKeepsNonMatchingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatKeepsShortString()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatKeepsUnmatchedBracesAtBeginning()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatKeepsUnmatchedBracesAtEnd()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatRemovesBracesOnly()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatRemovesDoubleEnclosingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatRemovesOnlyMatchingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatRemovesSingleEnclosingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.formatRemovesTripleEnclosingBraces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatterTest.doNothingIfNoSpace()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatterTest.doNothingIfSingleSpace()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatterTest.removeAllButOneSpacesIfTwo()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatterTest.removeHyphensBeforeNewlines()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatterTest.removeHyphensBeforePlatformSpecificNewlines()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatterTest.withoutHyphensUnmodified()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatterTest.removeCarriageReturn()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatterTest.removeCarriageReturnLineFeed()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatterTest.removeLineFeed()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatterTest.removePlatformSpecificNewLine()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatterTest.withoutNewLineUnmodified()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatterTest.doNothingIfNoSpace()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatterTest.doNothingIfSingleSpace()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatterTest.removeAllButOneSpacesIfThree()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatterTest.removeAllButOneSpacesIfTwo()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormater.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormater.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormater.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormater.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormater.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormaterTest.doNothingIfNoTab()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormaterTest.removeMultipleTabs()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormaterTest.removeSingleTab()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormaterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatter.format(String)",2,1,2,2
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatterTest.formatDoi()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatterTest.invalidDoiIsKept()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest.removeCarriageReturnFeeds()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest.removeFormFeeds()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest.removeHorizontalTabulations()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest.removeLineFeeds()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest.removeMixedWhitespaceChars()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest.removeSeparatorSpaces()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeConverterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeConverterTest.testBasic()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeConverterTest.testUnicode()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeConverterTest.testUnicodeCombiningAccents()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeConverterTest.testUnicodeSingle()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter.format(String)",19,2,9,11
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatterTest.testCases()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatterTest.testFormat(String,String)",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatter.UnitsToLatexFormatter()",3,1,3,3
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatter.format(String)",2,2,2,3
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatterTest.test()",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.casechanger.CapitalizeFormatterTest.testInputs(String,String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatterTest.provideStringsForFormat()",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.casechanger.LowerCaseFormatterTest.test(String,String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter.ProtectTermsFormatter(ProtectedTermsLoader)",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter.format(String)",1,2,1,2
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter.format(String,List<String>)",1,1,2,2
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest.test()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest.testCaseSensitivity()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest.testCorrectOrderingOfTerms()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest.testDoNotProtectAlreadyProtected()",0,1,1,1
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest.testSingleWord()",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatterTest.test(String,String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatterTest.testData()",0,1,1,1
"org.jabref.logic.formatter.casechanger.Title.Title(String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.Title.getFirstWord()",1,2,2,2
"org.jabref.logic.formatter.casechanger.Title.getLastWord()",1,2,2,2
"org.jabref.logic.formatter.casechanger.Title.getWords()",0,1,1,1
"org.jabref.logic.formatter.casechanger.Title.toString()",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleCaseFormatter.format(String)",5,1,3,3
"org.jabref.logic.formatter.casechanger.TitleCaseFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleCaseFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleCaseFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleCaseFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleCaseFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleCaseFormatterTest.test(String,String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleCaseFormatterTest.testData()",0,1,1,1
"org.jabref.logic.formatter.casechanger.TitleParser.createWord(boolean[])",1,2,2,2
"org.jabref.logic.formatter.casechanger.TitleParser.determineProtectedChars(String)",5,1,1,4
"org.jabref.logic.formatter.casechanger.TitleParser.parse(String)",7,1,3,4
"org.jabref.logic.formatter.casechanger.TitleParser.reset()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatter.format(String)",8,3,5,7
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatterTest.terms()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatterTest.test(String,String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatterTest.upperCaseTest(String,String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.UpperCaseFormatterTest.upperCaseTests()",0,1,1,1
"org.jabref.logic.formatter.casechanger.Word.Word(char[],boolean[])",1,2,1,2
"org.jabref.logic.formatter.casechanger.Word.endsWithColon()",0,1,1,1
"org.jabref.logic.formatter.casechanger.Word.isLargerWord()",0,1,1,1
"org.jabref.logic.formatter.casechanger.Word.isSmallerWord()",0,1,1,1
"org.jabref.logic.formatter.casechanger.Word.isSmallerWord(String)",0,1,1,1
"org.jabref.logic.formatter.casechanger.Word.toLowerCase()",3,1,3,3
"org.jabref.logic.formatter.casechanger.Word.toString()",0,1,1,1
"org.jabref.logic.formatter.casechanger.Word.toUpperCase()",3,1,3,3
"org.jabref.logic.formatter.casechanger.Word.toUpperFirst()",6,1,4,4
"org.jabref.logic.formatter.minifier.MinifyNameListFormatter.abbreviateAuthor(String)",5,4,3,6
"org.jabref.logic.formatter.minifier.MinifyNameListFormatter.format(String)",1,2,1,2
"org.jabref.logic.formatter.minifier.MinifyNameListFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.minifier.MinifyNameListFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.minifier.MinifyNameListFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.minifier.MinifyNameListFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.minifier.MinifyNameListFormatterTest.minifyAuthorNames(String,String)",0,1,1,1
"org.jabref.logic.formatter.minifier.MinifyNameListFormatterTest.provideAuthorNames()",0,1,1,1
"org.jabref.logic.formatter.minifier.MinifyNameListFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatter.TruncateFormatter(int)",1,1,1,2
"org.jabref.logic.formatter.minifier.TruncateFormatter.format(String)",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatter.getDescription()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatter.getKey()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatter.getName()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatterTest.formatIgnoresNegativeIndex()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatterTest.formatKeepsInternalWhitespace()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatterTest.formatRemovesTrailingWhitespace()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatterTest.formatThrowsExceptionNullString()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatterTest.formatWorksWith0Index()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatterTest.formatWorksWith9999Length()",0,1,1,1
"org.jabref.logic.formatter.minifier.TruncateFormatterTest.formatWorksWithEmptyString()",0,1,1,1
"org.jabref.logic.git.GitHandler.GitHandler(Path)",3,1,3,3
"org.jabref.logic.git.GitHandler.checkoutBranch(String)",0,1,1,1
"org.jabref.logic.git.GitHandler.createCommitOnCurrentBranch(String,boolean)",3,1,3,3
"org.jabref.logic.git.GitHandler.getCurrentlyCheckedOutBranch()",0,1,1,1
"org.jabref.logic.git.GitHandler.getRefForBranch(String)",0,1,1,1
"org.jabref.logic.git.GitHandler.isGitRepository()",0,1,1,1
"org.jabref.logic.git.GitHandler.mergeBranches(String,String,MergeStrategy)",1,2,1,2
"org.jabref.logic.git.GitHandler.pullOnCurrentBranch()",1,1,2,2
"org.jabref.logic.git.GitHandler.pushCommitsToRemoteRepository()",1,1,2,2
"org.jabref.logic.git.GitHandler.setupGitIgnore()",2,1,3,3
"org.jabref.logic.git.GitHandlerTest.checkoutNewBranch()",0,1,1,1
"org.jabref.logic.git.GitHandlerTest.createCommitOnCurrentBranch()",0,1,1,1
"org.jabref.logic.git.GitHandlerTest.getCurrentlyCheckedOutBranch()",0,1,1,1
"org.jabref.logic.git.GitHandlerTest.setUpGitHandler()",0,1,1,1
"org.jabref.logic.git.SlrGitHandler.SlrGitHandler(Path)",0,1,1,1
"org.jabref.logic.git.SlrGitHandler.appendLatestSearchResultsOntoCurrentBranch(String,String)",0,1,1,1
"org.jabref.logic.git.SlrGitHandler.applyPatch(Map<Path, String>)",4,1,3,3
"org.jabref.logic.git.SlrGitHandler.calculatePatchOfNewSearchResults(String)",4,2,3,4
"org.jabref.logic.git.SlrGitHandler.parsePatchForAddedEntries(String)",22,4,12,13
"org.jabref.logic.git.SlrGitHandlerTest.applyPatch()",0,1,1,1
"org.jabref.logic.git.SlrGitHandlerTest.calculateDiffOnBranch()",0,1,1,1
"org.jabref.logic.git.SlrGitHandlerTest.calculatePatch()",0,1,1,1
"org.jabref.logic.git.SlrGitHandlerTest.setUpGitHandler()",0,1,1,1
"org.jabref.logic.groups.DefaultGroupsFactory.DefaultGroupsFactory()",0,1,1,1
"org.jabref.logic.groups.DefaultGroupsFactory.getAllEntriesGroup()",0,1,1,1
"org.jabref.logic.help.HelpFile.HelpFile(String)",0,1,1,1
"org.jabref.logic.help.HelpFile.getPageName()",0,1,1,1
"org.jabref.logic.help.HelpFileTest.getAllHelpFiles()",0,1,1,1
"org.jabref.logic.help.HelpFileTest.referToValidPage(HelpFile)",0,1,1,1
"org.jabref.logic.importer.AuthorListParser.buildWithAffix(Collection<Integer>,List<String>)",8,1,4,4
"org.jabref.logic.importer.AuthorListParser.concatTokens(List<Object>,int,int,int,boolean)",4,1,4,4
"org.jabref.logic.importer.AuthorListParser.getAuthor()",88,3,24,44
"org.jabref.logic.importer.AuthorListParser.getToken()",46,9,17,33
"org.jabref.logic.importer.AuthorListParser.parse(String)",16,1,7,10
"org.jabref.logic.importer.AuthorListParserTest.data()",0,1,1,1
"org.jabref.logic.importer.AuthorListParserTest.parseAuthorWithFirstNameAbbreviationContainingUmlaut()",0,1,1,1
"org.jabref.logic.importer.AuthorListParserTest.parseCorrectly(String,Author)",0,1,1,1
"org.jabref.logic.importer.BibDatabaseTestsWithFiles.resolveStrings()",0,1,1,1
"org.jabref.logic.importer.BibDatabaseTestsWithFiles.setUp()",0,1,1,1
"org.jabref.logic.importer.CompositeIdFetcher.CompositeIdFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.CompositeIdFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.CompositeIdFetcher.performSearchById(String)",4,5,5,5
"org.jabref.logic.importer.DatabaseFileLookupTest.setUp()",0,1,1,1
"org.jabref.logic.importer.DatabaseFileLookupTest.testTestDatabase()",0,1,1,1
"org.jabref.logic.importer.EntryBasedParserFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.EntryBasedParserFetcher.performSearch(BibEntry)",4,2,2,5
"org.jabref.logic.importer.FetcherException.FetcherException(String)",0,1,1,1
"org.jabref.logic.importer.FetcherException.FetcherException(String,String,Throwable)",0,1,1,1
"org.jabref.logic.importer.FetcherException.FetcherException(String,Throwable)",0,1,1,1
"org.jabref.logic.importer.FetcherResult.FetcherResult(TrustLevel,URL)",0,1,1,1
"org.jabref.logic.importer.FetcherResult.getSource()",0,1,1,1
"org.jabref.logic.importer.FetcherResult.getTrust()",0,1,1,1
"org.jabref.logic.importer.FulltextFetcher.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.FulltextFetchers.FulltextFetchers(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.FulltextFetchers.FulltextFetchers(Set<FulltextFetcher>)",0,1,1,1
"org.jabref.logic.importer.FulltextFetchers.findDoiForEntry(BibEntry)",1,1,2,2
"org.jabref.logic.importer.FulltextFetchers.findFullTextPDF(BibEntry)",1,1,2,2
"org.jabref.logic.importer.FulltextFetchers.getCallable(BibEntry,FulltextFetcher)",2,1,2,2
"org.jabref.logic.importer.FulltextFetchers.getCallables(BibEntry,Set<FulltextFetcher>)",0,1,1,1
"org.jabref.logic.importer.FulltextFetchers.getResults(Future<Optional<FetcherResult>>)",2,1,2,3
"org.jabref.logic.importer.FulltextFetchersTest.acceptPdfUrls()",0,1,1,1
"org.jabref.logic.importer.FulltextFetchersTest.higherTrustLevelWins()",0,1,1,1
"org.jabref.logic.importer.FulltextFetchersTest.noTrustLevel()",0,1,1,1
"org.jabref.logic.importer.FulltextFetchersTest.rejectNonPdfUrls()",0,1,1,1
"org.jabref.logic.importer.IdBasedParserFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.IdBasedParserFetcher.performSearchById(String)",6,3,4,7
"org.jabref.logic.importer.IdParserFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.IdParserFetcher.findIdentifier(BibEntry)",5,2,3,6
"org.jabref.logic.importer.ImportCleanup.ImportCleanup(BibDatabaseMode)",0,1,1,1
"org.jabref.logic.importer.ImportCleanup.doPostCleanup(BibEntry)",2,1,3,3
"org.jabref.logic.importer.ImportCleanup.doPostCleanup(Collection<BibEntry>)",0,1,1,1
"org.jabref.logic.importer.ImportDataTest.testTestingEnvironment()",0,1,1,1
"org.jabref.logic.importer.ImportException.ImportException(Exception)",0,1,1,1
"org.jabref.logic.importer.ImportException.ImportException(String)",0,1,1,1
"org.jabref.logic.importer.ImportException.ImportException(String,Exception)",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.ImportFormatPreferences(Set<CustomImporter>,Character,CitationKeyPatternPreferences,FieldContentFormatterPreferences,XmpPreferences,DOIPreferences,boolean)",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.getCitationKeyPatternPreferences()",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.getCustomImportList()",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.getDoiPreferences()",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.getFieldContentFormatterPreferences()",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.getKeywordSeparator()",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.getXmpPreferences()",0,1,1,1
"org.jabref.logic.importer.ImportFormatPreferences.isKeywordSyncEnabled()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReader.UnknownFormatImport.UnknownFormatImport(String,ParserResult)",0,1,1,1
"org.jabref.logic.importer.ImportFormatReader.getByCliId(String)",3,3,3,3
"org.jabref.logic.importer.ImportFormatReader.getImportFormatList()",1,1,2,2
"org.jabref.logic.importer.ImportFormatReader.getImportFormats()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReader.importFromFile(String,Path)",2,2,2,3
"org.jabref.logic.importer.ImportFormatReader.importUnknownFormat(CheckedFunction<Importer, ParserResult>,CheckedFunction<Importer, Boolean>)",8,4,3,6
"org.jabref.logic.importer.ImportFormatReader.importUnknownFormat(Path,FileUpdateMonitor)",7,2,5,5
"org.jabref.logic.importer.ImportFormatReader.importUnknownFormat(String)",0,1,1,1
"org.jabref.logic.importer.ImportFormatReader.resetImportFormats(ImporterPreferences,GeneralPreferences,ImportFormatPreferences,XmpPreferences,FileUpdateMonitor)",1,1,2,2
"org.jabref.logic.importer.ImportFormatReaderIntegrationTest.importFormats()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderIntegrationTest.setUp()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderIntegrationTest.testImportFormatFromFile(String,String,int)",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderIntegrationTest.testImportUnknownFormat(String,String,int)",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderIntegrationTest.testImportUnknownFormatFromString(String,String,int)",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderTestParameterless.importFromFileWithUnknownFormatThrowsException()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderTestParameterless.importUnknownFormatThrowsExceptionIfDataIsNull()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderTestParameterless.importUnknownFormatThrowsExceptionIfNoMatchingImporterWasFound()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderTestParameterless.importUnknownFormatThrowsExceptionIfPathIsNull()",0,1,1,1
"org.jabref.logic.importer.ImportFormatReaderTestParameterless.setUp()",0,1,1,1
"org.jabref.logic.importer.Importer.compareTo(Importer)",0,1,1,1
"org.jabref.logic.importer.Importer.equals(Object)",2,3,1,3
"org.jabref.logic.importer.Importer.getId()",3,1,3,3
"org.jabref.logic.importer.Importer.getReader(Path,Charset)",0,1,1,1
"org.jabref.logic.importer.Importer.getUTF16Reader(Path)",0,1,1,1
"org.jabref.logic.importer.Importer.getUTF8Reader(Path)",0,1,1,1
"org.jabref.logic.importer.Importer.hashCode()",0,1,1,1
"org.jabref.logic.importer.Importer.importDatabase(Path,Charset)",1,1,2,2
"org.jabref.logic.importer.Importer.importDatabase(String)",0,1,1,1
"org.jabref.logic.importer.Importer.isRecognizedFormat(Path,Charset)",0,1,1,1
"org.jabref.logic.importer.Importer.isRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.Importer.toString()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.ImporterPreferences(boolean,boolean,boolean,String)",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.generateNewKeyOnImportProperty()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.getGrobidURL()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.grobidEnabledProperty()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.grobidOptOutProperty()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.grobidURLProperty()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.isGenerateNewKeyOnImport()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.isGrobidEnabled()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.isGrobidOptOut()",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.setGenerateNewKeyOnImport(boolean)",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.setGrobidEnabled(boolean)",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.setGrobidOptOut(boolean)",0,1,1,1
"org.jabref.logic.importer.ImporterPreferences.setGrobidURL(String)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.getDescriptionDoesNotReturnNull(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.getFileTypeDoesNotReturnNull(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.getFormatterNameDoesNotReturnNull(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.getIdDoesNotContainWhitespace(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.getIdDoesNotReturnNull(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.getIdStripsSpecialCharactersAndConvertsToLowercase(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.importDatabaseWithNullForBufferedReaderThrowsException(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.importDatabaseWithNullForStringThrowsException(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.instancesToTest()",0,1,1,1
"org.jabref.logic.importer.ImporterTest.isRecognizedFormatWithNullForBufferedReaderThrowsException(Importer)",0,1,1,1
"org.jabref.logic.importer.ImporterTest.isRecognizedFormatWithNullForStringThrowsException(Importer)",0,1,1,1
"org.jabref.logic.importer.OpenDatabase.OpenDatabase()",0,1,1,1
"org.jabref.logic.importer.OpenDatabase.loadDatabase(Path,GeneralPreferences,ImportFormatPreferences,FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.importer.OpenDatabase.performLoadDatabaseMigrations(ParserResult,Character)",1,1,2,2
"org.jabref.logic.importer.OpenDatabaseTest.OpenDatabaseTest()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.correctlyParseEncodingWithoutNewline()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.entriesAreParsedHeader()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.entriesAreParsedHeaderAndSignature()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.entriesAreParsedNoHeader()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.setUp()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.useFallbackEncodingIfNoHeader()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.useFallbackEncodingIfUnknownHeader()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.useSpecifiedEncoding()",0,1,1,1
"org.jabref.logic.importer.OpenDatabaseTest.useSpecifiedEncodingWithSignature()",0,1,1,1
"org.jabref.logic.importer.PagedSearchBasedFetcher.getPageSize()",0,1,1,1
"org.jabref.logic.importer.PagedSearchBasedFetcher.performSearch(QueryNode)",0,1,1,1
"org.jabref.logic.importer.PagedSearchBasedFetcher.performSearchPaged(String,int)",2,2,2,3
"org.jabref.logic.importer.PagedSearchBasedParserFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.PagedSearchBasedParserFetcher.performSearch(QueryNode)",0,1,1,1
"org.jabref.logic.importer.PagedSearchBasedParserFetcher.performSearchPaged(QueryNode,int)",1,1,1,2
"org.jabref.logic.importer.ParseException.ParseException(String)",0,1,1,1
"org.jabref.logic.importer.ParseException.ParseException(String,Throwable)",0,1,1,1
"org.jabref.logic.importer.ParseException.ParseException(Throwable)",0,1,1,1
"org.jabref.logic.importer.Parser.parseEntries(String)",0,1,1,1
"org.jabref.logic.importer.ParserResult.ParserResult()",0,1,1,1
"org.jabref.logic.importer.ParserResult.ParserResult(BibDatabase)",0,1,1,1
"org.jabref.logic.importer.ParserResult.ParserResult(BibDatabase,MetaData,Set<BibEntryType>)",0,1,1,1
"org.jabref.logic.importer.ParserResult.ParserResult(Collection<BibEntry>)",0,1,1,1
"org.jabref.logic.importer.ParserResult.addException(Exception)",0,1,1,1
"org.jabref.logic.importer.ParserResult.addWarning(String)",1,1,2,2
"org.jabref.logic.importer.ParserResult.fromError(Exception)",0,1,1,1
"org.jabref.logic.importer.ParserResult.fromErrorMessage(String)",0,1,1,1
"org.jabref.logic.importer.ParserResult.getDatabase()",0,1,1,1
"org.jabref.logic.importer.ParserResult.getDatabaseContext()",0,1,1,1
"org.jabref.logic.importer.ParserResult.getEntryTypes()",0,1,1,1
"org.jabref.logic.importer.ParserResult.getErrorMessage()",0,1,1,1
"org.jabref.logic.importer.ParserResult.getErrorMessage(Exception)",1,1,2,2
"org.jabref.logic.importer.ParserResult.getMetaData()",0,1,1,1
"org.jabref.logic.importer.ParserResult.getPath()",0,1,1,1
"org.jabref.logic.importer.ParserResult.hasWarnings()",0,1,1,1
"org.jabref.logic.importer.ParserResult.isEmpty()",1,1,4,4
"org.jabref.logic.importer.ParserResult.isInvalid()",0,1,1,1
"org.jabref.logic.importer.ParserResult.setChangedOnMigration(boolean)",0,1,1,1
"org.jabref.logic.importer.ParserResult.setDatabaseContext(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.importer.ParserResult.setInvalid(boolean)",0,1,1,1
"org.jabref.logic.importer.ParserResult.setMetaData(MetaData)",0,1,1,1
"org.jabref.logic.importer.ParserResult.setPath(Path)",0,1,1,1
"org.jabref.logic.importer.ParserResult.setToOpenTab()",0,1,1,1
"org.jabref.logic.importer.ParserResult.toOpenTab()",0,1,1,1
"org.jabref.logic.importer.ParserResult.warnings()",0,1,1,1
"org.jabref.logic.importer.ParserResult.wasChangedOnMigration()",0,1,1,1
"org.jabref.logic.importer.ParserResultTest.isEmptyForNewParseResult()",0,1,1,1
"org.jabref.logic.importer.ParserResultTest.isNotEmptyForBibDatabaseWithOneEntry()",0,1,1,1
"org.jabref.logic.importer.QueryParser.parseQueryStringIntoComplexQuery(String)",1,1,2,2
"org.jabref.logic.importer.QueryParserTest.convertAlphabeticallyFirstJournalField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertAuthorField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertDefaultField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertExplicitDefaultField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertJournalField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertMultipleValuesWithTheSameField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertNumericallyFirstYearField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.QueryParserTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.SearchBasedFetcher.performSearch(String)",2,2,2,3
"org.jabref.logic.importer.SearchBasedParserFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.SearchBasedParserFetcher.performSearch(QueryNode)",1,1,1,2
"org.jabref.logic.importer.WebFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.WebFetcher.getUrlDownload(URL)",0,1,1,1
"org.jabref.logic.importer.WebFetchers.WebFetchers()",0,1,1,1
"org.jabref.logic.importer.WebFetchers.getEntryBasedFetchers(ImporterPreferences,ImportFormatPreferences,FilePreferences,BibDatabaseContext,Charset)",0,1,1,1
"org.jabref.logic.importer.WebFetchers.getFullTextFetchers(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.WebFetchers.getIdBasedFetcherForField(Field,ImportFormatPreferences)",4,4,4,4
"org.jabref.logic.importer.WebFetchers.getIdBasedFetchers(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.WebFetchers.getIdFetcherForField(Field)",1,2,2,2
"org.jabref.logic.importer.WebFetchers.getIdFetcherForIdentifier(Class<T>)",2,2,2,2
"org.jabref.logic.importer.WebFetchers.getIdFetchers(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.WebFetchers.getSearchBasedFetchers(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.WebFetchersTest.getClasses(Collection<?>)",0,1,1,1
"org.jabref.logic.importer.WebFetchersTest.getEntryBasedFetchersReturnsAllFetcherDerivingFromEntryBasedFetcher()",0,1,1,1
"org.jabref.logic.importer.WebFetchersTest.getFullTextFetchersReturnsAllFetcherDerivingFromFullTextFetcher()",0,1,1,1
"org.jabref.logic.importer.WebFetchersTest.getIdBasedFetchersReturnsAllFetcherDerivingFromIdBasedFetcher()",0,1,1,1
"org.jabref.logic.importer.WebFetchersTest.getIdFetchersReturnsAllFetcherDerivingFromIdFetcher()",0,1,1,1
"org.jabref.logic.importer.WebFetchersTest.getSearchBasedFetchersReturnsAllFetcherDerivingFromSearchBasedFetcher()",0,1,1,1
"org.jabref.logic.importer.WebFetchersTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcher.ACMPortalFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcher.createQueryString(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcherTest.searchByQueryFindsEntry()",1,1,2,2
"org.jabref.logic.importer.fetcher.ACMPortalFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcherTest.testGetParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACMPortalFetcherTest.testGetURLForQuery()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACS.findFullText(BibEntry)",2,3,3,3
"org.jabref.logic.importer.fetcher.ACS.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACSTest.entityWithoutDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACSTest.findByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACSTest.notFoundByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACSTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.ACSTest.trustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcher.AbstractIsbnFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcher.ensureThatIsbnIsValid(String)",1,2,2,2
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.searchByIdReturnsEmptyWithEmptyISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.searchByIdSuccessfulWithLongISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.searchByIdThrowsExceptionForInvalidISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.searchByIdThrowsExceptionForLongInvalidISB()",0,1,1,1
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest.searchByIdThrowsExceptionForShortInvalidISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.ApsFetcher.findFullText(BibEntry)",7,4,5,5
"org.jabref.logic.importer.fetcher.ApsFetcher.getId(String)",2,2,3,3
"org.jabref.logic.importer.fetcher.ApsFetcher.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.ApsFetcherTest.findFullTextFromDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.ApsFetcherTest.findFullTextFromLowercaseDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.ApsFetcherTest.notFindFullTextForUnauthorized()",0,1,1,1
"org.jabref.logic.importer.fetcher.ApsFetcherTest.notFindFullTextForUnknownEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.ApsFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.ArXiv(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry.ArXivEntry(Node)",9,1,5,6
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry.correctLineBreaks(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry.getDate()",3,2,2,2
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry.getId()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry.getIdString()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry.getPdfUrl()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry.toBibEntry(Character)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.callApi(String,List<ArXivIdentifier>,int,int)",6,3,4,6
"org.jabref.logic.importer.fetcher.ArXiv.filterYears(List<BibEntry>,ArXivQueryTransformer)",2,1,3,3
"org.jabref.logic.importer.fetcher.ArXiv.findFullText(BibEntry)",1,1,2,2
"org.jabref.logic.importer.fetcher.ArXiv.findIdentifier(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.getException(Document)",3,3,3,3
"org.jabref.logic.importer.fetcher.ArXiv.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.getIdentifierName()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.performSearchById(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.performSearchPaged(QueryNode,int)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.queryApi(String,List<ArXivIdentifier>,int,int)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.searchForEntries(BibEntry)",6,4,5,5
"org.jabref.logic.importer.fetcher.ArXiv.searchForEntries(String,int)",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXiv.searchForEntry(String)",2,2,2,2
"org.jabref.logic.importer.fetcher.ArXiv.searchForEntryById(String)",3,3,3,3
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByDOINotAvailableInCatalog()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByEprint()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByEprintWithPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByEprintWithUnknownDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByTitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByTitleAndPartOfAuthor()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByTitleWithColonAndJournalWithoutEprint()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByTitleWithColonAndUrlWithoutEprint()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByTitleWithCurlyBracket()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextByTitleWithCurlyBracketAndPartOfAuthor()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextEntityWithoutDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextForEmptyEntryResultsEmptyOptional()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextRejectsNullParameter()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.findFullTextTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.getFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.getPagedFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.getTestAuthors()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.getTestJournal()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.notFindFullTextByUnknownDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.notFindFullTextByUnknownId()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEmptyId()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByIdWith4Digits()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByIdWith4DigitsAndPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByIdWith4DigitsAndPrefixAndNotTrimmed()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByIdWith4DigitsAndVersion()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByIdWith5Digits()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByOldId()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByPartOfTitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchEntryByPartOfTitleWithAcuteAccent()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchIdentifierForSlicePaper()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchWithHttpUrl()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchWithHttpsUrl()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchWithHttpsUrlNotTrimmed()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.searchWithMalformedIdThrowsException()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.supportsBooleanANDSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.supportsPhraseSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.supportsPhraseSearchAndMatchesExact()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.supportsYearRangeSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.ArXivTest.supportsYearSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.AstrophysicsDataSystem(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.buildPostData(Collection<String>)",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.fetchBibcodes(URL)",3,1,3,4
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getURLForEntry(BibEntry)",2,1,2,2
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getURLForQuery(QueryNode,int)",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getURLforExport()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getUrlDownload(URL)",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.performSearch(BibEntry)",4,2,3,5
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.performSearch(QueryNode)",2,1,1,3
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.performSearchById(String)",5,3,4,6
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.performSearchByIds(Collection<String>)",6,3,4,7
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem.performSearchPaged(QueryNode,int)",2,1,1,3
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.getPagedFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.performSearchByQueryPaged_invalidAuthorsReturnEmptyPages()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.performSearchByQueryPaged_searchLimitsSize()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.searchByEntryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.searchByQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testPerformSearchByFamaeyMcGaughEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testPerformSearchByIdEmptyDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testPerformSearchByIdInvalidDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testPerformSearchByIngersollPollardEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testPerformSearchByLuceyPaulEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testPerformSearchBySunWelchEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest.testPerformSearchByXiongSunEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.BibsonomyScraper.BibsonomyScraper()",0,1,1,1
"org.jabref.logic.importer.fetcher.BibsonomyScraper.getEntry(String,ImportFormatPreferences)",3,1,4,4
"org.jabref.logic.importer.fetcher.CiteSeer.CiteSeer()",0,1,1,1
"org.jabref.logic.importer.fetcher.CiteSeer.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.CiteSeer.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.CiteSeer.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.CiteSeer.getParser()",2,1,2,2
"org.jabref.logic.importer.fetcher.CiteSeer.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.CiteSeerTest.searchByQueryFindsEntryCopingTheoryAndResearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.CiteSeerTest.searchByQueryFindsEntryRigorousDerivation()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcher.CollectionOfComputerScienceBibliographiesFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcher.doPostCleanup(BibEntry)",6,2,3,4
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcherTest.getNameReturnsCorrectName()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcherTest.getUrlForQueryReturnsCorrectUrl()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcherTest.performSearchReturnsEmptyListForEmptySearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcherTest.performSearchReturnsMatchingMultipleEntries()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParser.CollectionOfComputerScienceBibliographiesParser(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParser.matchRegexFromInputStreamHtml(InputStream,Pattern)",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParser.parseBibtexStringsFromLinks(List<String>)",1,1,2,2
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParser.parseEntries(InputStream)",1,1,1,2
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParserTest.parseEntriesReturnsEmptyListIfXmlHasNoResults()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParserTest.parseEntriesReturnsMultipleBibEntriesInListIfXmlHasMultipleResults()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParserTest.parseEntriesReturnsOneBibEntryInListIfXmlHasSingleResult()",0,1,1,1
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParserTest.parseXmlAndCheckResults(String,List<String>)",1,1,2,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQuery(List<String>,List<String>,List<String>,List<String>,Integer,Integer,Integer,String,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.ComplexSearchQueryBuilder()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.DOI(String)",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.abstractPhrase(String)",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.author(String)",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.build()",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.defaultFieldPhrase(String)",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.fromYearAndToYear(Integer,Integer)",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.journal(String)",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.parseYearRange(String)",4,1,2,4
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.singleYear(Integer)",2,2,2,3
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.stringListIsBlank(List<String>)",1,1,2,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.terms(Collection<Term>)",2,1,9,9
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.textSearchFieldsAndYearFieldsAreEmpty()",1,1,7,7
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.titlePhrase(String)",1,2,1,2
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder.yearFieldsAreEmpty()",1,1,3,3
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.builder()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.equals(Object)",24,11,11,21
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.fromTerms(List<Term>)",2,1,9,9
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getAbstractPhrases()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getAuthors()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getDefaultFieldPhrases()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getFromYear()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getJournal()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getSingleYear()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getTitlePhrases()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.getToYear()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.hashCode()",0,1,1,1
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.toString()",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeIdFetcherTest.performSearchByIdReturnsCorrectEntryForIdentifier(String,BibEntry,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeIdFetcherTest.performSearchByIdReturnsEmptyForInvalidId(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeIdFetcherTest.provideTestData()",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeIdFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcher.CompositeSearchBasedFetcher(Set<SearchBasedFetcher>,int)",1,2,1,2
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcher.performSearch(QueryNode)",2,1,2,2
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcherTest.createCompositeFetcherWithNullSet()",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcherTest.performSearchOnEmptyQuery(Set<SearchBasedFetcher>)",0,1,1,1
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcherTest.performSearchOnNonEmptyQuery(Set<SearchBasedFetcher>)",3,1,3,3
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcherTest.performSearchParameters()",6,1,4,4
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcherTest.performSearchWithoutFetchers()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRef.convertType(String)",1,1,1,2
"org.jabref.logic.importer.fetcher.CrossRef.doPostCleanup(BibEntry)",1,1,2,2
"org.jabref.logic.importer.fetcher.CrossRef.extractIdentifier(BibEntry,List<BibEntry>)",5,4,4,4
"org.jabref.logic.importer.fetcher.CrossRef.getIdentifierName()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRef.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRef.getParser()",8,4,5,5
"org.jabref.logic.importer.fetcher.CrossRef.getURLForEntry(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRef.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRef.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRef.jsonItemToBibEntry(JSONObject)",1,1,1,2
"org.jabref.logic.importer.fetcher.CrossRef.toAuthors(JSONArray)",1,2,1,2
"org.jabref.logic.importer.fetcher.CrossRefTest.acceptTitleUnderThreshold()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findByAuthors()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findByEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findExactData()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findMissingAuthor()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findTitleOnly()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findWithSubtitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.findWrongAuthor()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.notAcceptTitleOverThreshold()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.notFindIncompleteTitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.performSearchByEmptyId()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.performSearchByEmptyQuery()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.performSearchByIdFindsPaperWithoutTitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.CrossRefTest.testPerformSearchValidReturnNothingDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcher.DBLPFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcherTest.findNothing()",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcherTest.findSingleEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcherTest.findSingleEntryUsingComplexOperators()",0,1,1,1
"org.jabref.logic.importer.fetcher.DBLPFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcher.DOAJFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcher.addPath(URIBuilder,String)",3,2,3,3
"org.jabref.logic.importer.fetcher.DOAJFetcher.appendSegmentToPath(String,String)",3,2,2,4
"org.jabref.logic.importer.fetcher.DOAJFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcher.getParser()",5,1,3,3
"org.jabref.logic.importer.fetcher.DOAJFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcher.parseBibJSONtoBibtex(JSONObject,Character)",50,1,25,25
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.appendSingleWord()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.appendSingleWordWithSlash()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.appendSlash()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.appendTwoWords()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.searchByEmptyQuery()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.searchByQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.DOAJFetcherTest.testBibJSONConverter()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVA.DiVA(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVA.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVA.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVA.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVA.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVA.isValidId(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVATest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVATest.testEmptyId()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVATest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVATest.testInvalidIdentifier()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVATest.testPerformSearchById()",0,1,1,1
"org.jabref.logic.importer.fetcher.DiVATest.testValidIdentifier()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcher.DoiFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcher.getAgency(DOI)",2,1,3,3
"org.jabref.logic.importer.fetcher.DoiFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcher.isAPSJournal(BibEntry,String)",2,2,2,3
"org.jabref.logic.importer.fetcher.DoiFetcher.performSearch(BibEntry)",2,2,2,2
"org.jabref.logic.importer.fetcher.DoiFetcher.performSearchById(String)",17,3,10,12
"org.jabref.logic.importer.fetcher.DoiFetcher.setPageCountToArticleId(BibEntry,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testAPSJournalCopiesArticleIdToPageField()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testPerformSearchBurd2011()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testPerformSearchDecker2007()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testPerformSearchEmptyDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testPerformSearchIannarelli2019()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testPerformSearchInvalidDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiFetcherTest.testPerformSearchNonTrimmedDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolution.DoiResolution(DOIPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolution.citationMetaTag(Document)",3,2,3,3
"org.jabref.logic.importer.fetcher.DoiResolution.findDistinctLinks(List<URL>)",2,3,3,3
"org.jabref.logic.importer.fetcher.DoiResolution.findEmbeddedLink(Document,URL)",3,2,3,3
"org.jabref.logic.importer.fetcher.DoiResolution.findFullText(BibEntry)",19,9,14,16
"org.jabref.logic.importer.fetcher.DoiResolution.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.citationMetaTagLeadsToFulltext()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.entityWithoutDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.linkWithPdfInTitleTag()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.linkWithPdfStringLeadsToFulltext()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.notFoundByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.notReturnAnythingWhenMultipleLinksAreFound()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.returnAnythingWhenBehindSpringerPayWall()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.setup()",0,1,1,1
"org.jabref.logic.importer.fetcher.DoiResolutionTest.trustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.FulltextFetcherTest.fetcherProvider()",0,1,1,1
"org.jabref.logic.importer.fetcher.FulltextFetcherTest.findFullTextRejectsNullParameter(FulltextFetcher)",0,1,1,1
"org.jabref.logic.importer.fetcher.FulltextFetcherTest.findFullTextWithEmptyEntryFindsNothing(FulltextFetcher)",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholar.GoogleScholar(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholar.addHitsFromQuery(List<BibEntry>,String)",2,2,3,3
"org.jabref.logic.importer.fetcher.GoogleScholar.downloadEntry(String)",6,3,4,4
"org.jabref.logic.importer.fetcher.GoogleScholar.findFullText(BibEntry)",2,2,2,3
"org.jabref.logic.importer.fetcher.GoogleScholar.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholar.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholar.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholar.needsCaptcha(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholar.obtainAndModifyCookie()",2,1,2,3
"org.jabref.logic.importer.fetcher.GoogleScholar.performSearchPaged(QueryNode,int)",6,2,5,5
"org.jabref.logic.importer.fetcher.GoogleScholar.search(String)",8,5,6,6
"org.jabref.logic.importer.fetcher.GoogleScholarTest.findManyEntries()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.findSingleEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.getFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.getPagedFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.getTestAuthors()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.getTestJournal()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.linkFound()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.noLinkFound()",0,1,1,1
"org.jabref.logic.importer.fetcher.GoogleScholarTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcher.GrobidCitationFetcher(ImportFormatPreferences,GrobidService)",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcher.GrobidCitationFetcher(ImporterPreferences,ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcher.parseUsingGrobid(String)",2,1,3,3
"org.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcher.performSearch(String)",1,1,2,2
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectResultTest(String,BibEntry,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchCorrectlySplitsStringTest()",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithEmptyStringsTest()",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.grobidPerformSearchWithInvalidDataTest(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.performSearchThrowsExceptionInCaseOfConnectionIssues()",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.provideExamplesForCorrectResultTest()",0,1,1,1
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest.provideInvalidInput()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.complexSearchQueryURLCorrect()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.simpleSearchQueryURLCorrect()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.testPerformSearch591166003()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.testPerformSearch66391437X()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.testPerformSearchEmpty()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkFetcherTest.testPerformSearchMatchingMultipleEntries()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkParserTest.doTest(String,int,List<String>)",1,1,2,2
"org.jabref.logic.importer.fetcher.GvkParserTest.emptyResult()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkParserTest.resultFor797485368()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkParserTest.subTitleTest()",0,1,1,1
"org.jabref.logic.importer.fetcher.GvkParserTest.testGMP()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEE.IEEE(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEE.findFullText(BibEntry)",14,3,11,11
"org.jabref.logic.importer.fetcher.IEEE.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEE.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEE.getParser()",15,1,6,6
"org.jabref.logic.importer.fetcher.IEEE.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEE.getURLForQuery(QueryNode,int)",5,1,6,6
"org.jabref.logic.importer.fetcher.IEEE.parseJsonResponse(JSONObject,Character)",7,1,8,8
"org.jabref.logic.importer.fetcher.IEEETest.findByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.findByDOIButNotURL()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.findByDocumentUrl()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.findByOldURL()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.findByURL()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.getFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.getPagedFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.getTestAuthors()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.getTestJournal()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.notFoundByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.notFoundByURL()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.searchByPlainQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.searchByQuotedQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.searchResultHasNoKeywordTerms()",0,1,1,1
"org.jabref.logic.importer.fetcher.IEEETest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcher.INSPIREFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcher.getUrlDownload(URL)",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByIdentifierFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcherTest.searchByQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.INSPIREFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.IacrEprintFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.createEntryFromIacrCitation(String)",2,2,3,3
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.getAbstract(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.getHtml(String)",1,1,2,2
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.getLatestDate(String)",5,3,5,5
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.getRequiredValueBetween(String,String,String)",2,2,2,2
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.getVersion(String,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.isFromOrAfterYear2000(BibEntry)",1,2,2,2
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.parseSingleDateFromWebsite(String)",9,1,6,6
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.performSearchById(String)",2,2,3,3
"org.jabref.logic.importer.fetcher.IacrEprintFetcher.setAdditionalFields(BibEntry,String)",2,1,2,2
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.allNonWithdrawnIdsWithOldHtmlFormat()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.getIdsFor(int,int)",1,1,2,2
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdForWithdrawnPaperFails()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithEmptyIdFails()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithInvalidIdFails()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithInvalidReportNumberFails()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithInvalidYearFails()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithOldHtmlFormatAndCheckDate()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithOldHtmlFormatWithoutDateCheck(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithValidId1()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithValidId2()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchByIdWithValidIdAndNonAsciiChars()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.searchForNonexistentIdFails()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcher.IsbnFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcher.performSearch(BibEntry)",2,2,2,2
"org.jabref.logic.importer.fetcher.IsbnFetcher.performSearchById(String)",2,2,3,3
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchByEntryWithISBNSuccessful()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchByIdReturnsEmptyWithEmptyISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchByIdSuccessfulWithLongISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchByIdSuccessfulWithShortISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchByIdThrowsExceptionForInvalidISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchByIdThrowsExceptionForLongInvalidISB()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchByIdThrowsExceptionForShortInvalidISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.searchForIsbnAvailableAtOttoBibButNonOnEbookDe()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnFetcherTest.testName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcher.IsbnViaEbookDeFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcher.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcherTest.authorsAreCorrectlyFormatted()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcherTest.searchByIdSuccessfulWithLongISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcherTest.searchByIdSuccessfulWithShortISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcherTest.searchForValidButNotFoundISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcherTest.testName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcher.IsbnViaOttoBibFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcher.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcher.performSearchById(String)",5,2,4,6
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcherTest.authorsAreCorrectlyFormatted()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcherTest.searchByIdSuccessfulWithLongISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcherTest.searchByIdSuccessfulWithShortISBN()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcherTest.testIsbnNeitherAvaiableOnEbookDeNorOrViaChimbori()",0,1,1,1
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcherTest.testName()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcher.JstorFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcher.findFullText(BibEntry)",2,3,3,3
"org.jabref.logic.importer.fetcher.JstorFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcher.getParser()",6,2,3,4
"org.jabref.logic.importer.fetcher.JstorFetcher.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcher.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcher.getUrlForIdentifier(String)",3,2,2,4
"org.jabref.logic.importer.fetcher.JstorFetcherTest.fetchPDF()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.getFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.getTestAuthors()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.getTestJournal()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.searchById()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.searchByTitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.supportsJournalSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.supportsYearRangeSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.JstorFetcherTest.supportsYearSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongress.LibraryOfCongress(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongress.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongress.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongress.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongressTest.performSearchByEmptyId()",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongressTest.performSearchById()",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongressTest.performSearchByInvalidId()",0,1,1,1
"org.jabref.logic.importer.fetcher.LibraryOfCongressTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNet.MathSciNet(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNet.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNet.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNet.getParser()",2,1,2,2
"org.jabref.logic.importer.fetcher.MathSciNet.getURLForEntry(BibEntry)",1,2,2,2
"org.jabref.logic.importer.fetcher.MathSciNet.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNet.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNetTest.searchByEntryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNetTest.searchByIdFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNetTest.searchByIdInEntryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNetTest.searchByQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.MathSciNetTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcher.createSearchUrl(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcher.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcher.fetchMedline(List<String>)",3,1,4,4
"org.jabref.logic.importer.fetcher.MedlineFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcher.getPubMedIdsFromQuery(String)",21,4,6,12
"org.jabref.logic.importer.fetcher.MedlineFetcher.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcher.performSearch(QueryNode)",7,3,5,5
"org.jabref.logic.importer.fetcher.MedlineFetcher.replaceCommaWithAND(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testEmptyEntryList()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testEmptyInput()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testInvalidSearchTerm()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testMultipleEntries()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testSearchByIDEndharti()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testSearchByIDIchikawa()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testSearchByIDSari()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedlineFetcherTest.testSearchByIDWijedasa()",0,1,1,1
"org.jabref.logic.importer.fetcher.Medra.convertType(String)",1,1,1,2
"org.jabref.logic.importer.fetcher.Medra.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.Medra.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.Medra.getParser()",2,2,2,2
"org.jabref.logic.importer.fetcher.Medra.getUrlDownload(URL)",0,1,1,1
"org.jabref.logic.importer.fetcher.Medra.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.Medra.jsonItemToBibEntry(JSONObject)",1,1,1,2
"org.jabref.logic.importer.fetcher.Medra.toAuthors(JSONArray)",3,2,2,3
"org.jabref.logic.importer.fetcher.MedraTest.getDoiBibEntryPairs()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedraTest.testDoiBibEntryPairs(String,Optional<BibEntry>)",0,1,1,1
"org.jabref.logic.importer.fetcher.MedraTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.MedraTest.testPerformSearchEmptyDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcher.MrDLibFetcher(String,Version,MrDlibPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcher.constructQuery(String)",4,1,5,5
"org.jabref.logic.importer.fetcher.MrDLibFetcher.getDescription()",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcher.getHeading()",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcher.makeServerRequest(String)",1,1,1,2
"org.jabref.logic.importer.fetcher.MrDLibFetcher.performSearch(BibEntry)",7,2,4,4
"org.jabref.logic.importer.fetcher.MrDLibFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcherTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcherTest.testPerformSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.MrDLibFetcherTest.testPerformSearchForHornecker2006()",0,1,1,1
"org.jabref.logic.importer.fetcher.OpenAccessDoi.findFullText(BibEntry)",2,2,2,3
"org.jabref.logic.importer.fetcher.OpenAccessDoi.findFullText(DOI)",2,1,2,2
"org.jabref.logic.importer.fetcher.OpenAccessDoi.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.OpenAccessDoiTest.entryWithoutDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.OpenAccessDoiTest.findByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.OpenAccessDoiTest.notFoundByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.OpenAccessDoiTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.OpenAccessDoiTest.trustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.PagedSearchFetcherTest.pageSearchReturnsUniqueResultsPerPage()",1,1,2,2
"org.jabref.logic.importer.fetcher.RfcFetcher.RfcFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcher.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcher.getUrlForIdentifier(String)",3,1,2,3
"org.jabref.logic.importer.fetcher.RfcFetcherTest.getNameReturnsEqualIdName()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.performSearchByIdFindsEntryWithDraftIdentifier()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.performSearchByIdFindsEntryWithRfcPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.performSearchByIdFindsEntryWithoutRfcPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.performSearchByIdFindsNothingWithInvalidIdentifier()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.performSearchByIdFindsNothingWithValidDraftIdentifier()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.performSearchByIdFindsNothingWithValidIdentifier()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.performSearchByIdFindsNothingWithoutIdentifier()",0,1,1,1
"org.jabref.logic.importer.fetcher.RfcFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.ScienceDirect.findFullText(BibEntry)",8,7,8,8
"org.jabref.logic.importer.fetcher.ScienceDirect.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.ScienceDirect.getUrlByDoi(String)",4,1,4,4
"org.jabref.logic.importer.fetcher.ScienceDirectTest.findByDoiNewPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.ScienceDirectTest.findByDoiOldPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.ScienceDirectTest.findByDoiWorksForBoneArticle()",0,1,1,1
"org.jabref.logic.importer.fetcher.ScienceDirectTest.notFoundByDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.ScienceDirectTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.getTestYear()",0,1,1,1
"org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsAuthorSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsJournalSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearRangeSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SearchBasedFetcherCapabilityTest.supportsYearSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcher.constructComplexQueryString(ComplexSearchQuery)",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcher.getParser()",5,1,3,3
"org.jabref.logic.importer.fetcher.SpringerFetcher.getURLForQuery(QueryNode,int)",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcher.parseSpringerJSONtoBibtex(JSONObject)",39,1,19,19
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.getFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.getPagedFetcher()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.getTestAuthors()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.getTestJournal()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.searchByEmptyQueryFindsNothing()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.searchByQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.supportsBooleanANDSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.supportsPhraseSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.supportsYearRangeSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.supportsYearSearch()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerFetcherTest.testSpringerJSONToBibtex()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLink.findFullText(BibEntry)",5,4,5,5
"org.jabref.logic.importer.fetcher.SpringerLink.getTrustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLinkTest.doiNotPresent()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLinkTest.entityWithoutDoi()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLinkTest.findByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLinkTest.notFoundByDOI()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLinkTest.rejectNullParameter()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLinkTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.SpringerLinkTest.trustLevel()",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcher.TitleFetcher(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcher.getHelpPage()",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcher.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcher.performSearchById(String)",2,3,3,3
"org.jabref.logic.importer.fetcher.TitleFetcherTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcherTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcherTest.testPerformSearchEmptyTitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcherTest.testPerformSearchInvalidTitle()",0,1,1,1
"org.jabref.logic.importer.fetcher.TitleFetcherTest.testPerformSearchKopp2007()",0,1,1,1
"org.jabref.logic.importer.fetcher.TrustLevel.TrustLevel(int)",0,1,1,1
"org.jabref.logic.importer.fetcher.TrustLevel.getTrustScore()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATH.ZbMATH(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATH.doPostCleanup(BibEntry)",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATH.getName()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATH.getParser()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATH.getURLForEntry(BibEntry)",7,3,6,6
"org.jabref.logic.importer.fetcher.ZbMATH.getURLForQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATH.getUrlForIdentifier(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATHTest.searchByEntryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATHTest.searchByIdFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATHTest.searchByIdInEntryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATHTest.searchByNoneEntryFindsNothing()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATHTest.searchByQueryFindsEntry()",0,1,1,1
"org.jabref.logic.importer.fetcher.ZbMATHTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.createKeyValuePair(String,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.createKeyValuePair(String,String,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.handleDoi(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.handleOtherField(String,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.handleUnFieldedTerm(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.handleYearRange(String)",2,2,2,3
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.parseYearRange(String)",4,1,2,3
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.removeOuterBraces(String)",2,2,3,3
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.transform(BooleanQueryNode)",3,2,3,3
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.transform(FieldQueryNode)",7,8,11,11
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.transform(ModifierQueryNode)",2,2,2,2
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.transform(QueryNode)",6,5,5,5
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer.transformLuceneQuery(QueryNode)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.handleUnFieldedTerm(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.handleOtherField(String,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.handleUnFieldedTerm(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.getArticleNumber()",1,1,2,2
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.getJournal()",1,1,2,2
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.handleArticleNumber(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.handleOtherField(String,String)",1,1,2,2
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.handleUnFieldedTerm(String)",1,2,2,2
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.convertJournalField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.getTitleTestData()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest.testStopWordRemoval(String,String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertAuthorField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertExplicitUnFieldedTerm()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertJournalField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertMultipleValuesWithTheSameField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.convertUnFieldedTerm()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.groupedOperations()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest.notOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer.handleYearRange(String)",1,2,1,2
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.YearAndYearRangeByFilteringQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.YearAndYearRangeByFilteringQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.YearRangeByFilteringQueryTransformer.getEndYear()",1,1,2,2
"org.jabref.logic.importer.fetcher.transformers.YearRangeByFilteringQueryTransformer.getStartYear()",1,1,2,2
"org.jabref.logic.importer.fetcher.transformers.YearRangeByFilteringQueryTransformer.handleYearRange(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.YearRangeByFilteringQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.getLogicalAndOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.getLogicalNotOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.getLogicalOrOperator()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.handleAuthor(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.handleJournal(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.handleTitle(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.handleUnFieldedTerm(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.handleYear(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer.handleYearRange(String)",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.convertYearRangeField()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getAuthorPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getJournalPrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTitlePrefix()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getTransformer()",0,1,1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest.getUnFieldedPrefix()",0,1,1,1
"org.jabref.logic.importer.fileformat.ACMPortalParser.getBibEntriesFromDoiList(List<String>)",7,1,4,5
"org.jabref.logic.importer.fileformat.ACMPortalParser.getUrlFromDoiList(List<String>)",0,1,1,1
"org.jabref.logic.importer.fileformat.ACMPortalParser.parseBibEntry(String)",23,1,20,20
"org.jabref.logic.importer.fileformat.ACMPortalParser.parseDoiSearchPage(InputStream)",11,5,4,6
"org.jabref.logic.importer.fileformat.ACMPortalParser.parseEntries(InputStream)",1,1,1,2
"org.jabref.logic.importer.fileformat.ACMPortalParser.typeStrToEnum(String)",2,1,2,2
"org.jabref.logic.importer.fileformat.ACMPortalParserTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.ACMPortalParserTest.testGetBibEntriesFromDoiList()",1,1,2,2
"org.jabref.logic.importer.fileformat.ACMPortalParserTest.testGetUrlFromDoiList()",0,1,1,1
"org.jabref.logic.importer.fileformat.ACMPortalParserTest.testNoEntryFound()",0,1,1,1
"org.jabref.logic.importer.fileformat.ACMPortalParserTest.testParseBibEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.ACMPortalParserTest.testParseDoiSearchPage()",0,1,1,1
"org.jabref.logic.importer.fileformat.ACMPortalParserTest.testParseEntries()",1,1,2,2
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.importDatabase(BufferedReader)",22,1,19,19
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.isMethodToIgnore(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.isRecognizedFormat(BufferedReader)",3,3,2,3
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.parse(T,Map<Field, String>)",9,6,8,8
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.parseInbook(Inbook,Map<Field, String>)",18,1,9,9
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.putIfValueNotNull(Map<Field, String>,Field,String)",1,1,2,2
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.putMonth(Map<Field, String>,Optional<Month>)",1,1,2,2
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.putNumber(Map<Field, String>,BigInteger)",1,1,2,2
"org.jabref.logic.importer.fileformat.BibTeXMLImporter.putYear(Map<Field, String>,XMLGregorianCalendar)",1,1,2,2
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestFiles.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestFiles.nonBibTeXMLfileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestFiles.testIsNotRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestTypes.importConvertsToCorrectBibType(EntryType)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestTypes.types()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporter.importDatabase(BufferedReader)",131,8,67,76
"org.jabref.logic.importer.fileformat.BiblioscapeImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTest.testGetCLIID()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTest.testImportEntriesAbortion()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTestFiles.fileNames()",1,1,3,3
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTestTypes.importConvertsToCorrectBibType(String,EntryType)",0,1,1,1
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTestTypes.types()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporter.BibtexImporter(ImportFormatPreferences,FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporter.getSuppliedEncoding(BufferedReader)",12,5,6,7
"org.jabref.logic.importer.fileformat.BibtexImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporter.importDatabase(Path,Charset)",3,2,3,3
"org.jabref.logic.importer.fileformat.BibtexImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporterTest.testImportEntries()",6,1,6,6
"org.jabref.logic.importer.fileformat.BibtexImporterTest.testIsRecognizedFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporterTest.testRecognizesDatabaseID()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.BibtexParser(ImportFormatPreferences,FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.checkEpilog()",2,1,3,3
"org.jabref.logic.importer.fileformat.BibtexParser.consume(char)",1,2,1,2
"org.jabref.logic.importer.fileformat.BibtexParser.consume(char,char)",2,2,1,3
"org.jabref.logic.importer.fileformat.BibtexParser.consumeUncritically(char)",3,1,2,5
"org.jabref.logic.importer.fileformat.BibtexParser.determineNewLineSeparator()",4,1,2,6
"org.jabref.logic.importer.fileformat.BibtexParser.dumpTextReadSoFarToString()",4,4,4,4
"org.jabref.logic.importer.fileformat.BibtexParser.fixKey()",22,3,6,15
"org.jabref.logic.importer.fileformat.BibtexParser.getPureTextFromFile()",1,1,2,2
"org.jabref.logic.importer.fileformat.BibtexParser.initializeParserResult(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.isClosingBracketNext()",2,1,1,3
"org.jabref.logic.importer.fileformat.BibtexParser.isEOFCharacter(int)",1,1,1,2
"org.jabref.logic.importer.fileformat.BibtexParser.isEscapeSymbol(char)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.parse(Reader)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.parseAndAddEntry(String)",3,1,4,4
"org.jabref.logic.importer.fileformat.BibtexParser.parseBibtexString()",1,1,2,2
"org.jabref.logic.importer.fileformat.BibtexParser.parseBracketedText()",16,3,6,11
"org.jabref.logic.importer.fileformat.BibtexParser.parseBracketedTextExactly()",9,4,5,9
"org.jabref.logic.importer.fileformat.BibtexParser.parseDatabaseID()",7,4,5,5
"org.jabref.logic.importer.fileformat.BibtexParser.parseEntries(InputStream)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.parseEntries(Reader)",1,1,1,2
"org.jabref.logic.importer.fileformat.BibtexParser.parseEntry(String)",11,4,4,9
"org.jabref.logic.importer.fileformat.BibtexParser.parseField(BibEntry)",8,1,5,5
"org.jabref.logic.importer.fileformat.BibtexParser.parseFieldContent(Field)",13,8,8,10
"org.jabref.logic.importer.fileformat.BibtexParser.parseFileContent()",9,3,6,7
"org.jabref.logic.importer.fileformat.BibtexParser.parseJabRefComment(Map<String, String>)",11,1,7,7
"org.jabref.logic.importer.fileformat.BibtexParser.parseKey()",15,7,10,11
"org.jabref.logic.importer.fileformat.BibtexParser.parsePreamble()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.parseQuotedFieldExactly()",6,3,3,6
"org.jabref.logic.importer.fileformat.BibtexParser.parseRemainingContent()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.parseSingleEntry(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.parseString()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.parseTextToken()",7,4,5,5
"org.jabref.logic.importer.fileformat.BibtexParser.peek()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParser.purge(String,String)",10,4,6,8
"org.jabref.logic.importer.fileformat.BibtexParser.purgeEOFCharacters(String)",3,1,3,3
"org.jabref.logic.importer.fileformat.BibtexParser.read()",2,1,2,3
"org.jabref.logic.importer.fileformat.BibtexParser.removeWhitespaces(StringBuilder)",3,1,3,3
"org.jabref.logic.importer.fileformat.BibtexParser.singleFromString(String,ImportFormatPreferences,FileUpdateMonitor)",2,2,3,3
"org.jabref.logic.importer.fileformat.BibtexParser.skipAndRecordWhitespace(int)",10,4,6,6
"org.jabref.logic.importer.fileformat.BibtexParser.skipOneNewline()",2,1,3,3
"org.jabref.logic.importer.fileformat.BibtexParser.skipSpace()",5,4,3,4
"org.jabref.logic.importer.fileformat.BibtexParser.skipWhitespace()",5,4,3,4
"org.jabref.logic.importer.fileformat.BibtexParser.unread(int)",2,1,2,3
"org.jabref.logic.importer.fileformat.BibtexParser.unreadBuffer(StringBuilder)",1,1,2,2
"org.jabref.logic.importer.fileformat.BibtexParserTest.bibTeXConstantAprilIsDisplayedAsConstant()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.bibTeXConstantAprilIsParsedAsMonthApril()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.bibTeXConstantAprilIsParsedAsStringMonthAprilWhenReadingTheField()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.fromStringRecognizesEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.fromStringReturnsEmptyListFromEmptyString()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.fromStringReturnsEmptyListIfNoEntryRecognized()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestBibEntryType()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestBiblatexMode()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestContentSelectors()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestCustomKeyPattern()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestFileDirectories()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestGroupTree()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestProtectedFlag()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestSaveActions()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestSaveOrderConfig()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.integrationTestTexGroup()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseAcceptsEntryWithAtSymbolInBrackets()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseAddsEscapedClosingBracketToFieldValue()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseAddsEscapedOpenBracketToFieldValue()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseBracketedComment()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCombinesMultipleAuthorFields()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCombinesMultipleEditorFields()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCombinesMultipleKeywordsFields()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCommentAndEntryInOneLine()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCommentContainingEntries()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCommentContainingEntriesAndAtSymbols()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCommentWithoutBrackets()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseCommentWithoutBracketsBeforeEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseConvertsMultipleNewlinesToSpace()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseConvertsMultipleTabsToSpace()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseConvertsNewlineToSpace()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseConvertsTabToSpace()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseDoesNotRecognizeDatabaseIDasUserComment()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseEmptyFileLeadsToPreamble()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseEmptyPreambleLeadsToEmpty()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseEntryUsingStringConstantsForTwoAuthorsWithEtAsStringConstant()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseFileHeaderAndPreambleWithoutNewLine()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseHandlesAccentsCorrectly()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresAndWarnsAboutCorruptedEntryButRecognizeOthers()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresAndWarnsAboutEntryWithFieldsThatAreNotSeperatedByComma()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresAndWarnsAboutEntryWithUnmatchedOpenBracket()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresAndWarnsAboutEntryWithUnmatchedOpenBracketInQuotationMarks()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresArbitraryContentAfterEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresComments()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresCommentsAfterEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresCommentsBeforeEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresText()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresTextAfterEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresTextBeforeEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresUpercaseComments()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresWhitespaceInEpilogue()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseIgnoresWhitespaceInEpilogueAfterEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseNotWarnsAboutEntryWithoutCitationKey()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseOtherTypeTest()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parsePreambleAndEntryWithoutNewLine()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parsePrecedingComment()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parsePreservesMultipleSpacesInNonWrappableField()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parsePreservesNewlineInAbstractField()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parsePreservesTabsInAbstractField()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseQuotedEntries()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseReallyUnknownType()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesAbsoluteFile()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesCRLFLineBreak()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesCitationKeyWithSpecialCharacters()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesDatabaseID()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesDateFieldWithConcatenation()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryInParenthesis()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryOnlyWithKey()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryPrecedingComment()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWhereLastFieldIsFinishedWithComma()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithAtInField()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithAtSymbolInQuotationMarks()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithBigNumbers()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithNewlines()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithUnknownType()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithVeryLongType()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithWhitespace()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesEntryWithWhitespaceAtBegining()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesFieldValuesInQuotationMarks()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesFieldsWithBracketsEnclosedInQuotationMarks()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesFieldsWithEscapedQuotationMarks()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesFormatedEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesHeaderButIgnoresEncoding()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesLFLineBreak()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesMonthFieldsWithFollowingComma()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesMultipleEntries()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesMultipleEntriesOnSameLine()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesMultipleStrings()",1,1,1,2
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesNumbersWithoutBracketsOrQuotationMarks()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesPreamble()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesPreambleInParenthesis()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesPreambleWithConcatenation()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesPreambleWithWhitespace()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesSaveActionsAfterEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesString()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesStringAndEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesStringInParenthesis()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesStringWithWhitespace()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesUppercaseFields()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRecognizesUppercasePreamble()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRegularCommentBeforeEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseRemovesEncodingLineAndSeparatorInParsedSerialization()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseReturnsEmptyListIfNoEntryExistent()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseReturnsEmptyListIfNoEntryRecognized()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseReturnsEntriesInSameOrder()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseSavesAllButOneNewlinesBeforeEntryInParsedSerialization()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseSavesEntryInParsedSerialization()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseSavesNewlinesBetweenEntriesInParsedSerialization()",1,1,1,2
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseSavesOneNewlineAfterEntryInParsedSerialization()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseSavesOneNewlineAfterStringInParsedSerialization()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseSetsParsedSerialization()",4,1,3,3
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseStringConstantsForTwoAuthors()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseStringConstantsForTwoAuthorsHasCorrectBibTeXEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseTrimsWhitespaceInEpilogueAfterEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseWarnsAboutStringsWithSameNameAndOnlyKeepsOne()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseWarnsAboutUnmatchedContentInEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseWarnsAboutUnmatchedContentInEntryWithoutComma()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseWithNullThrowsNullPointerException()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseYear()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseYearWithMonthNumber()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.parseYearWithMonthString()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.preserveEncodingPrefixInsideEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.singleFromStringRecognizesEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.singleFromStringRecognizesEntryInMultiple()",1,1,2,2
"org.jabref.logic.importer.fileformat.BibtexParserTest.singleFromStringReturnsEmptyFromEmptyString()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.singleFromStringReturnsEmptyIfNoEntryRecognized()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.textAprilIsDisplayedAsConstant()",0,1,1,1
"org.jabref.logic.importer.fileformat.BibtexParserTest.textAprilIsParsedAsMonthApril()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.CffAuthor.CffAuthor()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.CffAuthor.setValues(String,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.CffFormat.CffFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.CffFormat.setValues(String,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.CffIdentifier.CffIdentifier()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.getFieldMappings()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.getUnmappedFields()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporter.importDatabase(BufferedReader)",21,1,13,14
"org.jabref.logic.importer.fileformat.CffImporter.isRecognizedFormat(BufferedReader)",2,1,2,3
"org.jabref.logic.importer.fileformat.CffImporterTest.getPopulatedEntry()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testImportEntriesBasic()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testImportEntriesDataset()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testImportEntriesDoiSelect()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testImportEntriesMultipleAuthors()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testImportEntriesSwhIdSelect1()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testImportEntriesSwhIdSelect2()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testImportEntriesUnknownFields()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testIsRecognizedFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.CffImporterTest.testIsRecognizedFormatReject()",1,1,2,2
"org.jabref.logic.importer.fileformat.CffImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.CoinsParser.appendData(String,BibEntry,Pattern,Field)",1,1,2,2
"org.jabref.logic.importer.fileformat.CoinsParser.parseEntries(InputStream)",4,1,3,4
"org.jabref.logic.importer.fileformat.CopacImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporter.importDatabase(BufferedReader)",33,6,18,20
"org.jabref.logic.importer.fileformat.CopacImporter.isRecognizedFormat(BufferedReader)",3,3,2,3
"org.jabref.logic.importer.fileformat.CopacImporter.setOrAppend(BibEntry,Field,String,String)",2,1,2,2
"org.jabref.logic.importer.fileformat.CopacImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporterTest.testImportEmptyEntries()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporterTestFiles.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.CopacImporterTestFiles.nonCopacfileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporterTestFiles.testIsNotRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.CopacImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.CustomImporter(String,String)",1,1,1,2
"org.jabref.logic.importer.fileformat.CustomImporter.equals(Object)",3,3,2,4
"org.jabref.logic.importer.fileformat.CustomImporter.getAsStringList()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.getBasePath()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.getClassName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.hashCode()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.load(URL,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporter.toString()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.asCustomImporter(Importer)",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.equalsIsBasedOnName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.equalsWithSameReference()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testClassicConstructor()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testCompareToEven()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testCompareToGreater()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testCompareToSmaller()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testGetAsStringList()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testGetBasePath()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testGetClassName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testGetId()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fileformat.CustomImporterTest.testToString()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporter.EndnoteImporter(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporter.fixAuthor(String)",3,3,3,3
"org.jabref.logic.importer.fileformat.EndnoteImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporter.importDatabase(BufferedReader)",101,4,47,54
"org.jabref.logic.importer.fileformat.EndnoteImporter.isRecognizedFormat(BufferedReader)",4,3,3,4
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testImportEntries0()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testImportEntries1()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testImportEntriesBookExample()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testIsRecognizedFormat()",1,1,2,2
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testIsRecognizedFormatReject()",1,1,2,2
"org.jabref.logic.importer.fileformat.EndnoteImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.EndnoteXmlImporter(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.clean(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.convertRefNameToType(String)",1,1,1,6
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getAuthors(Record)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getKeywords(Record)",2,2,2,2
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getLinkedFiles(Record)",2,1,2,2
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getType(Record)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getUrl(Record)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.getUrlValue(Url)",10,2,4,5
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.importDatabase(BufferedReader)",3,2,3,3
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.initUnmarshaller()",1,1,2,2
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.isRecognizedFormat(BufferedReader)",4,3,3,4
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.mergeStyleContents(List<Style>)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.parseEntries(InputStream)",1,1,2,2
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.parseRecord(Record)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter.unmarshallRoot(BufferedReader)",1,1,2,2
"org.jabref.logic.importer.fileformat.EndnoteXmlImporterTestFiles.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.EndnoteXmlImporterTestFiles.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporterTestFiles.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporterTestFiles.testIsNotRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.EndnoteXmlImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.GvkParser.getChild(String,Element)",7,5,3,5
"org.jabref.logic.importer.fileformat.GvkParser.getChildren(String,Element)",6,1,4,4
"org.jabref.logic.importer.fileformat.GvkParser.getSubfield(String,Element)",3,3,3,3
"org.jabref.logic.importer.fileformat.GvkParser.parseEntries(Document)",7,2,4,5
"org.jabref.logic.importer.fileformat.GvkParser.parseEntries(InputStream)",1,1,1,2
"org.jabref.logic.importer.fileformat.GvkParser.parseEntry(Element)",135,1,69,79
"org.jabref.logic.importer.fileformat.GvkParser.removeSortCharacters(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.ImporterTestEngine.getPath(String)",1,1,1,2
"org.jabref.logic.importer.fileformat.ImporterTestEngine.getTestFiles(Predicate<String>)",0,1,1,1
"org.jabref.logic.importer.fileformat.ImporterTestEngine.testImportEntries(Importer,String,String)",1,2,2,2
"org.jabref.logic.importer.fileformat.ImporterTestEngine.testImportMalformedFiles(Importer,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.ImporterTestEngine.testIsNotRecognizedFormat(Importer,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.ImporterTestEngine.testIsRecognizedFormat(Importer,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporter.importDatabase(BufferedReader)",42,5,18,20
"org.jabref.logic.importer.fileformat.InspecImporter.isRecognizedFormat(BufferedReader)",3,3,2,3
"org.jabref.logic.importer.fileformat.InspecImporterTest.fileNames()",1,1,3,3
"org.jabref.logic.importer.fileformat.InspecImporterTest.importConferencePaperGivesInproceedings()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.importMiscGivesMisc()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.nonInspecfileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.testCompleteBibtexEntryOnJournalPaperImport()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.testIsRecognizedFormatAccept(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.testIsRecognizedFormatReject(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.InspecImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporter.importDatabase(BufferedReader)",100,28,49,57
"org.jabref.logic.importer.fileformat.IsiImporter.isRecognizedFormat(BufferedReader)",4,3,3,4
"org.jabref.logic.importer.fileformat.IsiImporter.isiAuthorConvert(String)",14,2,6,7
"org.jabref.logic.importer.fileformat.IsiImporter.isiAuthorsConvert(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporter.isiAuthorsConvert(String[])",1,1,2,2
"org.jabref.logic.importer.fileformat.IsiImporter.parseMonth(String)",8,5,5,6
"org.jabref.logic.importer.fileformat.IsiImporter.parsePages(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporter.processCapitalization(Map<Field, String>)",6,1,4,4
"org.jabref.logic.importer.fileformat.IsiImporter.processSubSup(Map<Field, String>)",15,1,5,6
"org.jabref.logic.importer.fileformat.IsiImporterTest.fileNames()",1,1,3,3
"org.jabref.logic.importer.fileformat.IsiImporterTest.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testIEEEImport()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testImportEntries1()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testImportEntries2()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testImportEntriesEmpty()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testImportEntriesINSPEC()",1,1,1,2
"org.jabref.logic.importer.fileformat.IsiImporterTest.testImportEntriesMedline()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testImportEntriesWOS()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testImportIEEEExport()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testIsRecognizedFormatAccepted(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testIsRecognizedFormatRejected(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testIsiAuthorConvert()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testIsiAuthorsConvert()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testMonthConvert()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testParseMonthException()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testProcessSubSup()",0,1,1,1
"org.jabref.logic.importer.fileformat.IsiImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.addAbstract(Map<Field, String>,Abstract)",6,1,4,4
"org.jabref.logic.importer.fileformat.MedlineImporter.addArticleIdList(Map<Field, String>,ArticleIdList)",7,1,4,4
"org.jabref.logic.importer.fileformat.MedlineImporter.addArticleInformation(Map<Field, String>,List<Object>)",11,1,9,9
"org.jabref.logic.importer.fileformat.MedlineImporter.addBookInformation(Map<Field, String>,Book)",14,1,10,10
"org.jabref.logic.importer.fileformat.MedlineImporter.addChemicals(Map<Field, String>,List<Chemical>)",3,1,3,3
"org.jabref.logic.importer.fileformat.MedlineImporter.addContributionDate(Map<Field, String>,ContributionDate)",2,1,4,4
"org.jabref.logic.importer.fileformat.MedlineImporter.addDateRevised(Map<Field, String>,DateRevised)",2,1,4,4
"org.jabref.logic.importer.fileformat.MedlineImporter.addElocationID(Map<Field, String>,ELocationID)",2,1,3,3
"org.jabref.logic.importer.fileformat.MedlineImporter.addGeneSymbols(Map<Field, String>,GeneSymbolList)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.addInvestigators(Map<Field, String>,InvestigatorList)",24,1,8,8
"org.jabref.logic.importer.fileformat.MedlineImporter.addKeyWords(Map<Field, String>,List<KeywordList>)",14,1,7,7
"org.jabref.logic.importer.fileformat.MedlineImporter.addMeashHeading(Map<Field, String>,MeshHeadingList)",6,1,4,4
"org.jabref.logic.importer.fileformat.MedlineImporter.addNotes(Map<Field, String>,List<GeneralNote>)",3,1,3,3
"org.jabref.logic.importer.fileformat.MedlineImporter.addOtherId(Map<Field, String>,List<OtherID>)",4,1,4,4
"org.jabref.logic.importer.fileformat.MedlineImporter.addPagination(Map<Field, String>,Pagination)",5,1,5,5
"org.jabref.logic.importer.fileformat.MedlineImporter.addPersonalNames(Map<Field, String>,PersonalNameSubjectList)",10,1,5,5
"org.jabref.logic.importer.fileformat.MedlineImporter.addPubDate(Map<Field, String>,PubDate)",8,1,5,5
"org.jabref.logic.importer.fileformat.MedlineImporter.convertToDateFormat(String,String,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.extractYear(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.fixPageRange(String)",2,2,2,3
"org.jabref.logic.importer.fileformat.MedlineImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.handleAuthors(Map<Field, String>,AuthorList)",14,1,6,6
"org.jabref.logic.importer.fileformat.MedlineImporter.importDatabase(BufferedReader)",15,1,9,9
"org.jabref.logic.importer.fileformat.MedlineImporter.initUmarshaller()",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlineImporter.isRecognizedFormat(BufferedReader)",5,3,4,5
"org.jabref.logic.importer.fileformat.MedlineImporter.join(List<String>,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporter.parseArticle(PubmedArticle,List<BibEntry>)",34,1,18,18
"org.jabref.logic.importer.fileformat.MedlineImporter.parseBookArticle(PubmedBookArticle,List<BibEntry>)",46,1,19,19
"org.jabref.logic.importer.fileformat.MedlineImporter.parseEntries(InputStream)",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlineImporter.putIfValueNotNull(Map<Field, String>,Field,String)",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlineImporter.putStringFromSerializableList(Map<Field, String>,Field,List<Serializable>)",4,1,4,4
"org.jabref.logic.importer.fileformat.MedlineImporter.unmarshallRoot(BufferedReader)",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlineImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles.fileNames()",1,1,3,3
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles.malformedFileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles.testImportMalfomedFiles(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles.testIsNotRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.addAbstract(Map<Field, String>,String,String)",9,1,6,6
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.addDates(Map<Field, String>,String,String)",18,1,18,18
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.addIDs(Map<Field, String>,String,String)",9,1,9,9
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.addSourceType(String,EntryType)",1,7,1,7
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.addStandardNumber(Map<Field, String>,String,String)",5,1,4,4
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.addTitles(Map<Field, String>,String,String,EntryType)",19,1,14,14
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.checkLineValidity(String)",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.fixAuthors(Map<Field, String>,String,Field)",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.importDatabase(BufferedReader)",76,7,37,44
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.isCreateDateFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.isDateFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporter.isRecognizedFormat(BufferedReader)",4,3,4,5
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.assertImportOfMedlineFileEqualsBibtexFile(String,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.doesNotRecognizeEmptyFiles()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.readerForString(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testAllArticleTypes()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testEmptyFileImport()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testImportMultipleEntriesInSingleFile()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testImportSingleEntriesInSingleFiles()",1,1,2,2
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testInvalidFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testKeyWords()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testMultiLineComments()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testNullReader()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testWithMultipleEntries()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testWithNbibFile()",0,1,1,1
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.ModsImporter(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.getElement(Object,Class<T>)",1,2,2,2
"org.jabref.logic.importer.fileformat.ModsImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.handleAuthorsInNamePart(NameDefinition,List<String>,Map<Field, String>)",24,1,19,19
"org.jabref.logic.importer.fileformat.ModsImporter.importDatabase(BufferedReader)",5,1,5,5
"org.jabref.logic.importer.fileformat.ModsImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.parseEntries(InputStream)",1,1,2,2
"org.jabref.logic.importer.fileformat.ModsImporter.parseGeographicInformation(Map<Field, String>,HierarchicalGeographicDefinition)",4,1,4,4
"org.jabref.logic.importer.fileformat.ModsImporter.parseIdentifier(Map<Field, String>,IdentifierDefinition,BibEntry)",4,1,5,5
"org.jabref.logic.importer.fileformat.ModsImporter.parseLocationAndUrl(Map<Field, String>,LocationDefinition)",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.parseMods(List<BibEntry>,ModsDefinition)",2,1,3,3
"org.jabref.logic.importer.fileformat.ModsImporter.parseModsCollection(List<BibEntry>,List<ModsDefinition>)",1,1,2,2
"org.jabref.logic.importer.fileformat.ModsImporter.parseModsGroup(Map<Field, String>,List<Object>,BibEntry)",1,1,2,2
"org.jabref.logic.importer.fileformat.ModsImporter.parseRecordInfo(Map<Field, String>,RecordInfoDefinition)",4,1,4,4
"org.jabref.logic.importer.fileformat.ModsImporter.parseRelatedModsGroup(Map<Field, String>,List<Object>)",29,1,11,11
"org.jabref.logic.importer.fileformat.ModsImporter.parseTitle(Map<Field, String>,List<Object>)",6,1,4,4
"org.jabref.logic.importer.fileformat.ModsImporter.parseTopic(Map<Field, String>,List<JAXBElement<?>>,List<String>)",5,1,5,5
"org.jabref.logic.importer.fileformat.ModsImporter.putDate(Map<Field, String>,String,DateDefinition)",3,1,2,6
"org.jabref.logic.importer.fileformat.ModsImporter.putIfListIsNotEmpty(Map<Field, String>,List<String>,Field,String)",1,1,2,2
"org.jabref.logic.importer.fileformat.ModsImporter.putIfValueNotNull(Map<Field, String>,Field,String)",1,1,2,2
"org.jabref.logic.importer.fileformat.ModsImporter.putPageInformation(ExtentDefinition,Map<Field, String>)",4,1,4,4
"org.jabref.logic.importer.fileformat.ModsImporter.putPlaceOrPublisherOrDate(Map<Field, String>,String,Object)",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporter.putPublisherOrEdition(Map<Field, String>,String,StringPlusLanguagePlusSupplied)",2,1,3,3
"org.jabref.logic.importer.fileformat.ModsImporterTestFiles.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.ModsImporterTestFiles.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.ModsImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.RankedBibEntry.RankedBibEntry(BibEntry,Integer)",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.convertToString(BufferedReader)",2,1,3,3
"org.jabref.logic.importer.fileformat.MrDLibImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.getParserResult()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.getRecommendationSetId()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.getRecommendationsDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.getRecommendationsHeading()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporter.isRecognizedFormat(BufferedReader)",2,2,1,3
"org.jabref.logic.importer.fileformat.MrDLibImporter.isRecommendationFieldPresent(JSONObject,String)",1,1,2,2
"org.jabref.logic.importer.fileformat.MrDLibImporter.parse(BufferedReader)",1,1,2,2
"org.jabref.logic.importer.fileformat.MrDLibImporter.populateBibEntry(JSONObject)",6,1,7,7
"org.jabref.logic.importer.fileformat.MrDLibImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporterTest.testGetFileExtention()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporterTest.testGetName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporterTest.testImportDatabaseIsTitleSetCorrectly()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporterTest.testImportDatabaseIsYearSetCorrectly()",0,1,1,1
"org.jabref.logic.importer.fileformat.MrDLibImporterTest.testImportDatabaseMin()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporter.isRecognizedFormat(BufferedReader)",2,1,2,3
"org.jabref.logic.importer.fileformat.MsBibImporter.makeSafeDocBuilderFactory(DocumentBuilderFactory)",1,1,2,2
"org.jabref.logic.importer.fileformat.MsBibImporterTest.testGetCommandLineId()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTest.testImportEntriesEmpty()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTest.testImportEntriesNotRecognizedFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTest.testIsNotRecognizedFormat()",1,1,2,2
"org.jabref.logic.importer.fileformat.MsBibImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTestFiles.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.MsBibImporterTestFiles.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTestFiles.testIsNotRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.MsBibImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporter.fixNames(String)",8,1,5,5
"org.jabref.logic.importer.fileformat.OvidImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporter.importDatabase(BufferedReader)",58,1,37,37
"org.jabref.logic.importer.fileformat.OvidImporter.isRecognizedFormat(BufferedReader)",4,3,3,4
"org.jabref.logic.importer.fileformat.OvidImporterTest.fileNames()",1,1,3,3
"org.jabref.logic.importer.fileformat.OvidImporterTest.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testImportEmpty()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testImportEntries1()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testImportEntries2()",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testImportSingleEntries()",1,1,2,2
"org.jabref.logic.importer.fileformat.OvidImporterTest.testIsRecognizedFormatAccept(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testIsRecognizedFormatRejected(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.OvidImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.PdfContentImporter(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.extractYear()",2,2,2,3
"org.jabref.logic.importer.fileformat.PdfContentImporter.fillCurStringWithNonEmptyLines()",7,1,5,5
"org.jabref.logic.importer.fileformat.PdfContentImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.getEntryFromPDFContent(String,String)",128,2,49,53
"org.jabref.logic.importer.fileformat.PdfContentImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.getFirstPageContents(PDDocument)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.importDatabase(Path,Charset)",2,1,3,3
"org.jabref.logic.importer.fileformat.PdfContentImporter.importDatabase(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporter.proceedToNextNonEmptyLine()",2,1,2,3
"org.jabref.logic.importer.fileformat.PdfContentImporter.readLastBlock()",7,1,5,7
"org.jabref.logic.importer.fileformat.PdfContentImporter.removeNonLettersAtEnd(String)",6,4,4,5
"org.jabref.logic.importer.fileformat.PdfContentImporter.streamlineNames(String)",62,7,17,19
"org.jabref.logic.importer.fileformat.PdfContentImporter.streamlineTitle(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTest.doesNotHandleEncryptedPdfs()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTest.importTwiceWorksAsExpected()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTest.testParsingEditorWithoutPagesorSeriesInformation()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTest.testParsingWithoutActualDOINumber()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTestFiles.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.PdfContentImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfContentImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.PdfEmbeddedBibFileImporter(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.extractAndParseFile(PDEmbeddedFile)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.extractAndParseFiles(Map<String, PDComplexFileSpecification>)",3,1,3,3
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.getEmbeddedBibFileEntries(PDDocument)",17,1,8,8
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.getEmbeddedFile(PDComplexFileSpecification)",9,1,6,6
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.importDatabase(Path,Charset)",2,1,3,3
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.importDatabase(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporterTest.doesNotHandleEncryptedPdfs()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporterTest.importWorksAsExpected()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.PdfGrobidImporter(ImporterPreferences,ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.importDatabase(Path,Charset)",1,1,2,2
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.importDatabase(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporter.isRecognizedFormat(Path,Charset)",1,2,1,2
"org.jabref.logic.importer.fileformat.PdfGrobidImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporterTest.testGetCommandLineId()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporterTest.testImportEntries()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporterTest.testIsRecognizedFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporterTest.testIsRecognizedFormatReject()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfGrobidImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.EntryBasedFetcherWrapper.EntryBasedFetcherWrapper(ImporterPreferences,ImportFormatPreferences,FilePreferences,BibDatabaseContext,Charset)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.EntryBasedFetcherWrapper.performSearch(BibEntry)",9,4,5,5
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.PdfMergeMetadataImporter(ImporterPreferences,ImportFormatPreferences)",1,1,2,2
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.importDatabase(Path,Charset)",27,7,12,15
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.importDatabase(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporterTest.doesNotHandleEncryptedPdfs()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporterTest.importWorksAsExpected()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.PdfVerbatimBibTextImporter(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.getFirstPageContents(PDDocument)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.importDatabase(Path,Charset)",2,1,3,3
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.importDatabase(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporterTest.doesNotHandleEncryptedPdfs()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporterTest.importTwiceWorksAsExpected()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.PdfXmpImporter(XmpPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.importDatabase(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.importDatabase(Path,Charset)",1,1,2,2
"org.jabref.logic.importer.fileformat.PdfXmpImporter.importDatabase(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporter.isRecognizedFormat(Path,Charset)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.importEncryptedFileReturnsError()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.testGetCommandLineId()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.testImportEntries()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.testIsRecognizedFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.testIsRecognizedFormatReject(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTest.testGetCLIId()",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTest.testIfNotRecognizedFormat()",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTestFiles.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.RISImporterTestFiles.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.RISImporterTestFiles.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.RepecNepImporter(ImportFormatPreferences)",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.getId()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.importDatabase(BufferedReader)",16,1,7,8
"org.jabref.logic.importer.fileformat.RepecNepImporter.isRecognizedFormat(BufferedReader)",3,1,3,4
"org.jabref.logic.importer.fileformat.RepecNepImporter.isStartOfWorkingPaper()",1,1,3,3
"org.jabref.logic.importer.fileformat.RepecNepImporter.parseAbstract(BibEntry,BufferedReader)",1,1,2,2
"org.jabref.logic.importer.fileformat.RepecNepImporter.parseAdditionalFields(BibEntry,boolean,BufferedReader)",20,1,15,15
"org.jabref.logic.importer.fileformat.RepecNepImporter.parseAuthors(BibEntry,BufferedReader)",22,1,13,14
"org.jabref.logic.importer.fileformat.RepecNepImporter.parseTitleString(BibEntry,BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.readLine(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporter.readMultipleLines(BufferedReader)",4,1,6,6
"org.jabref.logic.importer.fileformat.RepecNepImporter.startsWithKeyword(Collection<String>)",1,1,2,2
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.testGetCliId()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.testGetExtension()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.testGetFormatName()",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.testIsNotRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.RepecNepImporterTest.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.RisImporter.addDoi(Map<Field, String>,String)",0,1,1,1
"org.jabref.logic.importer.fileformat.RisImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.RisImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.RisImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.RisImporter.importDatabase(BufferedReader)",188,4,102,110
"org.jabref.logic.importer.fileformat.RisImporter.isRecognizedFormat(BufferedReader)",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporter.getDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporter.getFileType()",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporter.getName()",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporter.importDatabase(BufferedReader)",75,5,27,30
"org.jabref.logic.importer.fileformat.SilverPlatterImporter.isRecognizedFormat(BufferedReader)",6,4,3,5
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.fileNames()",1,1,2,2
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.invalidFileNames()",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.setUp()",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.testGetDescription()",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.testImportEntries(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.testIsNotRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.testIsRecognizedFormat(String)",0,1,1,1
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest.testsGetExtensions()",0,1,1,1
"org.jabref.logic.importer.util.FileFieldParser.convert(List<String>)",15,1,13,13
"org.jabref.logic.importer.util.FileFieldParser.parse(String)",24,5,13,23
"org.jabref.logic.importer.util.FileFieldParserTest.check(LinkedFile,List<String>)",0,1,1,1
"org.jabref.logic.importer.util.FileFieldParserTest.stringsToParseTestData()",0,1,1,1
"org.jabref.logic.importer.util.FileFieldParserTest.testData()",0,1,1,1
"org.jabref.logic.importer.util.FileFieldParserTest.testParse(List<LinkedFile>,String)",0,1,1,1
"org.jabref.logic.importer.util.GrobidService.ConsolidateCitations.ConsolidateCitations(int)",0,1,1,1
"org.jabref.logic.importer.util.GrobidService.ConsolidateCitations.getCode()",0,1,1,1
"org.jabref.logic.importer.util.GrobidService.GrobidService(ImporterPreferences)",1,2,1,2
"org.jabref.logic.importer.util.GrobidService.processCitation(String,ImportFormatPreferences,ConsolidateCitations)",2,2,3,4
"org.jabref.logic.importer.util.GrobidService.processPDF(Path,ImportFormatPreferences)",2,2,2,3
"org.jabref.logic.importer.util.GrobidServiceTest.failsWhenGrobidDisabled()",0,1,1,1
"org.jabref.logic.importer.util.GrobidServiceTest.processEmptyStringTest()",0,1,1,1
"org.jabref.logic.importer.util.GrobidServiceTest.processInvalidCitationTest()",0,1,1,1
"org.jabref.logic.importer.util.GrobidServiceTest.processPdfTest()",0,1,1,1
"org.jabref.logic.importer.util.GrobidServiceTest.processValidCitationTest()",0,1,1,1
"org.jabref.logic.importer.util.GrobidServiceTest.setup()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParser.GroupsParser()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParser.addGroupDetails(QuotedStringTokenizer,AbstractGroup)",1,1,2,2
"org.jabref.logic.importer.util.GroupsParser.addLegacyEntryKeys(QuotedStringTokenizer,ExplicitGroup)",1,1,2,2
"org.jabref.logic.importer.util.GroupsParser.allEntriesGroupFromString(String)",1,2,1,2
"org.jabref.logic.importer.util.GroupsParser.automaticKeywordGroupFromString(String)",1,2,1,2
"org.jabref.logic.importer.util.GroupsParser.automaticPersonsGroupFromString(String)",1,2,1,2
"org.jabref.logic.importer.util.GroupsParser.explicitGroupFromString(String,Character)",2,2,1,3
"org.jabref.logic.importer.util.GroupsParser.fromString(String,Character,FileUpdateMonitor,MetaData)",8,9,9,9
"org.jabref.logic.importer.util.GroupsParser.importGroups(List<String>,Character,FileUpdateMonitor,MetaData)",13,4,6,8
"org.jabref.logic.importer.util.GroupsParser.keywordGroupFromString(String,Character)",3,2,1,3
"org.jabref.logic.importer.util.GroupsParser.legacyExplicitGroupFromString(String,Character)",2,2,1,3
"org.jabref.logic.importer.util.GroupsParser.searchGroupFromString(String)",3,2,3,4
"org.jabref.logic.importer.util.GroupsParser.texGroupFromString(String,FileUpdateMonitor,MetaData)",2,1,2,3
"org.jabref.logic.importer.util.GroupsParserTest.fromStringParsesAutomaticKeywordGroup()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.fromStringParsesAutomaticPersonGroup()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.fromStringParsesExplicitGroupWithEscapedCharacterInName()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.fromStringParsesExplicitGroupWithIconAndDescription()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.fromStringParsesSearchGroup()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.fromStringParsesTexGroup()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.fromStringThrowsParseExceptionForNotEscapedGroupName()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.fromStringUnknownGroupThrowsException()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.hierarchicalDelimiterThatNeedsToBeEscaped()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.keywordDelimiterThatNeedsToBeEscaped()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.setUp()",0,1,1,1
"org.jabref.logic.importer.util.GroupsParserTest.testImportSubGroups()",0,1,1,1
"org.jabref.logic.importer.util.INSPIREBibtexFilterReader.INSPIREBibtexFilterReader(Reader)",0,1,1,1
"org.jabref.logic.importer.util.INSPIREBibtexFilterReader.fixBibkey(String)",3,3,2,3
"org.jabref.logic.importer.util.INSPIREBibtexFilterReader.read()",4,4,2,4
"org.jabref.logic.importer.util.INSPIREBibtexFilterReader.readpreLine()",9,4,3,6
"org.jabref.logic.importer.util.IdentifierParser.getParserForField(Field)",4,5,4,5
"org.jabref.logic.importer.util.IdentifierParser.parse(Field,String)",1,2,2,2
"org.jabref.logic.importer.util.JsonReader.toJsonObject(InputStream)",2,2,1,3
"org.jabref.logic.importer.util.JsonReaderTest.arrayThrowsParserException()",0,1,1,1
"org.jabref.logic.importer.util.JsonReaderTest.emptyStringResultsInEmptyObject()",0,1,1,1
"org.jabref.logic.importer.util.JsonReaderTest.exampleJsonResultsInSameJson()",0,1,1,1
"org.jabref.logic.importer.util.JsonReaderTest.invalidJsonThrowsParserException()",0,1,1,1
"org.jabref.logic.importer.util.JsonReaderTest.nullStreamThrowsNullPointerException()",0,1,1,1
"org.jabref.logic.importer.util.MetaDataParser.MetaDataParser(FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.importer.util.MetaDataParser.getAsList(String)",2,1,3,3
"org.jabref.logic.importer.util.MetaDataParser.getNextUnit(Reader)",7,6,6,6
"org.jabref.logic.importer.util.MetaDataParser.getSingleItem(List<String>)",2,2,2,2
"org.jabref.logic.importer.util.MetaDataParser.groupsLast()",7,1,4,5
"org.jabref.logic.importer.util.MetaDataParser.parse(Map<String, String>,Character)",0,1,1,1
"org.jabref.logic.importer.util.MetaDataParser.parse(MetaData,Map<String, String>,Character)",21,1,17,17
"org.jabref.logic.importer.util.ShortDOIService.getShortDOI(DOI)",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIService.makeRequest(DOI)",3,2,1,4
"org.jabref.logic.importer.util.ShortDOIServiceException.ShortDOIServiceException(String)",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIServiceException.ShortDOIServiceException(String,String)",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIServiceException.ShortDOIServiceException(String,String,Throwable)",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIServiceException.ShortDOIServiceException(String,Throwable)",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIServiceException.ShortDOIServiceException(Throwable)",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIServiceTest.getShortDOI()",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIServiceTest.setUp()",0,1,1,1
"org.jabref.logic.importer.util.ShortDOIServiceTest.shouldThrowExceptionWhenDOIWasNotFound()",0,1,1,1
"org.jabref.logic.integrity.ASCIICharacterChecker.check(BibEntry)",3,1,3,3
"org.jabref.logic.integrity.ASCIICharacterCheckerTest.fieldAcceptsAsciiCharacters()",0,1,1,1
"org.jabref.logic.integrity.ASCIICharacterCheckerTest.fieldAcceptsOnlyAsciiCharacters()",1,1,2,2
"org.jabref.logic.integrity.ASCIICharacterCheckerTest.fieldDoesNotAcceptNonAsciiCharacters()",0,1,1,1
"org.jabref.logic.integrity.ASCIICharacterCheckerTest.fieldDoesNotAcceptUmlauts()",0,1,1,1
"org.jabref.logic.integrity.ASCIICharacterCheckerTest.fieldDoesNotAcceptUnicode()",0,1,1,1
"org.jabref.logic.integrity.AbbreviationChecker.AbbreviationChecker(JournalAbbreviationRepository)",0,1,1,1
"org.jabref.logic.integrity.AbbreviationChecker.checkValue(String)",2,3,3,3
"org.jabref.logic.integrity.AbbreviationCheckerTest.checkValueComplainsAboutAbbreviatedJournalName()",0,1,1,1
"org.jabref.logic.integrity.AbbreviationCheckerTest.checkValueDoesNotComplainAboutJournalNameThatHasSameAbbreviation()",0,1,1,1
"org.jabref.logic.integrity.AbbreviationCheckerTest.checkValueDoesNotComplainAboutJournalNameThatHas??Abbreviation()",0,1,1,1
"org.jabref.logic.integrity.AbbreviationCheckerTest.checkValueDoesNotComplainAboutJournalNameThatHas??Input()",0,1,1,1
"org.jabref.logic.integrity.AbbreviationCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.BibStringChecker.check(BibEntry)",9,1,4,5
"org.jabref.logic.integrity.BibStringCheckerTest.acceptsAllowedInputs(List<IntegrityMessage>,Field,String)",0,1,1,1
"org.jabref.logic.integrity.BibStringCheckerTest.authorDoesNotAcceptOddNumberOfHashMarks()",0,1,1,1
"org.jabref.logic.integrity.BibStringCheckerTest.monthDoesNotAcceptOddNumberOfHashMarks()",0,1,1,1
"org.jabref.logic.integrity.BibStringCheckerTest.provideAcceptedInputs()",0,1,1,1
"org.jabref.logic.integrity.BibTeXEntryTypeChecker.check(BibEntry)",1,2,2,2
"org.jabref.logic.integrity.BooktitleChecker.checkValue(String)",2,3,3,3
"org.jabref.logic.integrity.BooktitleCheckerTest.booktitleAcceptsIfItDoesNotEndWithConferenceOn()",0,1,1,1
"org.jabref.logic.integrity.BooktitleCheckerTest.booktitleDoesNotAcceptsIfItEndsWithConferenceOn()",0,1,1,1
"org.jabref.logic.integrity.BooktitleCheckerTest.booktitleIsBlank()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrector.apply(String)",8,2,2,4
"org.jabref.logic.integrity.BracesCorrectorTest.inputAlreadyCorrect()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrectorTest.inputIsEmpty()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrectorTest.inputIsNull()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrectorTest.inputMissingClosing()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrectorTest.inputMissingOpening()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrectorTest.inputWithMaskedBraces()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrectorTest.inputWithMixedBraces()",0,1,1,1
"org.jabref.logic.integrity.BracesCorrectorTest.inputWithoutBraces()",0,1,1,1
"org.jabref.logic.integrity.BracketChecker.checkValue(String)",10,7,7,7
"org.jabref.logic.integrity.BracketCheckerTest.fieldAcceptsEmptyInput()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldAcceptsEvenNumberOfBrackets()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldAcceptsExpectedBracket()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldAcceptsFirstAndLastCharacterNotABracket()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldAcceptsFirstCharacterNotABracket()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldAcceptsLastCharacterNotABracket()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldAcceptsNoBrackets()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldDoesNotAcceptOddNumberOfBrackets()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldDoesNotAcceptUnexpectedClosingBracket()",0,1,1,1
"org.jabref.logic.integrity.BracketCheckerTest.fieldDoesNotAcceptUnexpectedOpeningBracket()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyChecker.check(BibEntry)",3,3,5,5
"org.jabref.logic.integrity.CitationKeyCheckerTest.acceptsKeyFromAuthorAndTitle()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyCheckerTest.acceptsKeyFromTitleAndYear()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyCheckerTest.bibTexAcceptsKeyFromAuthorAndYear()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyCheckerTest.emptyCitationKey()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyDeviationChecker.CitationKeyDeviationChecker(BibDatabaseContext,CitationKeyPatternPreferences)",0,1,1,1
"org.jabref.logic.integrity.CitationKeyDeviationChecker.check(BibEntry)",2,3,3,3
"org.jabref.logic.integrity.CitationKeyDeviationCheckerTest.citationKeyDeviatesFromGeneratedKey()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyDeviationCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyDuplicationChecker.CitationKeyDuplicationChecker(BibDatabase)",0,1,1,1
"org.jabref.logic.integrity.CitationKeyDuplicationChecker.check(BibEntry)",2,3,3,3
"org.jabref.logic.integrity.CitationKeyDuplicationCheckerTest.emptyCitationKey()",0,1,1,1
"org.jabref.logic.integrity.CitationKeyDuplicationCheckerTest.hasDuplicateCitationKey()",0,1,1,1
"org.jabref.logic.integrity.DateChecker.checkValue(String)",2,3,3,3
"org.jabref.logic.integrity.DateCheckerTest.acceptsEmptyInput()",0,1,1,1
"org.jabref.logic.integrity.DateCheckerTest.acceptsValidDates(String)",0,1,1,1
"org.jabref.logic.integrity.DateCheckerTest.complainsAboutInvalidInput(String)",0,1,1,1
"org.jabref.logic.integrity.DoiDuplicationChecker.check(BibDatabase)",1,1,2,2
"org.jabref.logic.integrity.DoiDuplicationCheckerTest.testMultiPairsDuplicateDOI()",0,1,1,1
"org.jabref.logic.integrity.DoiDuplicationCheckerTest.testNoDuplicateDOI()",0,1,1,1
"org.jabref.logic.integrity.DoiDuplicationCheckerTest.testOnePairDuplicateDOI()",0,1,1,1
"org.jabref.logic.integrity.DoiValidityChecker.checkValue(String)",3,3,3,3
"org.jabref.logic.integrity.DoiValidityCheckerTest.doiAcceptsEmptyInput()",0,1,1,1
"org.jabref.logic.integrity.DoiValidityCheckerTest.doiAcceptsValidInput()",0,1,1,1
"org.jabref.logic.integrity.DoiValidityCheckerTest.doiAcceptsValidInputNoMatterTheLengthOfTheDOIName()",0,1,1,1
"org.jabref.logic.integrity.DoiValidityCheckerTest.doiAcceptsValidInputWithNotOnlyNumbers()",0,1,1,1
"org.jabref.logic.integrity.DoiValidityCheckerTest.doiDoesNotAcceptInputWithTypoInFirstPart(String)",0,1,1,1
"org.jabref.logic.integrity.DoiValidityCheckerTest.doiDoesNotAcceptInputWithTypoInSecondPart(String)",0,1,1,1
"org.jabref.logic.integrity.DoiValidityCheckerTest.doiDoesNotAcceptInvalidInput()",0,1,1,1
"org.jabref.logic.integrity.EditionChecker.EditionChecker(BibDatabaseContext,boolean)",0,1,1,1
"org.jabref.logic.integrity.EditionChecker.checkValue(String)",11,7,9,9
"org.jabref.logic.integrity.EditionChecker.isFirstCharDigit(String)",1,1,2,2
"org.jabref.logic.integrity.EditionCheckerTest.bibLaTexAcceptsEditionAsLiteralString()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibLaTexAcceptsEditionWithCapitalFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibLaTexAcceptsIntegerInputInEdition()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibLaTexDoesNotAcceptOrdinalNumberInNumbers()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexAcceptsFirstEditionAlsoIfIntegerEditionDisallowed()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexAcceptsIntegerInputInEdition()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexAcceptsOrdinalNumberInNumbers()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexAcceptsOrdinalNumberInWordsWithCapitalFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexDoesNotAcceptIntegerOnly()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexDoesNotAcceptOrdinalNumberInWordsWithNonCapitalFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexEmptyValueAsInput()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.bibTexNullValueAsInput()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.createBiblatexEditionChecker(Boolean)",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.createBibtexEditionChecker(Boolean)",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.createSimpleEditionChecker(BibDatabaseContext,boolean)",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.editionCheckerDoesNotComplainIfAllowIntegerEditionIsEnabled()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.isFirstCharacterANumber()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.isFirstCharacterANumberFalseForEmptyString()",0,1,1,1
"org.jabref.logic.integrity.EditionCheckerTest.isFirstCharacterNotANumber()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkChecker.EntryLinkChecker(BibDatabase)",0,1,1,1
"org.jabref.logic.integrity.EntryLinkChecker.check(BibEntry)",14,1,7,7
"org.jabref.logic.integrity.EntryLinkCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkCheckerTest.testCheckExistingCrossref()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkCheckerTest.testCheckExistingRelated()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkCheckerTest.testCheckNoFields()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkCheckerTest.testCheckNonExistingCrossref()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkCheckerTest.testCheckNonExistingRelated()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkCheckerTest.testCheckNonRelatedFieldsOnly()",0,1,1,1
"org.jabref.logic.integrity.EntryLinkCheckerTest.testEntryLinkChecker()",0,1,1,1
"org.jabref.logic.integrity.FieldChecker.FieldChecker(Field,ValueChecker)",0,1,1,1
"org.jabref.logic.integrity.FieldChecker.check(BibEntry)",1,2,2,2
"org.jabref.logic.integrity.FieldCheckers.FieldCheckers(BibDatabaseContext,FilePreferences,JournalAbbreviationRepository,boolean)",0,1,1,1
"org.jabref.logic.integrity.FieldCheckers.getAll()",0,1,1,1
"org.jabref.logic.integrity.FieldCheckers.getAllMap(BibDatabaseContext,FilePreferences,JournalAbbreviationRepository,boolean)",3,1,4,4
"org.jabref.logic.integrity.FieldCheckers.getForField(Field)",0,1,1,1
"org.jabref.logic.integrity.FileChecker.FileChecker(BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.logic.integrity.FileChecker.checkValue(String)",5,4,5,5
"org.jabref.logic.integrity.HTMLCharacterChecker.check(BibEntry)",5,3,3,4
"org.jabref.logic.integrity.HTMLCharacterCheckerTest.authorAcceptsNonHTMLEncodedCharacters()",0,1,1,1
"org.jabref.logic.integrity.HTMLCharacterCheckerTest.authorDoesNotAcceptHTMLEncodedCharacters()",0,1,1,1
"org.jabref.logic.integrity.HTMLCharacterCheckerTest.journalDoesNotAcceptHTMLEncodedCharacters()",0,1,1,1
"org.jabref.logic.integrity.HTMLCharacterCheckerTest.monthAcceptsNonHTMLEncodedCharacters()",0,1,1,1
"org.jabref.logic.integrity.HTMLCharacterCheckerTest.testSettingNullThrowsNPE()",0,1,1,1
"org.jabref.logic.integrity.HTMLCharacterCheckerTest.titleAcceptsNonHTMLEncodedCharacters()",0,1,1,1
"org.jabref.logic.integrity.HTMLCharacterCheckerTest.urlAcceptsNonHTMLEncodedCharacters()",0,1,1,1
"org.jabref.logic.integrity.HowPublishedChecker.HowPublishedChecker(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.integrity.HowPublishedChecker.checkValue(String)",3,3,4,4
"org.jabref.logic.integrity.HowPublishedCheckerTest.bibLaTexAcceptsStringWithCapitalFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.HowPublishedCheckerTest.bibLaTexAcceptsStringWithLowercaseFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.HowPublishedCheckerTest.bibTexAcceptsStringWithCapitalFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.HowPublishedCheckerTest.bibTexAcceptsUrl()",0,1,1,1
"org.jabref.logic.integrity.HowPublishedCheckerTest.bibTexDoesNotAcceptStringWithLowercaseFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.HowPublishedCheckerTest.bibTexDoesNotCareAboutSpecialCharacters()",0,1,1,1
"org.jabref.logic.integrity.HowPublishedCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.ISBNChecker.checkValue(String)",3,4,4,4
"org.jabref.logic.integrity.ISBNCheckerTest.checkISBNValue(Optional,String)",0,1,1,1
"org.jabref.logic.integrity.ISBNCheckerTest.isbnAcceptsNumbersAndCharacters()",0,1,1,1
"org.jabref.logic.integrity.ISBNCheckerTest.isbnAcceptsValidInput()",0,1,1,1
"org.jabref.logic.integrity.ISBNCheckerTest.isbnDoesNotAcceptInvalidInput()",0,1,1,1
"org.jabref.logic.integrity.ISBNCheckerTest.isbnDoesNotAcceptRandomInput()",0,1,1,1
"org.jabref.logic.integrity.ISBNCheckerTest.provideBoundaryArgumentsForISBN13()",0,1,1,1
"org.jabref.logic.integrity.ISSNChecker.checkValue(String)",4,4,4,4
"org.jabref.logic.integrity.ISSNCheckerTest.emptyIssnValue()",0,1,1,1
"org.jabref.logic.integrity.ISSNCheckerTest.issnAcceptsNumbersAndCharacters()",0,1,1,1
"org.jabref.logic.integrity.ISSNCheckerTest.issnAcceptsValidInput()",0,1,1,1
"org.jabref.logic.integrity.ISSNCheckerTest.issnDoesNotAcceptInvalidInput()",0,1,1,1
"org.jabref.logic.integrity.ISSNCheckerTest.issnDoesNotAcceptRandomInput()",0,1,1,1
"org.jabref.logic.integrity.ISSNCheckerTest.issnWithWrongFormat(String)",0,1,1,1
"org.jabref.logic.integrity.ISSNCheckerTest.provideIncorrectFormatArguments()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheck.IntegrityCheck(BibDatabaseContext,FilePreferences,CitationKeyPatternPreferences,JournalAbbreviationRepository,boolean)",2,1,2,2
"org.jabref.logic.integrity.IntegrityCheck.check()",1,1,2,2
"org.jabref.logic.integrity.IntegrityCheck.checkDatabase(BibDatabase)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheck.checkEntry(BibEntry)",3,2,3,4
"org.jabref.logic.integrity.IntegrityCheckTest.assertCorrect(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.assertCorrect(BibDatabaseContext,boolean)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.assertWrong(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.authorNameChecksCorrectFormat(String)",1,1,2,2
"org.jabref.logic.integrity.IntegrityCheckTest.authorNameChecksIncorrectFormat(String)",1,1,2,2
"org.jabref.logic.integrity.IntegrityCheckTest.bibLaTexAcceptsIEEETranEntryType()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.bibLaTexAcceptsStandardEntryType()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.bibTexAcceptsStandardEntryType()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.bibTexDoesNotAcceptIEEETranEntryType()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.createCitationKeyPatternPreferences()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.createContext(Field,String)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.createContext(Field,String,EntryType)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.createContext(Field,String,MetaData)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.fileCheckFindsFilesRelativeToBibFile(Path)",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.provideCorrectFormat()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.provideIncorrectFormat()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.testEntryIsUnchangedAfterChecks()",1,1,2,2
"org.jabref.logic.integrity.IntegrityCheckTest.testFileChecks()",0,1,1,1
"org.jabref.logic.integrity.IntegrityCheckTest.withMode(BibDatabaseContext,BibDatabaseMode)",0,1,1,1
"org.jabref.logic.integrity.IntegrityMessage.IntegrityMessage(String,BibEntry,Field)",0,1,1,1
"org.jabref.logic.integrity.IntegrityMessage.clone()",0,1,1,1
"org.jabref.logic.integrity.IntegrityMessage.equals(Object)",4,3,4,6
"org.jabref.logic.integrity.IntegrityMessage.getEntry()",0,1,1,1
"org.jabref.logic.integrity.IntegrityMessage.getField()",0,1,1,1
"org.jabref.logic.integrity.IntegrityMessage.getMessage()",0,1,1,1
"org.jabref.logic.integrity.IntegrityMessage.hashCode()",0,1,1,1
"org.jabref.logic.integrity.IntegrityMessage.toString()",0,1,1,1
"org.jabref.logic.integrity.JournalInAbbreviationListChecker.JournalInAbbreviationListChecker(Field,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.logic.integrity.JournalInAbbreviationListChecker.check(BibEntry)",2,3,3,3
"org.jabref.logic.integrity.JournalInAbbreviationListCheckerTest.journalAcceptsNameInTheList()",0,1,1,1
"org.jabref.logic.integrity.JournalInAbbreviationListCheckerTest.journalDoesNotAcceptNameNotInList()",0,1,1,1
"org.jabref.logic.integrity.JournalInAbbreviationListCheckerTest.journalDoesNotAcceptRandomInputInTitle()",0,1,1,1
"org.jabref.logic.integrity.JournalInAbbreviationListCheckerTest.journalTitleDoesNotAcceptRandomInputInTitle()",0,1,1,1
"org.jabref.logic.integrity.JournalInAbbreviationListCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.MonthChecker.MonthChecker(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.integrity.MonthChecker.checkValue(String)",6,4,7,7
"org.jabref.logic.integrity.MonthCheckerTest.bibLaTexAcceptsInteger()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibLaTexAcceptsThreeLetterAbbreviationsWithHashMarks()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibLaTexDoesNotAcceptFullInput()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibLaTexDoesNotAcceptRandomString()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibLaTexDoesNotAcceptThreeLetterAbbreviationsWithNoHashMarks()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibTexAcceptsThreeLetterAbbreviationsWithHashMarks()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibTexDoesNotAcceptFullInput()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibTexDoesNotAcceptInteger()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibTexDoesNotAcceptRandomString()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibTexDoesNotAcceptThreeLetterAbbreviationsWithNoHashMarks()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.bibTexDoesNotAcceptWhateverThreeLetterAbbreviations()",0,1,1,1
"org.jabref.logic.integrity.MonthCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.NoBibTexFieldCheckerTest.biblatexOnlyField(StandardField)",0,1,1,1
"org.jabref.logic.integrity.NoBibTexFieldCheckerTest.nonBiblatexOnlyField(Field)",0,1,1,1
"org.jabref.logic.integrity.NoBibTexFieldCheckerTest.nonBiblatexOnlyFields()",0,1,1,1
"org.jabref.logic.integrity.NoBibtexFieldChecker.check(BibEntry)",0,1,1,1
"org.jabref.logic.integrity.NoBibtexFieldChecker.getAllBiblatexOnlyFields()",0,1,1,1
"org.jabref.logic.integrity.NoteChecker.NoteChecker(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.integrity.NoteChecker.checkValue(String)",3,3,4,4
"org.jabref.logic.integrity.NoteCheckerTest.bibLaTexAcceptsFirstLowercaseLetter()",0,1,1,1
"org.jabref.logic.integrity.NoteCheckerTest.bibLaTexAcceptsNoteWithFirstCapitalLetter()",0,1,1,1
"org.jabref.logic.integrity.NoteCheckerTest.bibTexAcceptsNoteWithFirstCapitalLetter()",0,1,1,1
"org.jabref.logic.integrity.NoteCheckerTest.bibTexAcceptsNoteWithFirstCapitalLetterAndDoesNotCareAboutTheRest()",0,1,1,1
"org.jabref.logic.integrity.NoteCheckerTest.bibTexAcceptsUrl()",0,1,1,1
"org.jabref.logic.integrity.NoteCheckerTest.bibTexDoesNotAcceptFirstLowercaseLetter()",0,1,1,1
"org.jabref.logic.integrity.NoteCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.PagesChecker.PagesChecker(BibDatabaseContext)",2,1,2,2
"org.jabref.logic.integrity.PagesChecker.checkValue(String)",2,3,3,3
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsMultiplePageRange()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsOpenEndPageRange()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsOpenStartPageRange()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsSinglePage()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsSinglePageRange()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsSinglePageRangeWithDoubleDashes()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsSinglePageRangeWithEnDashes()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.acceptsSinglePageRangeWithPagePrefix()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexAcceptsMorePageNumbers()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexAcceptsMorePageNumbersWithRangeOfNumbers()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexAcceptsNoSimpleRangeOfNumbers()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexAcceptsOnePageNumber()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexAcceptsRangeOfNumbersWithDoubleDash()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexAcceptsRangeOfNumbersWithSingleDash()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexDoesNotAcceptBrackets()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.bibLaTexDoesNotAcceptMorePageNumbersWithoutComma()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.complainsAboutPPPrefix()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.complainsAboutPPrefix()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerBibLatexTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexAcceptsMorePageNumbers()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexAcceptsMorePageNumbersWithRangeOfNumbers()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexAcceptsNoSimpleRangeOfNumbers()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexAcceptsOnePageNumber()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexAcceptsRangeOfNumbersWithDoubleDash()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexDoesNotAcceptBrackets()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexDoesNotAcceptMorePageNumbersWithoutComma()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.bibTexDoesNotAcceptRangeOfNumbersWithSingleDash()",0,1,1,1
"org.jabref.logic.integrity.PagesCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesChecker.PersonNamesChecker(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.integrity.PersonNamesChecker.checkValue(String)",7,5,8,8
"org.jabref.logic.integrity.PersonNamesCheckerTest.authorNameInCorrectFormatsShouldNotComplain(String)",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.authorNameInIncorrectFormatsShouldComplain(String)",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.complainAboutPersonStringWithTwoManyCommas()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.doNotComplainAboutSecondNameInFront()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.provideCorrectFormats()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.provideIncorrectFormats()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.validCorporateNameAndPerson()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.validCorporateNameInBrackets()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.validFirstnameNameAuthor()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.validFirstnameNameAuthors()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.validNameFirstnameAuthor()",0,1,1,1
"org.jabref.logic.integrity.PersonNamesCheckerTest.validNameFirstnameAuthors()",0,1,1,1
"org.jabref.logic.integrity.TitleChecker.TitleChecker(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.integrity.TitleChecker.checkValue(String)",11,8,7,8
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsCapitalLetterAfterSpecialCharacter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsCapitalLetterNotOnlyAfterSpecialCharacter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsCapitalLettersInsideSubTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsCapitalLettersInsideTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsSubTitleWithLowercaseFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsSubTitlesWithOnlyFirstCapitalLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsTitleWithLowercaseFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexAcceptsTitleWithOnlyFirstCapitalLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexRemovesCapitalLetterInsideSubTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexRemovesCapitalLetterInsideTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexRemovesEverythingInBrackets()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexRemovesEverythingInBracketsAndAcceptsNoTitleInput()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexSplitsSubTitleBasedOnSpecialCharacters()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibLaTexSplitsSubTitlesBasedOnDots()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexAcceptsCapitalLetterAfterSpecialCharacter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexAcceptsCapitalLetterOnlyAfterSpecialCharacter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexAcceptsSubTitleWithLowercaseFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexAcceptsSubTitlesWithOnlyFirstCapitalLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexAcceptsTitleWithLowercaseFirstLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexAcceptsTitleWithOnlyFirstCapitalLetter()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexDoesNotAcceptCapitalLettersInsideSubTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexDoesNotAcceptCapitalLettersInsideTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexRemovesCapitalLetterInsideSubTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexRemovesCapitalLetterInsideTitle()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexRemovesEverythingInBrackets()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexRemovesEverythingInBracketsAndAcceptsNoTitleInput()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexSplitsSubTitleBasedOnSpecialCharacters()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.bibTexSplitsSubTitlesBasedOnDots()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.firstLetterAsOnlyCapitalLetterInEverySubTitleWithContinuousDelimiters()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.firstLetterAsOnlyCapitalLetterInEverySubTitleWithRandomDelimiters()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.firstLetterAsOnlyCapitalLetterInSubTitle2()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.firstLetterAsOnlyCapitalLetterInSubTitle2AfterContinuousDelimiters()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.middleLetterAsOnlyCapitalLetterInSubTitle2()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.middleLetterAsOnlyCapitalLetterInSubTitle2AfterContinuousDelimiters()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.middleLetterAsOnlyCapitalLetterInSubTitle2WithCurlyBrackets()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.moreThanOneCapitalLetterInSubTitleWithoutCurlyBrackets()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.noCapitalLetterInSubTitle2()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.setUp()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.twoCapitalLettersInSubTitle2()",0,1,1,1
"org.jabref.logic.integrity.TitleCheckerTest.twoCapitalLettersInSubTitle2WithCurlyBrackets()",0,1,1,1
"org.jabref.logic.integrity.TypeChecker.check(BibEntry)",2,3,3,3
"org.jabref.logic.integrity.TypeCheckerTest.inProceedingsHasPagesNumbers()",0,1,1,1
"org.jabref.logic.integrity.TypeCheckerTest.proceedingsDoesNotHavePageNumbers()",0,1,1,1
"org.jabref.logic.integrity.UTF8Checker.UTF8EncodingChecker(byte[])",1,1,1,2
"org.jabref.logic.integrity.UTF8Checker.check(BibEntry)",3,1,3,3
"org.jabref.logic.integrity.UTF8CheckerTest.NonUTF8EncodingCheckerTest()",0,1,1,1
"org.jabref.logic.integrity.UTF8CheckerTest.UTF8EncodingCheckerTest()",0,1,1,1
"org.jabref.logic.integrity.UTF8CheckerTest.fieldAcceptsUTF8()",0,1,1,1
"org.jabref.logic.integrity.UTF8CheckerTest.fieldDoesNotAcceptUmlauts()",0,1,1,1
"org.jabref.logic.integrity.UrlChecker.checkValue(String)",2,3,3,3
"org.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsFullLocalPath()",0,1,1,1
"org.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsFullPathHttpAddress()",0,1,1,1
"org.jabref.logic.integrity.UrlCheckerTest.urlFieldAcceptsHttpAddress()",0,1,1,1
"org.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptHttpAddressWithoutTheHttp()",0,1,1,1
"org.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptPartialHttpAddress()",0,1,1,1
"org.jabref.logic.integrity.UrlCheckerTest.urlFieldDoesNotAcceptPartialLocalPath()",0,1,1,1
"org.jabref.logic.integrity.ValidCitationKeyChecker.checkValue(String)",3,3,3,3
"org.jabref.logic.integrity.ValidCitationKeyCheckerTest.citationKeyValidity(Optional,String)",0,1,1,1
"org.jabref.logic.integrity.ValidCitationKeyCheckerTest.provideCitationKeys()",0,1,1,1
"org.jabref.logic.integrity.YearChecker.checkValue(String)",3,4,4,4
"org.jabref.logic.integrity.YearCheckerTest.testEmptyValue()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldAccepts20thCenturyDate()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldAccepts21stCenturyDate()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldAcceptsApproximateDate()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldAcceptsApproximateDateWithParenthesis()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotAcceptDoubleDigitNumber()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotAcceptStringAsInput()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotAcceptTripleDigitNumber()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotRemoveStringBeforeComma()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotRemoveStringBeforeSpecialCharacters()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotRemoveStringInParenthesis()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotRemoveStringInYear()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldDoesNotRemoveStringInsideBraceAndPercentage()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldRemovesBraceAndPercentageFromYear()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldRemovesCommaFromYear()",0,1,1,1
"org.jabref.logic.integrity.YearCheckerTest.yearFieldRemovesSpecialCharactersFromYear()",0,1,1,1
"org.jabref.logic.journals.Abbreviation.Abbreviation(String,String)",0,1,1,1
"org.jabref.logic.journals.Abbreviation.Abbreviation(String,String,String)",0,1,1,1
"org.jabref.logic.journals.Abbreviation.compareTo(Abbreviation)",0,1,1,1
"org.jabref.logic.journals.Abbreviation.equals(Object)",3,3,2,4
"org.jabref.logic.journals.Abbreviation.getAbbreviation()",0,1,1,1
"org.jabref.logic.journals.Abbreviation.getMedlineAbbreviation()",0,1,1,1
"org.jabref.logic.journals.Abbreviation.getName()",0,1,1,1
"org.jabref.logic.journals.Abbreviation.getNext(String)",7,4,6,6
"org.jabref.logic.journals.Abbreviation.getShortestUniqueAbbreviation()",1,2,2,2
"org.jabref.logic.journals.Abbreviation.hashCode()",0,1,1,1
"org.jabref.logic.journals.Abbreviation.toString()",0,1,1,1
"org.jabref.logic.journals.AbbreviationFormat.AbbreviationFormat()",0,1,1,1
"org.jabref.logic.journals.AbbreviationFormat.getCSVFormat()",0,1,1,1
"org.jabref.logic.journals.AbbreviationParser.getAbbreviations()",0,1,1,1
"org.jabref.logic.journals.AbbreviationParser.readJournalList(Reader)",10,3,6,7
"org.jabref.logic.journals.AbbreviationParser.readJournalListFromFile(Path)",0,1,1,1
"org.jabref.logic.journals.AbbreviationParser.readJournalListFromFile(Path,Charset)",0,1,1,1
"org.jabref.logic.journals.AbbreviationParser.readJournalListFromResource(String)",1,1,2,2
"org.jabref.logic.journals.AbbreviationTest.testAbbreviationsWithSemicolons()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testAbbreviationsWithSemicolonsWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testAbbreviationsWithTrailingSpaces()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testAbbreviationsWithTrailingSpacesWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testDefaultAndMedlineAbbreviationsAreSame()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testDefaultAndMedlineAbbreviationsAreSameWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testDefaultAndShortestUniqueAbbreviationsAreSame()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testEquals()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testGetNextElement()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testGetNextElementWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testGetNextElementWithTrailingSpaces()",0,1,1,1
"org.jabref.logic.journals.AbbreviationTest.testGetNextElementWithTrailingSpacesWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.AbbreviationWriter.AbbreviationWriter()",0,1,1,1
"org.jabref.logic.journals.AbbreviationWriter.writeOrCreate(Path,List<Abbreviation>,Charset)",4,1,3,3
"org.jabref.logic.journals.AbbreviationsTest.getNextAbbreviationAbbreviatesJournalTitle()",0,1,1,1
"org.jabref.logic.journals.AbbreviationsTest.getNextAbbreviationConvertsAbbreviationToDotLessAbbreviation()",0,1,1,1
"org.jabref.logic.journals.AbbreviationsTest.setUp()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationLoader.loadBuiltInRepository()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationLoader.loadRepository(JournalAbbreviationPreferences)",7,1,5,5
"org.jabref.logic.journals.JournalAbbreviationLoader.readJournalListFromFile(Path)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationPreferences.JournalAbbreviationPreferences(List<String>,Charset)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationPreferences.getDefaultEncoding()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationPreferences.getExternalJournalLists()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationPreferences.setExternalJournalLists(List<String>)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.JournalAbbreviationRepository(Path)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.addCustomAbbreviation(Abbreviation)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.addCustomAbbreviations(Collection<Abbreviation>)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.get(String)",1,2,1,2
"org.jabref.logic.journals.JournalAbbreviationRepository.getAllLoaded()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.getCustomAbbreviations()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.getDefaultAbbreviation(String)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.getFullNames()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.getMedlineAbbreviation(String)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.getNextAbbreviation(String)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.getShortestUniqueAbbreviation(String)",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepository.isAbbreviatedName(String)",1,1,2,2
"org.jabref.logic.journals.JournalAbbreviationRepository.isKnownName(String)",2,2,2,3
"org.jabref.logic.journals.JournalAbbreviationRepository.isMatched(String,Abbreviation)",1,1,4,4
"org.jabref.logic.journals.JournalAbbreviationRepository.isMatchedAbbreviated(String,Abbreviation)",2,1,3,4
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.empty()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.getFromAbbreviatedName()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.getFromFullName()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.oneElement()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.oneElementWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.setUp()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.testDuplicateKeys()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.testDuplicateKeysWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.testDuplicates()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.testDuplicatesIsoOnly()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.testDuplicatesIsoOnlyWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest.testDuplicatesWithShortestUniqueAbbreviation()",0,1,1,1
"org.jabref.logic.l10n.Encodings.Encodings()",0,1,1,1
"org.jabref.logic.l10n.Encodings.getCharsets()",0,1,1,1
"org.jabref.logic.l10n.EncodingsTest.charsetsShouldNotBeEmpty()",0,1,1,1
"org.jabref.logic.l10n.EncodingsTest.charsetsShouldNotBeNull()",0,1,1,1
"org.jabref.logic.l10n.EncodingsTest.displayNamesShouldNotBeEmpty()",0,1,1,1
"org.jabref.logic.l10n.EncodingsTest.displayNamesShouldNotBeNull()",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParser.getContentWithinQuotes(String)",7,6,5,7
"org.jabref.logic.l10n.JavaLocalizationEntryParser.getLanguageKeysInString(String,LocalizationBundleForTest)",8,4,4,6
"org.jabref.logic.l10n.JavaLocalizationEntryParser.getLocalizationParameter(String,LocalizationBundleForTest)",12,1,5,7
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.causesRuntimeExceptions()",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.multiLineChecks()",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.singleLineChecks()",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.singleLineParameterChecks()",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.testLocalizationKeyParsing(String,List<String>)",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.testLocalizationKeyParsing(String,String)",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.testLocalizationParameterParsing(String,String)",0,1,1,1
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest.throwsRuntimeException(String)",0,1,1,1
"org.jabref.logic.l10n.Language.Language(String,String)",0,1,1,1
"org.jabref.logic.l10n.Language.convertToSupportedLocale(Language)",3,1,1,3
"org.jabref.logic.l10n.Language.getDisplayName()",0,1,1,1
"org.jabref.logic.l10n.Language.getId()",0,1,1,1
"org.jabref.logic.l10n.LanguageTest.convertKnownLanguageAndCountryCorrect()",0,1,1,1
"org.jabref.logic.l10n.LanguageTest.convertKnownLanguageOnly()",0,1,1,1
"org.jabref.logic.l10n.LanguageTest.convertToKnownLocaleNull()",0,1,1,1
"org.jabref.logic.l10n.Localization.Localization()",0,1,1,1
"org.jabref.logic.l10n.Localization.LocalizationBundle.LocalizationBundle(Map<String, String>)",0,1,1,1
"org.jabref.logic.l10n.Localization.LocalizationBundle.containsKey(String)",0,1,1,1
"org.jabref.logic.l10n.Localization.LocalizationBundle.getKeys()",0,1,1,1
"org.jabref.logic.l10n.Localization.LocalizationBundle.handleGetObject(String)",0,1,1,1
"org.jabref.logic.l10n.Localization.LocalizationBundle.handleKeySet()",0,1,1,1
"org.jabref.logic.l10n.Localization.createLookupMap(ResourceBundle)",0,1,1,1
"org.jabref.logic.l10n.Localization.createResourceBundles(Locale)",0,1,1,1
"org.jabref.logic.l10n.Localization.getMessages()",1,1,2,2
"org.jabref.logic.l10n.Localization.lang(String,Object...)",1,1,2,2
"org.jabref.logic.l10n.Localization.lookup(LocalizationBundle,String,String...)",2,1,3,3
"org.jabref.logic.l10n.Localization.setLanguage(Language)",6,3,5,6
"org.jabref.logic.l10n.LocalizationConsistencyTest.DuplicationDetectionProperties.DuplicationDetectionProperties()",0,1,1,1
"org.jabref.logic.l10n.LocalizationConsistencyTest.DuplicationDetectionProperties.getDuplicates()",0,1,1,1
"org.jabref.logic.l10n.LocalizationConsistencyTest.DuplicationDetectionProperties.put(Object,Object)",1,1,2,2
"org.jabref.logic.l10n.LocalizationConsistencyTest.allFilesMustBeInLanguages()",3,1,3,3
"org.jabref.logic.l10n.LocalizationConsistencyTest.ensureNoDuplicates()",3,2,2,3
"org.jabref.logic.l10n.LocalizationConsistencyTest.findMissingLocalizationKeys()",0,1,1,1
"org.jabref.logic.l10n.LocalizationConsistencyTest.findObsoleteLocalizationKeys()",0,1,1,1
"org.jabref.logic.l10n.LocalizationConsistencyTest.installedLanguages()",0,1,1,1
"org.jabref.logic.l10n.LocalizationConsistencyTest.keyValueShouldBeEqualForEnglishPropertiesMessages()",1,1,2,2
"org.jabref.logic.l10n.LocalizationConsistencyTest.languageCanBeLoaded(Language)",0,1,1,1
"org.jabref.logic.l10n.LocalizationConsistencyTest.languageKeysShouldNotContainHtmlBrAndHtmlP()",1,1,2,2
"org.jabref.logic.l10n.LocalizationConsistencyTest.languageKeysShouldNotContainUnderscoresForSpaces()",0,1,1,1
"org.jabref.logic.l10n.LocalizationConsistencyTest.localizationParameterMustIncludeAString()",4,1,5,5
"org.jabref.logic.l10n.LocalizationConsistencyTest.resourceBundleExists(Language)",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.LocalizationEntry(Path,String,LocalizationBundleForTest)",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.compareTo(LocalizationEntry)",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.equals(Object)",4,4,2,5
"org.jabref.logic.l10n.LocalizationEntry.getBundle()",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.getId()",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.getKey()",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.getPath()",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.hashCode()",0,1,1,1
"org.jabref.logic.l10n.LocalizationEntry.toString()",0,1,1,1
"org.jabref.logic.l10n.LocalizationKey.LocalizationKey(String)",0,1,1,1
"org.jabref.logic.l10n.LocalizationKey.fromEscapedJavaString(String)",0,1,1,1
"org.jabref.logic.l10n.LocalizationKey.fromKey(String)",0,1,1,1
"org.jabref.logic.l10n.LocalizationKey.getEscapedPropertiesKey()",0,1,1,1
"org.jabref.logic.l10n.LocalizationKey.getKey()",0,1,1,1
"org.jabref.logic.l10n.LocalizationKey.getValueForEnglishPropertiesFile()",0,1,1,1
"org.jabref.logic.l10n.LocalizationKeyParams.LocalizationKeyParams(String,String...)",1,2,1,2
"org.jabref.logic.l10n.LocalizationKeyParams.replacePlaceholders()",1,1,2,2
"org.jabref.logic.l10n.LocalizationKeyParamsTest.provideTestData()",0,1,1,1
"org.jabref.logic.l10n.LocalizationKeyParamsTest.testReplacePlaceholders(String,LocalizationKeyParams)",0,1,1,1
"org.jabref.logic.l10n.LocalizationKeyParamsTest.testTooManyParams()",0,1,1,1
"org.jabref.logic.l10n.LocalizationKeyTest.getPropertiesKeyReturnsCorrectValue(String,String)",0,1,1,1
"org.jabref.logic.l10n.LocalizationKeyTest.propertiesKeyTestCases()",0,1,1,1
"org.jabref.logic.l10n.LocalizationLocator.getResourceBundle(String)",0,1,1,1
"org.jabref.logic.l10n.LocalizationParser.findLocalizationEntriesInFiles(LocalizationBundleForTest)",2,2,2,2
"org.jabref.logic.l10n.LocalizationParser.findLocalizationEntriesInFxmlFiles(LocalizationBundleForTest)",1,1,1,2
"org.jabref.logic.l10n.LocalizationParser.findLocalizationEntriesInJavaFiles(LocalizationBundleForTest)",1,1,1,2
"org.jabref.logic.l10n.LocalizationParser.findLocalizationParametersStringsInJavaFiles(LocalizationBundleForTest)",1,1,1,2
"org.jabref.logic.l10n.LocalizationParser.findMissingKeys(LocalizationBundleForTest)",2,1,2,2
"org.jabref.logic.l10n.LocalizationParser.findObsolete(LocalizationBundleForTest)",2,1,2,2
"org.jabref.logic.l10n.LocalizationParser.getKeysInPropertiesFile(String)",0,1,1,1
"org.jabref.logic.l10n.LocalizationParser.getLanguageKeysInFxmlFile(Path,LocalizationBundleForTest)",1,1,1,2
"org.jabref.logic.l10n.LocalizationParser.getLanguageKeysInJavaFile(Path,LocalizationBundleForTest)",1,1,1,2
"org.jabref.logic.l10n.LocalizationParser.getLocalizationParametersInJavaFile(Path,LocalizationBundleForTest)",1,1,1,2
"org.jabref.logic.l10n.LocalizationParser.getProperties(String)",1,1,1,2
"org.jabref.logic.l10n.LocalizationParser.isFxmlFile(Path)",0,1,1,1
"org.jabref.logic.l10n.LocalizationParser.isJavaFile(Path)",0,1,1,1
"org.jabref.logic.l10n.LocalizationParser.setStaticLoad(FXMLLoader)",1,1,1,2
"org.jabref.logic.l10n.LocalizationTest.newLineIsAvailableAndKeptUnescaped()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.restoreDefaultLocale()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.storeDefaultLocale()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.testKnownEnglishTranslationOfUndo()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.testKnownGermanTranslation()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.testKnownTranslationWithCountryModifier()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.testKnownTranslationWithGroups()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.testSetKnownLanguage()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.testUnknownTranslation()",0,1,1,1
"org.jabref.logic.l10n.LocalizationTest.testUnsetLanguageTranslation()",0,1,1,1
"org.jabref.logic.layout.AbstractParamLayoutFormatter.AbstractParamLayoutFormatter()",0,1,1,1
"org.jabref.logic.layout.AbstractParamLayoutFormatter.parseArgument(String)",21,1,11,11
"org.jabref.logic.layout.Layout.Layout(List<StringInt>,LayoutFormatterPreferences)",21,1,6,11
"org.jabref.logic.layout.Layout.doLayout(BibDatabaseContext,Charset)",3,1,2,3
"org.jabref.logic.layout.Layout.doLayout(BibEntry,BibDatabase)",3,1,2,3
"org.jabref.logic.layout.Layout.getMissingFormatters()",0,1,1,1
"org.jabref.logic.layout.Layout.getText()",0,1,1,1
"org.jabref.logic.layout.Layout.setPostFormatter(LayoutFormatter)",1,1,2,2
"org.jabref.logic.layout.LayoutEntry.LayoutEntry(List<StringInt>,int,LayoutFormatterPreferences)",16,1,6,9
"org.jabref.logic.layout.LayoutEntry.LayoutEntry(StringInt,LayoutFormatterPreferences)",1,1,1,4
"org.jabref.logic.layout.LayoutEntry.doLayout(BibDatabaseContext,Charset)",8,7,6,11
"org.jabref.logic.layout.LayoutEntry.doLayout(BibEntry,BibDatabase)",3,6,5,8
"org.jabref.logic.layout.LayoutEntry.doOptionField(String)",7,1,4,4
"org.jabref.logic.layout.LayoutEntry.getInvalidFormatters()",0,1,1,1
"org.jabref.logic.layout.LayoutEntry.getLayoutFormatterByName(String)",1,1,4,72
"org.jabref.logic.layout.LayoutEntry.getOptionalLayout(String)",11,5,7,7
"org.jabref.logic.layout.LayoutEntry.getText()",0,1,1,1
"org.jabref.logic.layout.LayoutEntry.handleFieldOrGroupStart(BibEntry,BibDatabase)",57,12,18,22
"org.jabref.logic.layout.LayoutEntry.handleOptionField(BibEntry,BibDatabase)",9,1,7,7
"org.jabref.logic.layout.LayoutEntry.parseMethodsCalls(String)",58,1,8,23
"org.jabref.logic.layout.LayoutEntry.setPostFormatter(LayoutFormatter)",0,1,1,1
"org.jabref.logic.layout.LayoutEntryTest.layout(String,BibEntry)",0,1,1,1
"org.jabref.logic.layout.LayoutEntryTest.setUp()",0,1,1,1
"org.jabref.logic.layout.LayoutEntryTest.testParseMethodCalls()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterBasedFormatter.LayoutFormatterBasedFormatter(LayoutFormatter)",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterBasedFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterBasedFormatter.getDescription()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterBasedFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterBasedFormatter.getKey()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterBasedFormatter.getName()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterPreferences.LayoutFormatterPreferences(NameFormatterPreferences,FileLinkPreferences,JournalAbbreviationRepository)",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterPreferences.clearCustomExportNameFormatters()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterPreferences.getCustomExportNameFormatter(String)",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterPreferences.getFileLinkPreferences()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterPreferences.getJournalAbbreviationRepository()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterPreferences.getNameFormatterPreferences()",0,1,1,1
"org.jabref.logic.layout.LayoutFormatterPreferences.putCustomExportNameFormatter(String,String)",0,1,1,1
"org.jabref.logic.layout.LayoutHelper.LayoutHelper(Reader,LayoutFormatterPreferences)",0,1,1,1
"org.jabref.logic.layout.LayoutHelper.doBracketedField(int)",25,6,8,11
"org.jabref.logic.layout.LayoutHelper.doBracketedOptionField()",51,7,12,23
"org.jabref.logic.layout.LayoutHelper.getCurrentGroup()",0,1,1,1
"org.jabref.logic.layout.LayoutHelper.getLayoutFromText()",4,1,3,7
"org.jabref.logic.layout.LayoutHelper.parse()",21,3,9,12
"org.jabref.logic.layout.LayoutHelper.parseField()",41,13,17,19
"org.jabref.logic.layout.LayoutHelper.peek()",0,1,1,1
"org.jabref.logic.layout.LayoutHelper.read()",0,1,1,1
"org.jabref.logic.layout.LayoutHelper.setCurrentGroup(String)",0,1,1,1
"org.jabref.logic.layout.LayoutHelper.skipWhitespace()",6,4,3,5
"org.jabref.logic.layout.LayoutHelper.unread(int)",0,1,1,1
"org.jabref.logic.layout.LayoutHelperTest.backslashDoesNotTriggerException()",0,1,1,1
"org.jabref.logic.layout.LayoutHelperTest.minimalExampleWithDoiGetsParsed()",0,1,1,1
"org.jabref.logic.layout.LayoutHelperTest.unbalancedBeginEndIsParsed()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.HTMLChar()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.HTMLCharWithDoubleLineBreak()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.HTMLCharsWithDotlessIAndTiled()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.beginConditionals()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.customNameFormatter()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.entryTypeForArticle()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.entryTypeForMisc()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.entryTypeForUnknown()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.expandCommandIfTerminatedByMinus()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.layout(String,BibEntry)",0,1,1,1
"org.jabref.logic.layout.LayoutTest.nameFormatter()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.setUp()",0,1,1,1
"org.jabref.logic.layout.LayoutTest.wrapFileLinksExpandFile()",0,1,1,1
"org.jabref.logic.layout.StringInt.StringInt(String,int)",0,1,1,1
"org.jabref.logic.layout.TextBasedPreviewLayout.TextBasedPreviewLayout(Layout)",0,1,1,1
"org.jabref.logic.layout.TextBasedPreviewLayout.TextBasedPreviewLayout(String,LayoutFormatterPreferences)",0,1,1,1
"org.jabref.logic.layout.TextBasedPreviewLayout.generatePreview(BibEntry,BibDatabase)",2,2,2,2
"org.jabref.logic.layout.TextBasedPreviewLayout.getDisplayName()",0,1,1,1
"org.jabref.logic.layout.TextBasedPreviewLayout.getName()",0,1,1,1
"org.jabref.logic.layout.TextBasedPreviewLayout.getText()",0,1,1,1
"org.jabref.logic.layout.TextBasedPreviewLayout.setText(String)",1,1,2,2
"org.jabref.logic.layout.format.AuthorAbbreviator.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorAbbreviatorTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorAndToSemicolonReplacer.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest.data()",0,1,1,1
"org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest.testFormat(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorAndsCommaReplacer.format(String)",3,1,2,4
"org.jabref.logic.layout.format.AuthorAndsCommaReplacerTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorAndsReplacer.format(String)",4,2,2,5
"org.jabref.logic.layout.format.AuthorAndsReplacerTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastOxfordCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastOxfordCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstFirst.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstFirstCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstFirstCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstFirstTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstLastCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstLastCommasTest.formatTests()",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstLastCommasTest.paramLayoutFormatTest(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstLastOxfordCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorFirstLastOxfordCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLF_FF.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLF_FFAbbr.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLF_FFAbbrTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLF_FFTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirst.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrOxfordCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrOxfordCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviator.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviatorTester.abbreviate(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviatorTester.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviatorTester.testJrAuthor()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviatorTester.testOneAuthorCommonName()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviatorTester.testOneAuthorSimpleName()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviatorTester.testTwoAuthorsCommonName()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstOxfordCommas.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstOxfordCommasTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorLastFirstTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.AuthorNatBib.format(String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorNatBibTest.formatTests()",0,1,1,1
"org.jabref.logic.layout.format.AuthorNatBibTest.paramLayoutFormatTest(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorOrgSci.format(String)",2,2,2,3
"org.jabref.logic.layout.format.AuthorOrgSciTest.formatTests()",0,1,1,1
"org.jabref.logic.layout.format.AuthorOrgSciTest.formatTestsComposite()",0,1,1,1
"org.jabref.logic.layout.format.AuthorOrgSciTest.paramLayoutFormatTest(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorOrgSciTest.paramLayoutFormatTestComposite(String,String)",0,1,1,1
"org.jabref.logic.layout.format.Authors.addSingleName(StringBuilder,Author,boolean)",28,1,13,13
"org.jabref.logic.layout.format.Authors.comp(String,String)",0,1,1,1
"org.jabref.logic.layout.format.Authors.format(String)",17,2,8,11
"org.jabref.logic.layout.format.Authors.handleArgument(String,String)",53,1,27,36
"org.jabref.logic.layout.format.Authors.setArgument(String)",4,1,3,3
"org.jabref.logic.layout.format.AuthorsTest.testAuthorABRV(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testAuthorOrder(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testAuthorPUNC(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testAuthorSEPARATORS(String,String)",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testEmptyEtAl()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testEtAl()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testEtAlNotEnoughAuthors()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testLastName()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testMiddleInitial()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testNoPeriod()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testSpecialEtAl()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardAmpFullName()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardCommaFullName()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardOxford()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardOxfordFullName()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsage()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsageFive()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsageFour()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsageNull()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsageOne()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsageSix()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsageThree()",0,1,1,1
"org.jabref.logic.layout.format.AuthorsTest.testStandardUsageTwo()",0,1,1,1
"org.jabref.logic.layout.format.CSLType.format(String)",1,1,1,7
"org.jabref.logic.layout.format.CompositeFormat.CompositeFormat()",0,1,1,1
"org.jabref.logic.layout.format.CompositeFormat.CompositeFormat(LayoutFormatter,LayoutFormatter)",0,1,1,1
"org.jabref.logic.layout.format.CompositeFormat.CompositeFormat(LayoutFormatter[])",0,1,1,1
"org.jabref.logic.layout.format.CompositeFormat.format(String)",1,1,2,2
"org.jabref.logic.layout.format.CompositeFormatTest.testArrayComposite()",0,1,1,1
"org.jabref.logic.layout.format.CompositeFormatTest.testDoubleComposite()",0,1,1,1
"org.jabref.logic.layout.format.CompositeFormatTest.testEmptyComposite()",0,1,1,1
"org.jabref.logic.layout.format.CreateBibORDFAuthors.format(String)",7,1,4,4
"org.jabref.logic.layout.format.CreateBibORDFAuthors.singleAuthor(StringBuilder,String,int)",0,1,1,1
"org.jabref.logic.layout.format.CreateDocBook4Authors.format(String)",0,1,1,1
"org.jabref.logic.layout.format.CreateDocBook4Editors.format(String)",0,1,1,1
"org.jabref.logic.layout.format.CreateDocBook5Authors.format(String)",0,1,1,1
"org.jabref.logic.layout.format.CreateDocBook5Editors.format(String)",0,1,1,1
"org.jabref.logic.layout.format.CurrentDate.format(String)",2,1,2,3
"org.jabref.logic.layout.format.DOICheck.format(String)",2,2,2,3
"org.jabref.logic.layout.format.DOICheckTest.formatDOI(String,String)",0,1,1,1
"org.jabref.logic.layout.format.DOICheckTest.provideDOI()",0,1,1,1
"org.jabref.logic.layout.format.DOIStrip.format(String)",1,2,1,2
"org.jabref.logic.layout.format.DOIStripTest.provideDOI()",0,1,1,1
"org.jabref.logic.layout.format.DOIStripTest.testFormatDOIStrip(String,String)",0,1,1,1
"org.jabref.logic.layout.format.DateFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.format.DateFormatter.setArgument(String)",0,1,1,1
"org.jabref.logic.layout.format.DateFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.DateFormatterTest.testDefaultFormat()",0,1,1,1
"org.jabref.logic.layout.format.DateFormatterTest.testOtherFormats(String,String,String)",0,1,1,1
"org.jabref.logic.layout.format.DateFormatterTest.testRequestedFormat()",0,1,1,1
"org.jabref.logic.layout.format.Default.format(String)",2,1,2,3
"org.jabref.logic.layout.format.Default.setArgument(String)",0,1,1,1
"org.jabref.logic.layout.format.DefaultTest.formatTests()",0,1,1,1
"org.jabref.logic.layout.format.DefaultTest.paramLayoutFormatTest(String,String,String)",1,1,2,2
"org.jabref.logic.layout.format.DocBookAuthorFormatter.addBody(StringBuilder,AuthorList,String,DocBookVersion)",9,1,5,5
"org.jabref.logic.layout.format.EntryTypeFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.format.EntryTypeFormatterTest.formatTests()",0,1,1,1
"org.jabref.logic.layout.format.EntryTypeFormatterTest.testCorrectFormat(String,String)",0,1,1,1
"org.jabref.logic.layout.format.FileLink.FileLink(FileLinkPreferences)",0,1,1,1
"org.jabref.logic.layout.format.FileLink.format(String)",13,6,5,8
"org.jabref.logic.layout.format.FileLink.setArgument(String)",0,1,1,1
"org.jabref.logic.layout.format.FileLinkPreferences.FileLinkPreferences(String,List<Path>)",0,1,1,1
"org.jabref.logic.layout.format.FileLinkPreferences.getFileDirForDatabase()",0,1,1,1
"org.jabref.logic.layout.format.FileLinkPreferences.getMainFileDirectory()",0,1,1,1
"org.jabref.logic.layout.format.FileLinkTest.formatFileLinks(String,String,String)",1,1,2,2
"org.jabref.logic.layout.format.FileLinkTest.provideFileLinks()",0,1,1,1
"org.jabref.logic.layout.format.FileLinkTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.FirstPage.format(String)",3,3,1,3
"org.jabref.logic.layout.format.FirstPageTest.formatPages(String,String)",0,1,1,1
"org.jabref.logic.layout.format.FirstPageTest.providePages()",0,1,1,1
"org.jabref.logic.layout.format.FormatPagesForHTML.format(String)",0,1,1,1
"org.jabref.logic.layout.format.FormatPagesForXML.format(String)",0,1,1,1
"org.jabref.logic.layout.format.GetOpenOfficeType.format(String)",14,15,1,15
"org.jabref.logic.layout.format.HTMLChars.format(String)",67,3,22,26
"org.jabref.logic.layout.format.HTMLChars.getHTMLTag(String)",1,1,1,9
"org.jabref.logic.layout.format.HTMLCharsTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.testBasicFormat()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.testEquations()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.testLaTeXHighlighting()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.testNewLine()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.testQuoteSingle()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.unknownCommandIsKept()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.unknownCommandKeepsArgument()",0,1,1,1
"org.jabref.logic.layout.format.HTMLCharsTest.unknownCommandWithEmptyArgumentIsKept()",0,1,1,1
"org.jabref.logic.layout.format.HTMLParagraphs.format(String)",5,3,3,5
"org.jabref.logic.layout.format.HTMLParagraphsTest.htmlFormatTests()",0,1,1,1
"org.jabref.logic.layout.format.HTMLParagraphsTest.testCorrectFormat(String,String)",0,1,1,1
"org.jabref.logic.layout.format.IfPlural.format(String)",4,3,3,5
"org.jabref.logic.layout.format.IfPlural.setArgument(String)",1,2,1,2
"org.jabref.logic.layout.format.IfPluralTest.testFormatEmpty()",0,1,1,1
"org.jabref.logic.layout.format.IfPluralTest.testFormatNull()",0,1,1,1
"org.jabref.logic.layout.format.IfPluralTest.testNoArgumentSet()",0,1,1,1
"org.jabref.logic.layout.format.IfPluralTest.testNoProperArgument()",0,1,1,1
"org.jabref.logic.layout.format.IfPluralTest.testStandardUsageOneEditor()",0,1,1,1
"org.jabref.logic.layout.format.IfPluralTest.testStandardUsageTwoEditors()",0,1,1,1
"org.jabref.logic.layout.format.Iso690FormatDate.format(String)",4,2,4,5
"org.jabref.logic.layout.format.Iso690NamesAuthors.format(String)",14,2,9,10
"org.jabref.logic.layout.format.JournalAbbreviator.JournalAbbreviator(JournalAbbreviationRepository)",0,1,1,1
"org.jabref.logic.layout.format.JournalAbbreviator.format(String)",0,1,1,1
"org.jabref.logic.layout.format.LastPage.format(String)",4,4,1,4
"org.jabref.logic.layout.format.LastPageTest.formatLastPage(String,String)",0,1,1,1
"org.jabref.logic.layout.format.LastPageTest.provideArguments()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatter.getDescription()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatter.getKey()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatter.getName()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.formatExample()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.keepUnknownCommandWithArgument()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.keepUnknownCommandWithEmptyArgument()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.keepUnknownCommandWithoutArgument()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.preserveUnknownCommand()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testAcuteNLongVersion()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testAcuteNShortVersion()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testApostrophC()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testApostrophN()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testApostrophO()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testChi()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testCombiningAccentsCase1()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testCombiningAccentsCase2()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testConversionOfOrdinal1st()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testConversionOfOrdinal2nd()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testConversionOfOrdinal3rd()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testConversionOfOrdinal4th()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testConversionOfOrdinal9th()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testConversionOfUnderscoreWithBraces()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testDoubleCombiningAccents()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testEquationsMoreComplicatedFormatting()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testEquationsSingleSymbol()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testEscapedDollarSign()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testFormatTextit()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testFormatUmlaut()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testIWithDiaresis()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testIWithDiaresisAndEscapedI()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testIWithDiaresisAndUnnecessaryBraces()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testPlainFormat()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testPolishName()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testPreservationOfSingleUnderscore()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testSWithCaron()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testTildeN()",0,1,1,1
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest.testUpperCaseIWithDiaresis()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatter.MarkdownFormatter()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatterTest.formatWhenFormattingComplexMarkupThenReturnsOnlyOneLine()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatterTest.formatWhenFormattingEmptyStringThenReturnsEmptyString()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatterTest.formatWhenFormattingNullThenThrowsException()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatterTest.formatWhenFormattingPlainTextThenReturnsTextWrappedInParagraph()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatterTest.formatWhenMarkupContainingStrikethroughThenContainsMatchingDel()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatterTest.formatWhenMarkupContainingTaskListThenContainsFormattedTaskList()",0,1,1,1
"org.jabref.logic.layout.format.MarkdownFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.NameFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.format.NameFormatter.format(String,AuthorList,String[])",29,5,6,10
"org.jabref.logic.layout.format.NameFormatter.format(String,String)",12,5,5,7
"org.jabref.logic.layout.format.NameFormatter.getNameFormatters(NameFormatterPreferences)",4,1,3,3
"org.jabref.logic.layout.format.NameFormatter.setParameter(String)",0,1,1,1
"org.jabref.logic.layout.format.NameFormatterPreferences.NameFormatterPreferences(List<String>,List<String>)",0,1,1,1
"org.jabref.logic.layout.format.NameFormatterPreferences.getNameFormatterKey()",0,1,1,1
"org.jabref.logic.layout.format.NameFormatterPreferences.getNameFormatterValue()",0,1,1,1
"org.jabref.logic.layout.format.NameFormatterTest.testFormat()",0,1,1,1
"org.jabref.logic.layout.format.NameFormatterTest.testFormatStringStringBibtexEntry()",0,1,1,1
"org.jabref.logic.layout.format.NoSpaceBetweenAbbreviations.format(String)",0,1,1,1
"org.jabref.logic.layout.format.NoSpaceBetweenAbbreviationsTest.formatAbbreviations(String,String)",0,1,1,1
"org.jabref.logic.layout.format.NoSpaceBetweenAbbreviationsTest.provideAbbreviations()",0,1,1,1
"org.jabref.logic.layout.format.NotFoundFormatter.NotFoundFormatter(String)",0,1,1,1
"org.jabref.logic.layout.format.NotFoundFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.format.NotFoundFormatter.getNotFound()",0,1,1,1
"org.jabref.logic.layout.format.Number.format(String)",0,1,1,1
"org.jabref.logic.layout.format.Number.setArgument(String)",0,1,1,1
"org.jabref.logic.layout.format.Ordinal.format(String)",4,2,2,6
"org.jabref.logic.layout.format.OrdinalTest.testAlreadyOrdinals()",0,1,1,1
"org.jabref.logic.layout.format.OrdinalTest.testEmpty()",0,1,1,1
"org.jabref.logic.layout.format.OrdinalTest.testFullSentence()",0,1,1,1
"org.jabref.logic.layout.format.OrdinalTest.testLetters()",0,1,1,1
"org.jabref.logic.layout.format.OrdinalTest.testMultiDigits()",0,1,1,1
"org.jabref.logic.layout.format.OrdinalTest.testNull()",0,1,1,1
"org.jabref.logic.layout.format.OrdinalTest.testSingleDigit()",0,1,1,1
"org.jabref.logic.layout.format.RTFChars.format(String)",85,7,31,38
"org.jabref.logic.layout.format.RTFChars.getPart(String,int,boolean)",8,3,3,7
"org.jabref.logic.layout.format.RTFChars.transformSpecialCharacter(long)",88,46,1,148
"org.jabref.logic.layout.format.RTFCharsTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.tearDown()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testBasicFormat()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testComplicated()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testComplicated2()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testComplicated3()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testComplicated4()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testComplicated5()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testComplicated6()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testLaTeXHighlighting()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testMoreSpecialCharacters(String,String)",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testRTFCharacters()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testRTFCharactersCapital()",0,1,1,1
"org.jabref.logic.layout.format.RTFCharsTest.testSpecialCharacters()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBrackets.format(String)",4,1,3,4
"org.jabref.logic.layout.format.RemoveBracketsAddComma.format(String)",4,1,4,4
"org.jabref.logic.layout.format.RemoveBracketsAddCommaTest.formatTextWithBrackets(String,String)",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsAddCommaTest.provideExamples()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsAddCommaTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsTest.bracePairCorrectlyRemoved()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsTest.bracePairWithEscapedBackslashCorrectlyRemoved()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsTest.singleClosingBraceCorrectlyRemoved()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsTest.singleOpeningBraceCorrectlyRemoved()",0,1,1,1
"org.jabref.logic.layout.format.RemoveBracketsTest.withoutBracketsUnmodified()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatter.format(String)",46,1,18,23
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.escapedBackslashBecomesBackslash()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.escapedBackslashFollowedByTextBecomesBackslashFollowedByText()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.escapedBackslashKept()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.escapedUnderscoreReplaces()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.exampleUrlCorrectlyCleaned()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.multipleSpacesAfterCommandRemoved()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.singleCommandWiped()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.singleSpaceAfterCommandRemoved()",0,1,1,1
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest.withoutLatexCommandsUnmodified()",0,1,1,1
"org.jabref.logic.layout.format.RemoveTilde.format(String)",8,1,4,5
"org.jabref.logic.layout.format.RemoveTildeTest.formatText(String,String)",0,1,1,1
"org.jabref.logic.layout.format.RemoveTildeTest.provideArguments()",0,1,1,1
"org.jabref.logic.layout.format.RemoveTildeTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.RemoveWhitespace.format(String)",5,2,4,5
"org.jabref.logic.layout.format.RemoveWhitespaceTest.testEmptyExpectEmpty()",0,1,1,1
"org.jabref.logic.layout.format.RemoveWhitespaceTest.testNewLineCombo()",0,1,1,1
"org.jabref.logic.layout.format.RemoveWhitespaceTest.testNormal()",0,1,1,1
"org.jabref.logic.layout.format.RemoveWhitespaceTest.testNullExpectNull()",0,1,1,1
"org.jabref.logic.layout.format.RemoveWhitespaceTest.testTab()",0,1,1,1
"org.jabref.logic.layout.format.Replace.format(String)",2,2,1,3
"org.jabref.logic.layout.format.Replace.setArgument(String)",1,2,1,2
"org.jabref.logic.layout.format.ReplaceTest.testFormatEmpty()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceTest.testFormatNull()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceTest.testNoArgumentSet()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceTest.testNoProperArgument()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceTest.testSimpleText()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceTest.testSimpleTextNoHit()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatter.ReplaceUnicodeLigaturesFormatter()",1,1,2,2
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatter.format(String)",1,1,2,2
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatter.getDescription()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatter.getExampleInput()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatter.getKey()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatter.getName()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatterTest.testLigatureSequence()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatterTest.testPlainFormat()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatterTest.testSampleInput()",0,1,1,1
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatterTest.testSingleLigatures()",0,1,1,1
"org.jabref.logic.layout.format.RisAuthors.format(String)",4,2,3,4
"org.jabref.logic.layout.format.RisAuthors.setArgument(String)",0,1,1,1
"org.jabref.logic.layout.format.RisKeywords.format(String)",4,2,3,4
"org.jabref.logic.layout.format.RisKeywordsTest.testEmpty()",0,1,1,1
"org.jabref.logic.layout.format.RisKeywordsTest.testMultipleKeywords()",0,1,1,1
"org.jabref.logic.layout.format.RisKeywordsTest.testNull()",0,1,1,1
"org.jabref.logic.layout.format.RisKeywordsTest.testSingleKeyword()",0,1,1,1
"org.jabref.logic.layout.format.RisKeywordsTest.testTwoKeywords()",0,1,1,1
"org.jabref.logic.layout.format.RisMonth.format(String)",1,2,1,2
"org.jabref.logic.layout.format.RisMonthTest.testEmpty()",0,1,1,1
"org.jabref.logic.layout.format.RisMonthTest.testInvalidMonth()",0,1,1,1
"org.jabref.logic.layout.format.RisMonthTest.testNull()",0,1,1,1
"org.jabref.logic.layout.format.RisMonthTest.testValidMonth(String,String)",0,1,1,1
"org.jabref.logic.layout.format.ShortMonthFormatter.format(String)",0,1,1,1
"org.jabref.logic.layout.format.ShortMonthFormatterTest.formatDifferentInputs(String,String)",0,1,1,1
"org.jabref.logic.layout.format.ShortMonthFormatterTest.formatNullInput()",0,1,1,1
"org.jabref.logic.layout.format.ShortMonthFormatterTest.provideArguments()",0,1,1,1
"org.jabref.logic.layout.format.ShortMonthFormatterTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.ToLowerCase.format(String)",1,2,1,2
"org.jabref.logic.layout.format.ToLowerCaseTest.provideArguments()",0,1,1,1
"org.jabref.logic.layout.format.ToLowerCaseTest.testNull()",0,1,1,1
"org.jabref.logic.layout.format.ToLowerCaseTest.toLowerCaseWithDifferentInputs(String,String)",0,1,1,1
"org.jabref.logic.layout.format.ToUpperCase.format(String)",1,2,1,2
"org.jabref.logic.layout.format.ToUpperCaseTest.toUpperCaseTests()",0,1,1,1
"org.jabref.logic.layout.format.ToUpperCaseTest.toUpperCaseTests(String,String)",0,1,1,1
"org.jabref.logic.layout.format.WrapContent.format(String)",4,4,1,4
"org.jabref.logic.layout.format.WrapContent.setArgument(String)",1,2,1,2
"org.jabref.logic.layout.format.WrapContentTest.formatContent(String,String,String)",1,1,2,2
"org.jabref.logic.layout.format.WrapContentTest.provideContent()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinks.FormatEntry.FormatEntry(String)",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinks.FormatEntry.FormatEntry(int)",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinks.FormatEntry.getString()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinks.FormatEntry.getType()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinks.WrapFileLinks(FileLinkPreferences)",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinks.format(String)",19,2,7,15
"org.jabref.logic.layout.format.WrapFileLinks.parseFormatString(String)",18,1,8,8
"org.jabref.logic.layout.format.WrapFileLinks.replaceStrings(String)",1,1,2,2
"org.jabref.logic.layout.format.WrapFileLinks.setArgument(String)",5,1,5,5
"org.jabref.logic.layout.format.WrapFileLinksTest.setUp()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testDescription()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testDescriptionNoDescription()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testEmpty()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testEndingBracket()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testFileExtension()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testFileExtensionNoExtension()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testIterator()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testIteratorTwoItems()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testNoFormatSetNonEmptyString()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testNull()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testPath()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testPathFallBackToGeneratedDir()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testPathReturnsRelativePathIfNotFound()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testPlainTextString()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testRelativePath()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testType()",0,1,1,1
"org.jabref.logic.layout.format.WrapFileLinksTest.testTypeNoType()",0,1,1,1
"org.jabref.logic.layout.format.XMLChars.firstFormat(String)",0,1,1,1
"org.jabref.logic.layout.format.XMLChars.format(String)",4,2,3,4
"org.jabref.logic.layout.format.XMLChars.removeLatexCommands(String)",0,1,1,1
"org.jabref.logic.layout.format.XMLChars.restFormat(String)",14,1,6,10
"org.jabref.logic.logging.JabRefLogger.JabRefLogger()",0,1,1,1
"org.jabref.logic.logging.JabRefLogger.setDebug()",0,1,1,1
"org.jabref.logic.logging.JabRefLogger.setLogLevelToDebugForJabRefClasses()",0,1,1,1
"org.jabref.logic.logging.LogMessages.LogMessages()",0,1,1,1
"org.jabref.logic.logging.LogMessages.add(LogEvent)",0,1,1,1
"org.jabref.logic.logging.LogMessages.clear()",0,1,1,1
"org.jabref.logic.logging.LogMessages.getInstance()",0,1,1,1
"org.jabref.logic.logging.LogMessages.getMessages()",0,1,1,1
"org.jabref.logic.msbib.BibTeXConverter.BibTeXConverter()",0,1,1,1
"org.jabref.logic.msbib.BibTeXConverter.addAuthor(Map<Field, String>,Field,List<MsBibAuthor>)",1,2,1,2
"org.jabref.logic.msbib.BibTeXConverter.convert(MSBibEntry)",12,1,12,12
"org.jabref.logic.msbib.BibTeXConverter.parseSingleStandardNumber(String,Field,String,Map<Field, String>)",1,1,2,2
"org.jabref.logic.msbib.BibTeXConverter.parseStandardNumber(String,Map<Field, String>)",1,2,1,2
"org.jabref.logic.msbib.MSBibConverter.MSBibConverter()",0,1,1,1
"org.jabref.logic.msbib.MSBibConverter.convert(BibEntry)",21,1,17,19
"org.jabref.logic.msbib.MSBibConverter.getAuthors(BibEntry,String,Field)",4,1,3,5
"org.jabref.logic.msbib.MSBibDatabase.MSBibDatabase()",0,1,1,1
"org.jabref.logic.msbib.MSBibDatabase.MSBibDatabase(BibDatabase,List<BibEntry>)",2,1,2,2
"org.jabref.logic.msbib.MSBibDatabase.addEntriesForExport(List<BibEntry>)",1,1,2,2
"org.jabref.logic.msbib.MSBibDatabase.getDomForExport()",2,1,3,3
"org.jabref.logic.msbib.MSBibDatabase.importEntriesFromXml(BufferedReader)",4,2,4,5
"org.jabref.logic.msbib.MSBibEntry.MSBibEntry()",0,1,1,1
"org.jabref.logic.msbib.MSBibEntry.MSBibEntry(Element)",0,1,1,1
"org.jabref.logic.msbib.MSBibEntry.addAddress(Document,Element,String)",4,2,4,5
"org.jabref.logic.msbib.MSBibEntry.addAuthor(Document,Element,String,List<MsBibAuthor>)",5,2,3,4
"org.jabref.logic.msbib.MSBibEntry.addDateAcessedFields(Document,Element)",0,1,1,1
"org.jabref.logic.msbib.MSBibEntry.addField(Document,Element,String,String)",1,2,1,2
"org.jabref.logic.msbib.MSBibEntry.getAuthors(Element)",0,1,1,1
"org.jabref.logic.msbib.MSBibEntry.getCiteKey()",0,1,1,1
"org.jabref.logic.msbib.MSBibEntry.getEntryDom(Document)",2,1,3,3
"org.jabref.logic.msbib.MSBibEntry.getSpecificAuthors(String,Element)",12,4,6,9
"org.jabref.logic.msbib.MSBibEntry.getType()",0,1,1,1
"org.jabref.logic.msbib.MSBibEntry.getXmlElementTextContent(String,Element)",1,1,2,2
"org.jabref.logic.msbib.MSBibEntry.populateFromXml(Element)",18,1,13,16
"org.jabref.logic.msbib.MSBibMapping.MSBibMapping()",0,1,1,1
"org.jabref.logic.msbib.MSBibMapping.getBibTeXField(String)",0,1,1,1
"org.jabref.logic.msbib.MSBibMapping.getBiblatexEntryType(String)",0,1,1,1
"org.jabref.logic.msbib.MSBibMapping.getLCID(String)",0,1,1,1
"org.jabref.logic.msbib.MSBibMapping.getLanguage(int)",0,1,1,1
"org.jabref.logic.msbib.MSBibMapping.getMSBibEntryType(EntryType)",0,1,1,1
"org.jabref.logic.msbib.MSBibMapping.getMSBibField(Field)",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthor.MsBibAuthor(Author)",2,1,2,2
"org.jabref.logic.msbib.MsBibAuthor.MsBibAuthor(Author,boolean)",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthor.getFirstLast()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthor.getFirstName()",1,2,1,2
"org.jabref.logic.msbib.MsBibAuthor.getLastFirst()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthor.getLastName()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthor.getMiddleName()",1,2,1,2
"org.jabref.logic.msbib.MsBibAuthor.isCorporate()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthorTest.testGetFirstName()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthorTest.testGetLastName()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthorTest.testGetMiddleName()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthorTest.testGetNoFirstName()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthorTest.testGetNoMiddleName()",0,1,1,1
"org.jabref.logic.msbib.MsBibAuthorTest.testGetVonAndLastName()",0,1,1,1
"org.jabref.logic.msbib.PageNumbers.PageNumbers(String)",0,1,1,1
"org.jabref.logic.msbib.PageNumbers.getDOMrepresentation(Document)",2,1,2,2
"org.jabref.logic.msbib.PageNumbers.parsePageNums(String)",2,1,2,2
"org.jabref.logic.msbib.PageNumbers.toString()",0,1,1,1
"org.jabref.logic.msbib.PageNumbers.toString(String)",1,2,1,2
"org.jabref.logic.net.ProgressInputStream.ProgressInputStream(InputStream,long)",1,1,1,2
"org.jabref.logic.net.ProgressInputStream.getMaxNumBytes()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.getProgress()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.getTotalNumBytesRead()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.mark(int)",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.markSupported()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.progressProperty()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.read()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.read(byte[],int,int)",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.reset()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.skip(long)",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.totalNumBytesReadProperty()",0,1,1,1
"org.jabref.logic.net.ProgressInputStream.updateProgress(long)",1,1,2,2
"org.jabref.logic.net.ProxyAuthenticator.getPasswordAuthentication()",4,3,4,4
"org.jabref.logic.net.ProxyPreferences.ProxyPreferences(Boolean,String,String,Boolean,String,String)",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.equals(Object)",4,3,7,9
"org.jabref.logic.net.ProxyPreferences.getHostname()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.getPassword()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.getPort()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.getUsername()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.hashCode()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.hostnameProperty()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.passwordProperty()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.portProperty()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.setHostname(String)",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.setPassword(String)",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.setPort(String)",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.setUseAuthentication(boolean)",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.setUseProxy(boolean)",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.setUsername(String)",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.shouldUseAuthentication()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.shouldUseProxy()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.useAuthenticationProperty()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.useProxyProperty()",0,1,1,1
"org.jabref.logic.net.ProxyPreferences.usernameProperty()",0,1,1,1
"org.jabref.logic.net.ProxyRegisterer.ProxyRegisterer()",0,1,1,1
"org.jabref.logic.net.ProxyRegisterer.register(ProxyPreferences)",4,1,3,3
"org.jabref.logic.net.URLDownload.URLDownload(String)",0,1,1,1
"org.jabref.logic.net.URLDownload.URLDownload(URL)",0,1,1,1
"org.jabref.logic.net.URLDownload.addHeader(String,String)",0,1,1,1
"org.jabref.logic.net.URLDownload.asInputStream()",2,2,3,3
"org.jabref.logic.net.URLDownload.asString()",0,1,1,1
"org.jabref.logic.net.URLDownload.asString(Charset)",0,1,1,1
"org.jabref.logic.net.URLDownload.bypassSSLVerification()",1,1,2,2
"org.jabref.logic.net.URLDownload.canBeReached()",1,1,1,2
"org.jabref.logic.net.URLDownload.copy(InputStream,Writer,Charset)",1,1,2,2
"org.jabref.logic.net.URLDownload.getConnectTimeout()",0,1,1,1
"org.jabref.logic.net.URLDownload.getCookieFromUrl()",1,1,2,2
"org.jabref.logic.net.URLDownload.getMimeType()",9,4,7,10
"org.jabref.logic.net.URLDownload.getSource()",0,1,1,1
"org.jabref.logic.net.URLDownload.isMimeType(String)",1,2,1,2
"org.jabref.logic.net.URLDownload.isPdf()",0,1,1,1
"org.jabref.logic.net.URLDownload.openConnection()",9,1,6,8
"org.jabref.logic.net.URLDownload.setConnectTimeout(Duration)",1,1,1,2
"org.jabref.logic.net.URLDownload.setPostData(String)",1,1,1,2
"org.jabref.logic.net.URLDownload.setSSLVerification(SSLSocketFactory,HostnameVerifier)",1,1,2,2
"org.jabref.logic.net.URLDownload.toFile(Path)",1,1,2,2
"org.jabref.logic.net.URLDownload.toString()",0,1,1,1
"org.jabref.logic.net.URLDownload.toTemporaryFile()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.connectTimeoutIsNeverNull()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.downloadOfFTPSucceeds()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.downloadOfHttpSucceeds()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.downloadOfHttpsSucceeds()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.downloadToTemporaryFileKeepsName()",1,1,2,2
"org.jabref.logic.net.URLDownloadTest.downloadToTemporaryFilePathWithoutFileSavesAsTmpFile()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.testCheckConnectionFail()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.testCheckConnectionSuccess()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.testDetermineMimeType()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.testFileDownload()",1,1,2,2
"org.jabref.logic.net.URLDownloadTest.testStringDownload()",0,1,1,1
"org.jabref.logic.net.URLDownloadTest.testStringDownloadWithSetEncoding()",0,1,1,1
"org.jabref.logic.net.URLUtilTest.cleanGoogleSearchURL()",0,1,1,1
"org.jabref.logic.net.URLUtilTest.isURLshouldAcceptValidURL()",0,1,1,1
"org.jabref.logic.net.URLUtilTest.isURLshouldRejectInvalidURL()",0,1,1,1
"org.jabref.logic.openoffice.OOUtil.OOUtil()",0,1,1,1
"org.jabref.logic.openoffice.OOUtil.getProperty(Object,String)",0,1,1,1
"org.jabref.logic.openoffice.OOUtil.insertFullReferenceAtCurrentLocation(XText,XTextCursor,Layout,String,BibEntry,BibDatabase,String)",4,1,3,3
"org.jabref.logic.openoffice.OOUtil.insertOOFormattedTextAtCurrentLocation(XText,XTextCursor,String,String)",24,1,22,23
"org.jabref.logic.openoffice.OOUtil.insertParagraphBreak(XText,XTextCursor)",0,1,1,1
"org.jabref.logic.openoffice.OOUtil.insertTextAtCurrentLocation(XText,XTextCursor,String,List<Formatting>)",13,1,8,8
"org.jabref.logic.openoffice.OOUtil.insertTextAtCurrentLocation(XText,XTextCursor,String,String)",1,1,1,2
"org.jabref.logic.openoffice.OpenOfficeFileSearch.detectInstallations()",3,4,4,4
"org.jabref.logic.openoffice.OpenOfficeFileSearch.findLinuxOpenOfficeDirs()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficeFileSearch.findOSXOpenOfficeDirs()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficeFileSearch.findOpenOfficeDirectories(List<Path>)",4,1,4,4
"org.jabref.logic.openoffice.OpenOfficeFileSearch.findWindowsOpenOfficeDirs()",2,1,3,3
"org.jabref.logic.openoffice.OpenOfficePreferences.OpenOfficePreferences(String,String,boolean,boolean,List<String>,String)",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.clearConnectionSettings()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.clearCurrentStyle()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.getCurrentStyle()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.getExecutablePath()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.getExternalStyles()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.getInstallationPath()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.getSyncWhenCiting()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.getUseAllDatabases()",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.setCurrentStyle(String)",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.setExecutablePath(String)",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.setExternalStyles(List<String>)",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.setSyncWhenCiting(boolean)",0,1,1,1
"org.jabref.logic.openoffice.OpenOfficePreferences.setUseAllDatabases(Boolean)",0,1,1,1
"org.jabref.logic.openoffice.UndefinedBibtexEntry.UndefinedBibtexEntry(String)",0,1,1,1
"org.jabref.logic.openoffice.UndefinedBibtexEntry.getKey()",0,1,1,1
"org.jabref.logic.openoffice.UndefinedParagraphFormatException.UndefinedParagraphFormatException(String)",0,1,1,1
"org.jabref.logic.openoffice.UndefinedParagraphFormatException.getFormatName()",0,1,1,1
"org.jabref.logic.openoffice.action.EditInsert.EditInsert()",0,1,1,1
"org.jabref.logic.openoffice.action.EditInsert.insertCitationGroup(XTextDocument,OOFrontend,XTextCursor,List<BibEntry>,BibDatabase,OOBibStyle,CitationType,String)",4,1,4,4
"org.jabref.logic.openoffice.action.EditInsert.insertEntryGetCitationKey(BibEntry)",1,2,1,2
"org.jabref.logic.openoffice.action.EditMerge.EditMerge()",0,1,1,1
"org.jabref.logic.openoffice.action.EditMerge.JoinableGroupData.JoinableGroupData(List<CitationGroup>,XTextCursor)",0,1,1,1
"org.jabref.logic.openoffice.action.EditMerge.ScanState.ScanState()",0,1,1,1
"org.jabref.logic.openoffice.action.EditMerge.ScanState.reset()",0,1,1,1
"org.jabref.logic.openoffice.action.EditMerge.addToCurrentGroup(ScanState,CitationGroup,XTextRange)",3,2,4,4
"org.jabref.logic.openoffice.action.EditMerge.checkAddToGroup(ScanState,CitationGroup,XTextRange)",24,12,11,17
"org.jabref.logic.openoffice.action.EditMerge.mergeCitationGroups(XTextDocument,OOFrontend,OOBibStyle)",1,1,2,2
"org.jabref.logic.openoffice.action.EditMerge.scan(XTextDocument,OOFrontend)",11,2,6,8
"org.jabref.logic.openoffice.action.EditSeparate.EditSeparate()",0,1,1,1
"org.jabref.logic.openoffice.action.EditSeparate.separateCitations(XTextDocument,OOFrontend,List<BibDatabase>,OOBibStyle)",5,3,3,4
"org.jabref.logic.openoffice.action.ExportCited.ExportCited()",0,1,1,1
"org.jabref.logic.openoffice.action.ExportCited.GenerateDatabaseResult.GenerateDatabaseResult(List<String>,BibDatabase)",0,1,1,1
"org.jabref.logic.openoffice.action.ExportCited.generateDatabase(XTextDocument,List<BibDatabase>)",8,3,4,4
"org.jabref.logic.openoffice.action.ManageCitations.ManageCitations()",0,1,1,1
"org.jabref.logic.openoffice.action.ManageCitations.applyCitationEntries(XTextDocument,List<CitationEntry>)",0,1,1,1
"org.jabref.logic.openoffice.action.ManageCitations.getCitationEntries(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.action.Update.SyncOptions.SyncOptions(List<BibDatabase>)",0,1,1,1
"org.jabref.logic.openoffice.action.Update.SyncOptions.setAlwaysAddCitedOnPages(boolean)",0,1,1,1
"org.jabref.logic.openoffice.action.Update.SyncOptions.setUpdateBibliography(boolean)",0,1,1,1
"org.jabref.logic.openoffice.action.Update.Update()",0,1,1,1
"org.jabref.logic.openoffice.action.Update.resyncDocument(XTextDocument,OOBibStyle,FunctionalTextViewCursor,SyncOptions)",0,1,1,1
"org.jabref.logic.openoffice.action.Update.synchronizeDocument(XTextDocument,OOFrontend,OOBibStyle,FunctionalTextViewCursor,SyncOptions)",0,1,1,1
"org.jabref.logic.openoffice.action.Update.updateDocument(XTextDocument,OOFrontend,List<BibDatabase>,OOBibStyle,FunctionalTextViewCursor,boolean,boolean)",4,1,5,5
"org.jabref.logic.openoffice.backend.Backend52.Backend52()",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.applyCitationEntries(XTextDocument,List<CitationEntry>)",6,2,3,5
"org.jabref.logic.openoffice.backend.Backend52.cleanFillCursorForCitationGroup(CitationGroup,XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.combinePageInfos(List<CitationGroup>)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.combinePageInfosCommon(OODataModel,List<CitationGroup>)",3,2,2,4
"org.jabref.logic.openoffice.backend.Backend52.createCitationGroup(XTextDocument,List<String>,List<Optional<OOText>>,CitationType,XTextCursor,boolean)",16,4,5,10
"org.jabref.logic.openoffice.backend.Backend52.findUnusedJabrefPropertyNames(XTextDocument,List<String>)",3,1,3,3
"org.jabref.logic.openoffice.backend.Backend52.getCitationEntries(XTextDocument,CitationGroups)",6,2,3,5
"org.jabref.logic.openoffice.backend.Backend52.getFillCursorForCitationGroup(CitationGroup,XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.getJabRefReferenceMarkNames(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.getMarkRange(CitationGroup,XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.getNamedRangeOrThrow(CitationGroup)",1,2,1,2
"org.jabref.logic.openoffice.backend.Backend52.getPageInfoFromData(CitationGroup)",1,2,2,2
"org.jabref.logic.openoffice.backend.Backend52.getRawCursorForCitationGroup(CitationGroup,XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.healthReport(XTextDocument)",1,2,2,2
"org.jabref.logic.openoffice.backend.Backend52.readCitationGroupFromDocumentOrThrow(XTextDocument,String)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.removeCitationGroup(CitationGroup,XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.Backend52.setPageInfoInDataInitial(List<Citation>,Optional<OOText>)",1,1,2,2
"org.jabref.logic.openoffice.backend.Codec52.Codec52()",0,1,1,1
"org.jabref.logic.openoffice.backend.Codec52.ParsedMarkName.ParsedMarkName(String,CitationType,List<String>)",0,1,1,1
"org.jabref.logic.openoffice.backend.Codec52.citationTypeFromInt(int)",1,1,1,4
"org.jabref.logic.openoffice.backend.Codec52.citationTypeToInt(CitationType)",1,1,1,4
"org.jabref.logic.openoffice.backend.Codec52.filterIsJabRefReferenceMarkName(List<String>)",0,1,1,1
"org.jabref.logic.openoffice.backend.Codec52.getUniqueMarkName(Set<String>,List<String>,CitationType)",1,1,1,2
"org.jabref.logic.openoffice.backend.Codec52.isJabRefReferenceMarkName(String)",0,1,1,1
"org.jabref.logic.openoffice.backend.Codec52.parseMarkName(String)",1,2,2,2
"org.jabref.logic.openoffice.backend.GetContext.GetContext()",0,1,1,1
"org.jabref.logic.openoffice.backend.GetContext.getCursorStringWithContext(XTextCursor,int,int,boolean)",15,6,8,10
"org.jabref.logic.openoffice.backend.NamedRangeManagerReferenceMark.createNamedRange(XTextDocument,String,XTextCursor,boolean,boolean)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeManagerReferenceMark.getNamedRangeFromDocument(XTextDocument,String)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeManagerReferenceMark.getUsedNames(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.NamedRangeReferenceMark(String)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.checkFillCursor(XTextCursor)",6,5,5,5
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.cleanFillCursor(XTextDocument)",9,4,6,12
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.create(XTextDocument,String,XTextCursor,boolean,boolean)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.createReprInDocument(XTextDocument,String,XTextCursor,boolean,boolean)",2,1,2,3
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.getFillCursor(XTextDocument)",19,9,9,12
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.getFromDocument(XTextDocument,String)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.getId()",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.getMarkRange(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.getRangeName()",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.getRawCursor(XTextDocument)",2,2,3,3
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.removeFromDocument(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark.safeInsertSpacesBetweenReferenceMarks(XTextRange,int)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.OOFrontend(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.applyCitationEntries(XTextDocument,List<CitationEntry>)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.bibliographyRanges(XTextDocument)",1,1,2,2
"org.jabref.logic.openoffice.frontend.OOFrontend.checkRangeOverlaps(XTextDocument,List<RangeForOverlapCheck<CitationGroupId>>,boolean,int)",1,2,2,2
"org.jabref.logic.openoffice.frontend.OOFrontend.checkRangeOverlapsWithCursor(XTextDocument,List<RangeForOverlapCheck<CitationGroupId>>,boolean)",1,2,2,2
"org.jabref.logic.openoffice.frontend.OOFrontend.citationRanges(XTextDocument)",1,1,2,2
"org.jabref.logic.openoffice.frontend.OOFrontend.cleanFillCursorForCitationGroup(XTextDocument,CitationGroup)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.createCitationGroup(XTextDocument,List<String>,List<Optional<OOText>>,CitationType,XTextCursor,boolean)",1,2,1,2
"org.jabref.logic.openoffice.frontend.OOFrontend.createVisualSortInput(XTextDocument,boolean)",11,1,6,6
"org.jabref.logic.openoffice.frontend.OOFrontend.footnoteMarkRanges(XTextDocument,List<RangeForOverlapCheck<CitationGroupId>>)",5,4,2,4
"org.jabref.logic.openoffice.frontend.OOFrontend.getCitationEntries(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.getCitationGroupsSortedWithinPartitions(XTextDocument,boolean)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.getDataModel()",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.getFillCursorForCitationGroup(XTextDocument,CitationGroup)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.getMarkRange(XTextDocument,CitationGroup)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.getVisuallySortedCitationGroups(XTextDocument,boolean,FunctionalTextViewCursor)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.healthReport(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.imposeGlobalOrder(XTextDocument,FunctionalTextViewCursor)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.rangeOverlapsToMessage(List<RangeOverlap<RangeForOverlapCheck<CitationGroupId>>>)",4,2,5,6
"org.jabref.logic.openoffice.frontend.OOFrontend.readCitationGroupsFromDocument(Backend52,XTextDocument,List<String>)",1,1,2,2
"org.jabref.logic.openoffice.frontend.OOFrontend.removeCitationGroup(CitationGroup,XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.frontend.OOFrontend.removeCitationGroups(List<CitationGroup>,XTextDocument)",1,1,2,2
"org.jabref.logic.openoffice.frontend.OOFrontend.viewCursorRanges(XTextDocument)",1,1,2,2
"org.jabref.logic.openoffice.frontend.RangeForOverlapCheck.RangeForOverlapCheck(XTextRange,T,int,String)",0,1,1,1
"org.jabref.logic.openoffice.frontend.RangeForOverlapCheck.format()",0,1,1,1
"org.jabref.logic.openoffice.frontend.RangeForOverlapCheck.getRange()",0,1,1,1
"org.jabref.logic.openoffice.frontend.UpdateBibliography.UpdateBibliography()",0,1,1,1
"org.jabref.logic.openoffice.frontend.UpdateBibliography.clearBibTextSectionContent2(XTextDocument)",2,2,2,2
"org.jabref.logic.openoffice.frontend.UpdateBibliography.createBibTextSection2(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.frontend.UpdateBibliography.getBibliographyRange(XTextDocument)",0,1,1,1
"org.jabref.logic.openoffice.frontend.UpdateBibliography.populateBibTextSection(XTextDocument,OOFrontend,CitedKeys,OOBibStyle,boolean)",0,1,1,1
"org.jabref.logic.openoffice.frontend.UpdateBibliography.rebuildBibTextSection(XTextDocument,OOFrontend,CitedKeys,OOBibStyle,boolean)",0,1,1,1
"org.jabref.logic.openoffice.frontend.UpdateCitationMarkers.UpdateCitationMarkers()",0,1,1,1
"org.jabref.logic.openoffice.frontend.UpdateCitationMarkers.applyNewCitationMarkers(XTextDocument,OOFrontend,OOBibStyle)",6,3,5,5
"org.jabref.logic.openoffice.frontend.UpdateCitationMarkers.createAndFillCitationGroup(OOFrontend,XTextDocument,List<String>,List<Optional<OOText>>,CitationType,OOText,XTextCursor,OOBibStyle,boolean)",2,2,2,3
"org.jabref.logic.openoffice.frontend.UpdateCitationMarkers.fillCitationMarkInCursor(XTextDocument,XTextCursor,OOText,boolean,OOBibStyle)",2,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.OOBibStyle(File,LayoutFormatterPreferences,Charset)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.OOBibStyle(String,LayoutFormatterPreferences)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.addJournal(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.compareTo(OOBibStyle)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.createAuthorList(String,int,String,String)",9,1,8,8
"org.jabref.logic.openoffice.style.OOBibStyle.createCitationMarker(List<CitationMarkerEntry>,boolean,NonUniqueCitationMarker)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.decorateCitationMarker(OOText)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.ensureUpToDate()",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.equals(Object)",3,3,5,6
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorFieldNames()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorLastName(AuthorList,int)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorLastSeparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorLastSeparatorInTextWithFallBack()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorNameMarkupAfter()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorNameMarkupBefore()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorNamesListMarkupAfter()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorNamesListMarkupBefore()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorSeparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorYearInTextMarker(List<BibEntry>,Map<BibEntry, BibDatabase>,String[],int[])",15,3,6,10
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorYearParenthesisMarker(List<BibEntry>,Map<BibEntry, BibDatabase>,String[],int[])",14,3,5,9
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorsPartMarkupAfter()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getAuthorsPartMarkupBefore()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBibLayout()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBooleanCitProperty(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBracketAfter()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBracketAfterInList()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBracketAfterInListWithFallBack()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBracketBefore()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBracketBeforeInList()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getBracketBeforeInListWithFallBack()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getCitProperties()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getCitationCharacterFormat()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getCitationGroupMarkupAfter()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getCitationGroupMarkupBefore()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getCitationMarker(List<BibEntry>,Map<BibEntry, BibDatabase>,boolean,String[],int[])",36,2,13,15
"org.jabref.logic.openoffice.style.OOBibStyle.getCitationMarkerField(BibEntry,BibDatabase,String)",8,4,6,6
"org.jabref.logic.openoffice.style.OOBibStyle.getCitationSeparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getDefaultBibLayout()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getEtAlString()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getFieldFormatter()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getFile()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getFormattedBibliographyTitle()",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.getGroupedNumbersSeparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getIntCitProperty(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getIsDefaultLayoutPresent()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getItalicEtAl()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getJournals()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getLocalCopy()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getMaxAuthors()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getMaxAuthorsFirst()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getMinimumGroupingCount()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getMultiCiteChronological()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getName()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getNormalizedCitationMarker(CitationMarkerNormEntry)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getNumCitationMarker(List<Integer>,int,boolean)",46,1,18,19
"org.jabref.logic.openoffice.style.OOBibStyle.getNumCitationMarker2(List<CitationMarkerNumericEntry>)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getNumCitationMarker2(List<CitationMarkerNumericEntry>,int)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getNumCitationMarkerForBibliography(CitationMarkerNumericBibEntry)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getOxfordComma()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getPageInfoSeparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getPath()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getPrefs()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getProperties()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getProperty(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getReferenceFormat(EntryType)",2,2,1,2
"org.jabref.logic.openoffice.style.OOBibStyle.getReferenceHeaderParagraphFormat()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getReferenceHeaderText()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getReferenceParagraphFormat()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getStringCitProperty(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getStringProperty(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getUniquefierSeparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getYearFieldNames()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getYearSeparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.getYearSeparatorInText()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.group(List<BibEntry>,String[],int,int)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.handleJournalsLine(String)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.handlePropertiesLine(String,Map<String, Object>)",9,1,7,8
"org.jabref.logic.openoffice.style.OOBibStyle.handleStructureLine(String)",8,1,6,6
"org.jabref.logic.openoffice.style.OOBibStyle.hashCode()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.initialize(InputStream)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.insertPageInfo(String,String)",2,2,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.isBoldCitations()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.isCitationKeyCiteMarkers()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.isFormatCitations()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.isInternalStyle()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.isItalicCitations()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.isNumberEntries()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.isSortByPosition()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.isUpToDate()",2,2,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.isValid()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.readFormatFile(Reader)",17,3,7,20
"org.jabref.logic.openoffice.style.OOBibStyle.reload()",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyle.setDefaultBibLayout(Layout)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.setDefaultProperties()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.setIsDefaultLayoutPresent(boolean)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.setLocalCopy(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.setName(String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyle.setValid(boolean)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.CitationMarkerNormEntryWrap.CitationMarkerNormEntryWrap(CitationMarkerNormEntry)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.CitationMarkerNormEntryWrap.getCitationKey()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.CitationMarkerNormEntryWrap.getIsFirstAppearanceOfSource()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.CitationMarkerNormEntryWrap.getLookupResult()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.CitationMarkerNormEntryWrap.getPageInfo()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.CitationMarkerNormEntryWrap.getUniqueLetter()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.FieldAndContent.FieldAndContent(Field,String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.OOBibStyleGetCitationMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.calculateNAuthorsToEmit(OOBibStyle,CitationMarkerEntry)",4,3,3,4
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.createCitationMarker(OOBibStyle,List<CitationMarkerEntry>,boolean,NonUniqueCitationMarker)",41,4,12,28
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.formatAuthorList(OOBibStyle,AuthorList,int,String)",27,3,11,17
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.getAuthorLastName(AuthorList,int)",4,1,4,4
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.getAuthorList(OOBibStyle,CitationLookupResult)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.getAuthorYearParenthesisMarker2(OOBibStyle,AuthorYearMarkerPurpose,List<CitationMarkerEntry>,boolean[],Optional<Integer>)",55,3,23,26
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.getCitationMarkerField(OOBibStyle,CitationLookupResult,OrFields)",3,2,2,4
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.getNormalizedCitationMarker(OOBibStyle,CitationMarkerNormEntry,Optional<Integer>)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.getNormalizedCitationMarkers(OOBibStyle,List<CitationMarkerEntry>,Optional<Integer>)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.getRawCitationMarkerField(BibEntry,BibDatabase,OrFields)",4,3,4,4
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.markupAuthorName(OOBibStyle,String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetNumCitationMarker.OOBibStyleGetNumCitationMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetNumCitationMarker.compareCitationMarkerNumericEntry(CitationMarkerNumericEntry,CitationMarkerNumericEntry)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleGetNumCitationMarker.emitBlock(List<CitationMarkerNumericEntry>,OOBibStyle,int,StringBuilder)",29,10,9,14
"org.jabref.logic.openoffice.style.OOBibStyleGetNumCitationMarker.getNumCitationMarker2(OOBibStyle,List<CitationMarkerNumericEntry>,int)",25,4,15,17
"org.jabref.logic.openoffice.style.OOBibStyleGetNumCitationMarker.getNumCitationMarkerForBibliography(OOBibStyle,CitationMarkerNumericBibEntry)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleTest.getCitationMarker2(OOBibStyle,List<BibEntry>,Map<BibEntry, BibDatabase>,boolean,String[],Boolean[],String[])",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.makeCitationMarkerEntry(BibEntry,BibDatabase,String,String,boolean)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.numBibEntry(String,Optional<Integer>)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.numEntry(String,int,String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.runGetNumCitationMarker2a(OOBibStyle,List<Integer>,int,boolean)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.runGetNumCitationMarker2b(OOBibStyle,int,CitationMarkerNumericEntry...)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.setUp()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testAuthorYear()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testAuthorYearAsFile()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testCompareToEqual()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testCompareToNotEqual()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testEmptyEntryMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testEmptyStringPropertyAndOxfordComma()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testEquals()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetCitProperty()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetCitationMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetCitationMarkerInParenthesisUniquefiers()",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetCitationMarkerInParenthesisUniquefiersThreeSameAuthor()",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetCitationMarkerInTextUniquefiers()",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetCitationMarkerInTextUniquefiersThreeSameAuthor()",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetCitationMarkerJoinFirst()",7,1,8,8
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetNumCitationMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testGetNumCitationMarkerUndefined()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testInstitutionAuthor()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testInstitutionAuthorMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testIsValidWithDefaultSectionAtTheStart()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testLayout()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testNotEquals()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testNullAuthorMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testNullYearMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testNumerical()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testVonAuthor()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTest.testVonAuthorMarker()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericBibEntryImpl.CitationMarkerNumericBibEntryImpl(String,Optional<Integer>)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericBibEntryImpl.getCitationKey()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericBibEntryImpl.getNumber()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericEntryImpl.CitationMarkerNumericEntryImpl(String,int,Optional<OOText>)",1,1,2,2
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericEntryImpl.getCitationKey()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericEntryImpl.getNumber()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericEntryImpl.getPageInfo()",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.getCitationMarker2(OOBibStyle,List<BibEntry>,Map<BibEntry, BibDatabase>,boolean,String[],Boolean[],String[])",4,1,5,5
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.makeCitationMarkerEntry(BibEntry,BibDatabase,String,String,boolean)",1,2,1,2
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.numBibEntry(String,Optional<Integer>)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.numEntry(String,int,String)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.runGetNumCitationMarker2a(OOBibStyle,List<Integer>,int,boolean)",6,3,4,4
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.runGetNumCitationMarker2b(OOBibStyle,int,CitationMarkerNumericEntry...)",0,1,1,1
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.testGetNumCitationMarkerExtra(OOBibStyle)",0,1,1,1
"org.jabref.logic.openoffice.style.OOFormatBibliography.OOFormatBibliography()",0,1,1,1
"org.jabref.logic.openoffice.style.OOFormatBibliography.formatBibliography(CitationGroups,CitedKeys,OOBibStyle,boolean)",0,1,1,1
"org.jabref.logic.openoffice.style.OOFormatBibliography.formatBibliographyBody(CitationGroups,CitedKeys,OOBibStyle,boolean)",1,1,2,2
"org.jabref.logic.openoffice.style.OOFormatBibliography.formatBibliographyEntry(CitationGroups,CitedKey,OOBibStyle,boolean)",4,1,4,4
"org.jabref.logic.openoffice.style.OOFormatBibliography.formatBibliographyEntryBody(CitedKey,OOBibStyle)",2,2,2,2
"org.jabref.logic.openoffice.style.OOFormatBibliography.formatCitedOnPages(CitationGroups,CitedKey)",7,4,5,6
"org.jabref.logic.openoffice.style.OOFormatBibliography.formatFullReferenceOfBibEntry(Layout,BibEntry,BibDatabase,String)",4,1,3,3
"org.jabref.logic.openoffice.style.OOPreFormatter.format(String)",60,3,22,27
"org.jabref.logic.openoffice.style.OOPreFormatter.getHTMLTag(String)",1,1,1,9
"org.jabref.logic.openoffice.style.OOPreFormatterTest.testEquations()",0,1,1,1
"org.jabref.logic.openoffice.style.OOPreFormatterTest.testFormatAccents()",0,1,1,1
"org.jabref.logic.openoffice.style.OOPreFormatterTest.testFormatStripLatexCommands()",0,1,1,1
"org.jabref.logic.openoffice.style.OOPreFormatterTest.testFormatting()",0,1,1,1
"org.jabref.logic.openoffice.style.OOPreFormatterTest.testPlainFormat()",0,1,1,1
"org.jabref.logic.openoffice.style.OOPreFormatterTest.testSpecialCommands()",0,1,1,1
"org.jabref.logic.openoffice.style.OOPreFormatterTest.testUnsupportedSpecialCommands()",0,1,1,1
"org.jabref.logic.openoffice.style.OOProcess.OOProcess()",0,1,1,1
"org.jabref.logic.openoffice.style.OOProcess.comparatorForMulticite(OOBibStyle)",2,2,1,2
"org.jabref.logic.openoffice.style.OOProcess.makeAuthorYearTitleComparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOProcess.makeYearAuthorTitleComparator()",0,1,1,1
"org.jabref.logic.openoffice.style.OOProcess.produceCitationMarkers(CitationGroups,List<BibDatabase>,OOBibStyle)",4,2,3,4
"org.jabref.logic.openoffice.style.OOProcessAuthorYearMarkers.OOProcessAuthorYearMarkers()",0,1,1,1
"org.jabref.logic.openoffice.style.OOProcessAuthorYearMarkers.createNormalizedCitationMarkers(CitedKeys,OOBibStyle)",1,1,2,2
"org.jabref.logic.openoffice.style.OOProcessAuthorYearMarkers.createUniqueLetters(CitedKeys,CitationGroups)",11,3,7,8
"org.jabref.logic.openoffice.style.OOProcessAuthorYearMarkers.produceCitationMarkers(CitationGroups,OOBibStyle)",1,1,2,2
"org.jabref.logic.openoffice.style.OOProcessAuthorYearMarkers.setIsFirstAppearanceOfSourceInCitations(CitationGroups)",7,1,4,4
"org.jabref.logic.openoffice.style.OOProcessCitationKeyMarkers.OOProcessCitationKeyMarkers()",0,1,1,1
"org.jabref.logic.openoffice.style.OOProcessCitationKeyMarkers.produceCitationMarkers(CitationGroups,OOBibStyle)",1,1,2,2
"org.jabref.logic.openoffice.style.OOProcessNumericMarkers.OOProcessNumericMarkers()",0,1,1,1
"org.jabref.logic.openoffice.style.OOProcessNumericMarkers.produceCitationMarkers(CitationGroups,OOBibStyle)",3,1,3,3
"org.jabref.logic.openoffice.style.StyleLoader.StyleLoader(OpenOfficePreferences,LayoutFormatterPreferences,Charset)",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoader.addStyleIfValid(String)",5,3,5,5
"org.jabref.logic.openoffice.style.StyleLoader.getStyles()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoader.getUsedStyle()",6,4,3,4
"org.jabref.logic.openoffice.style.StyleLoader.loadExternalStyles()",8,1,5,5
"org.jabref.logic.openoffice.style.StyleLoader.loadInternalStyles()",3,1,3,3
"org.jabref.logic.openoffice.style.StyleLoader.removeStyle(OOBibStyle)",1,2,2,2
"org.jabref.logic.openoffice.style.StyleLoader.storeExternalStyles()",1,1,2,2
"org.jabref.logic.openoffice.style.StyleLoaderTest.setUp()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testAddInvalidStyleLeadsToNoMoreStyle()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testAddNullStyleThrowsNPE()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testAddSameStyleTwiceLeadsToOneMoreStyle()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testAddStyleLeadsToOneMoreStyle()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testGetDefaultUsedStyleWhenEmpty()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testGetDefaultUsedStyleWhenIncorrect()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testGetStoredUsedStyle()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testGetStylesWithEmptyExternal()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testInitalizeWithIncorrectExternalFile()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testInitalizeWithOneExternalFile()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.testInitalizeWithOneExternalFileRemoveStyle()",4,1,4,4
"org.jabref.logic.openoffice.style.StyleLoaderTest.testInitalizeWithOneExternalFileRemoveStyleUpdatesPreferences()",4,1,4,4
"org.jabref.logic.openoffice.style.StyleLoaderTest.testRemoveInternalStyleReturnsFalseAndDoNotRemove()",3,1,3,3
"org.jabref.logic.openoffice.style.StyleLoaderTest.throwNPEWithNullCharset()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.throwNPEWithNullLayoutPreferences()",0,1,1,1
"org.jabref.logic.openoffice.style.StyleLoaderTest.throwNPEWithNullPreferences()",0,1,1,1
"org.jabref.logic.pdf.EntryAnnotationImporter.EntryAnnotationImporter(BibEntry)",0,1,1,1
"org.jabref.logic.pdf.EntryAnnotationImporter.getFilteredFileList()",0,1,1,1
"org.jabref.logic.pdf.EntryAnnotationImporter.importAnnotationsFromFiles(BibDatabaseContext,FilePreferences)",1,1,2,2
"org.jabref.logic.pdf.EntryAnnotationImporterTest.readEntryExampleThesis()",1,1,2,2
"org.jabref.logic.pdf.EntryAnnotationImporterTest.setUp()",0,1,1,1
"org.jabref.logic.pdf.FileAnnotationCache.FileAnnotationCache()",0,1,1,1
"org.jabref.logic.pdf.FileAnnotationCache.FileAnnotationCache(BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.logic.pdf.FileAnnotationCache.getFromCache(BibEntry)",0,1,1,1
"org.jabref.logic.pdf.FileAnnotationCache.remove(BibEntry)",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporter.createMarkedAnnotations(int,PDPage,PDAnnotation)",3,1,3,3
"org.jabref.logic.pdf.PdfAnnotationImporter.importAnnotations(Path)",17,5,8,9
"org.jabref.logic.pdf.PdfAnnotationImporter.isSupportedAnnotationType(PDAnnotation)",5,4,4,6
"org.jabref.logic.pdf.PdfAnnotationImporter.validatePath(Path)",4,4,5,5
"org.jabref.logic.pdf.PdfAnnotationImporterTest.highlightMinimalFoxit()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.highlightNoNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.highlightWithNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.inlineNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.invalidDirectory()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.invalidDocumentType()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.invalidPath()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.noAnnotationsEncrypted()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.noAnnotationsMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.noAnnotationsWriteProtected()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.polygonNoNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.popupNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.squigglyWithNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.strikeoutWithNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.twoAnnotationsThesisExample()",0,1,1,1
"org.jabref.logic.pdf.PdfAnnotationImporterTest.underlineWithNoteMinimal()",0,1,1,1
"org.jabref.logic.pdf.TextExtractor.TextExtractor(PDPage,COSArray)",0,1,1,1
"org.jabref.logic.pdf.TextExtractor.calculateSegmentBoundingBox(COSArray,int)",0,1,1,1
"org.jabref.logic.pdf.TextExtractor.extractMarkedText()",3,2,2,3
"org.jabref.logic.pdf.TextExtractor.toFloat(Object)",2,3,3,3
"org.jabref.logic.pdf.search.indexing.DocumentReader.DocumentReader(BibEntry,FilePreferences)",1,2,1,2
"org.jabref.logic.pdf.search.indexing.DocumentReader.addContentIfNotEmpty(PDDocument,Document,int)",3,1,4,4
"org.jabref.logic.pdf.search.indexing.DocumentReader.addIdentifiers(Document,String)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.DocumentReader.addMetaData(Document,Path,int)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.DocumentReader.addStringField(Document,String,String)",1,2,1,2
"org.jabref.logic.pdf.search.indexing.DocumentReader.isValidField(String)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.DocumentReader.mergeLines(String)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.DocumentReader.readLinkedPdf(BibDatabaseContext,LinkedFile)",3,2,3,3
"org.jabref.logic.pdf.search.indexing.DocumentReader.readLinkedPdfs(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.DocumentReader.readPdfContents(LinkedFile,Path)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.DocumentReaderTest.getLinesToMerge()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.DocumentReaderTest.mergeLinesTest(String,String)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.DocumentReaderTest.setup()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.DocumentReaderTest.unknownFileTestShouldReturnEmptyList()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.IndexingTaskManager(TaskExecutor)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.addToIndex(PdfIndexer,BibDatabaseContext)",3,1,3,3
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.addToIndex(PdfIndexer,BibEntry,BibDatabaseContext)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.addToIndex(PdfIndexer,BibEntry,List<LinkedFile>,BibDatabaseContext)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.call()",2,1,3,3
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.createIndex(PdfIndexer)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.enqueueTask(Runnable)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.removeFromIndex(PdfIndexer,BibEntry)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.removeFromIndex(PdfIndexer,BibEntry,List<LinkedFile>)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.updateDatabaseName(String)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager.updateProgress()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexer.PdfIndexer(Directory,FilePreferences)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexer.addToIndex(BibDatabaseContext)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.PdfIndexer.addToIndex(BibEntry,BibDatabaseContext)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexer.addToIndex(BibEntry,LinkedFile,BibDatabaseContext)",2,1,2,3
"org.jabref.logic.pdf.search.indexing.PdfIndexer.addToIndex(BibEntry,List<LinkedFile>,BibDatabaseContext)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.PdfIndexer.createIndex()",1,1,2,2
"org.jabref.logic.pdf.search.indexing.PdfIndexer.flushIndex()",1,1,2,2
"org.jabref.logic.pdf.search.indexing.PdfIndexer.of(BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexer.removeFromIndex(BibEntry)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexer.removeFromIndex(BibEntry,LinkedFile)",2,1,3,3
"org.jabref.logic.pdf.search.indexing.PdfIndexer.removeFromIndex(BibEntry,List<LinkedFile>)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.PdfIndexer.writeToIndex(BibEntry)",1,1,2,2
"org.jabref.logic.pdf.search.indexing.PdfIndexer.writeToIndex(BibEntry,LinkedFile)",9,5,6,9
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.dontIndexNonPdf()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.dontIndexOnlineLinks()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.exampleThesisIndex()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.exampleThesisIndexAppendMetaData()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.exampleThesisIndexWithKey()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.metaDataIndex()",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.setUp(Path)",0,1,1,1
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest.testFlushIndex()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcher.PdfSearcher(Directory)",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcher.of(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcher.search(String,int)",4,3,3,5
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchForAnnotation()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchForEmptyString()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchForSecond()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchForStopWord()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchForTest()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchForUniversity()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchForZeroResults()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.searchWithNullString()",0,1,1,1
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest.setUp(Path)",0,1,1,1
"org.jabref.logic.preferences.DOIPreferences.DOIPreferences(boolean,String)",0,1,1,1
"org.jabref.logic.preferences.DOIPreferences.defaultBaseURIProperty()",0,1,1,1
"org.jabref.logic.preferences.DOIPreferences.getDefaultBaseURI()",0,1,1,1
"org.jabref.logic.preferences.DOIPreferences.isUseCustom()",0,1,1,1
"org.jabref.logic.preferences.DOIPreferences.setDefaultBaseURI(String)",0,1,1,1
"org.jabref.logic.preferences.DOIPreferences.setUseCustom(boolean)",0,1,1,1
"org.jabref.logic.preferences.DOIPreferences.useCustomProperty()",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.OwnerPreferences(boolean,String,boolean)",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.defaultOwnerProperty()",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.getDefaultOwner()",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.isOverwriteOwner()",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.isUseOwner()",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.overwriteOwnerProperty()",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.setDefaultOwner(String)",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.setOverwriteOwner(boolean)",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.setUseOwner(boolean)",0,1,1,1
"org.jabref.logic.preferences.OwnerPreferences.useOwnerProperty()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.TimestampPreferences(boolean,boolean,boolean,Field,String)",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.addCreationDateProperty()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.addModificationDateProperty()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.getTimestampField()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.getTimestampFormat()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.now()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.setAddCreationDate(boolean)",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.setAddModificationDate(boolean)",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.shouldAddCreationDate()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.shouldAddModificationDate()",0,1,1,1
"org.jabref.logic.preferences.TimestampPreferences.shouldUpdateTimestamp()",0,1,1,1
"org.jabref.logic.preview.PreviewLayout.containsCaseIndependent(String)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.ProtectedTermsList(String,List<String>,String)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.ProtectedTermsList(String,List<String>,String,boolean)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.addProtectedTerm(String)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.addProtectedTerm(String,boolean)",3,2,2,4
"org.jabref.logic.protectedterms.ProtectedTermsList.compareTo(ProtectedTermsList)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.createAndWriteHeading(String)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.equals(Object)",2,2,2,3
"org.jabref.logic.protectedterms.ProtectedTermsList.getDescription()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.getLocation()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.getTermList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.getTermListing()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.hashCode()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.isEnabled()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.isInternalList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsList.setEnabled(boolean)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.setUp(Path)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testCanAddTermToExternalList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testCanNotAddTermToInternalList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testCompareTo()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testGetDescription()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testGetLocation()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testGetTermList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testGetTermListing()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testNotEnabledByDefault()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testProtectedTermsListStringListOfStringString()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testProtectedTermsListStringListOfStringStringBoolean()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testSetEnabledIsEnabled()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testTermAddedToExternalList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsListTest.testTermNotAddedToInternalList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.ProtectedTermsLoader(ProtectedTermsPreferences)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.addNewProtectedTermsList(String,String)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.addNewProtectedTermsList(String,String,boolean)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.addProtectedTermsListFromFile(String,boolean)",1,1,2,2
"org.jabref.logic.protectedterms.ProtectedTermsLoader.getInternalLists()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.getProtectedTerms()",3,1,3,3
"org.jabref.logic.protectedterms.ProtectedTermsLoader.getProtectedTermsLists()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.readProtectedTermsListFromFile(File,boolean)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.readProtectedTermsListFromResource(String,String,boolean)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.reloadProtectedTermsList(ProtectedTermsList)",3,1,3,3
"org.jabref.logic.protectedterms.ProtectedTermsLoader.removeProtectedTermsList(ProtectedTermsList)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoader.update(ProtectedTermsPreferences)",24,1,14,14
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.setUp()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testAddNewTermListAddsList(Path)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testAddNewTermListNewListInList(Path)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testAddNewTermListSetsCorrectDescription(Path)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testAddProtectedTermsListFromFile()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testAllDisabledNoWords()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testDoNotLoadTheSameInternalListTwice()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testGetProtectedTerms()",1,1,2,2
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testInitalizedAllInternalDisabled()",1,1,2,2
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testNewListsAreEnabled()",1,1,2,2
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testNewListsAreIncluded()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testReadProtectedTermsListFromFileDisabledWorks()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testReadProtectedTermsListFromFileEnabledWorks()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testReadProtectedTermsListFromFileIsNotInternalList()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testReadProtectedTermsListFromFileNoDescriptionGivesDefaultDescription()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testReadProtectedTermsListFromFileReadsDescription()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testRemoveTermList(Path)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testRemoveTermListReduceTheCount(Path)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest.testUnknownExternalFileWillNotLoad()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsParser.addLine(String)",1,2,2,2
"org.jabref.logic.protectedterms.ProtectedTermsParser.getProtectTermsList(boolean,boolean)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsParser.readTermsFromFile(File)",2,1,2,3
"org.jabref.logic.protectedterms.ProtectedTermsParser.readTermsFromFile(File,Charset)",2,1,2,3
"org.jabref.logic.protectedterms.ProtectedTermsParser.readTermsFromResource(String,String)",1,1,2,2
"org.jabref.logic.protectedterms.ProtectedTermsParser.readTermsList(Reader)",2,1,3,3
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.ProtectedTermsPreferences(List<String>,List<String>,List<String>,List<String>)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.getDisabledExternalTermLists()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.getDisabledInternalTermLists()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.getEnabledExternalTermLists()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.getEnabledInternalTermLists()",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.setDisabledExternalTermLists(List<String>)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.setDisabledInternalTermLists(List<String>)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.setEnabledExternalTermLists(List<String>)",0,1,1,1
"org.jabref.logic.protectedterms.ProtectedTermsPreferences.setEnabledInternalTermLists(List<String>)",0,1,1,1
"org.jabref.logic.remote.RemoteCommunicationTest.commandLineArgumentEncodingAndDecoding()",0,1,1,1
"org.jabref.logic.remote.RemoteCommunicationTest.commandLineArgumentMultiLinePassedToServer()",0,1,1,1
"org.jabref.logic.remote.RemoteCommunicationTest.commandLineArgumentSinglePassedToServer()",0,1,1,1
"org.jabref.logic.remote.RemoteCommunicationTest.commandLineArgumentTwoPassedToServer()",0,1,1,1
"org.jabref.logic.remote.RemoteCommunicationTest.pingReturnsTrue()",0,1,1,1
"org.jabref.logic.remote.RemoteCommunicationTest.setUp()",0,1,1,1
"org.jabref.logic.remote.RemoteCommunicationTest.tearDown()",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.RemotePreferences(int,boolean)",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.getIpAddress()",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.getPort()",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.isDifferentPort(int)",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.portProperty()",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.setPort(int)",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.setUseRemoteServer(boolean)",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.useRemoteServer()",0,1,1,1
"org.jabref.logic.remote.RemotePreferences.useRemoteServerProperty()",0,1,1,1
"org.jabref.logic.remote.RemotePreferencesTest.setUp()",0,1,1,1
"org.jabref.logic.remote.RemotePreferencesTest.testGetPort()",0,1,1,1
"org.jabref.logic.remote.RemotePreferencesTest.testIsDifferentPortFalse()",0,1,1,1
"org.jabref.logic.remote.RemotePreferencesTest.testIsDifferentPortTrue()",0,1,1,1
"org.jabref.logic.remote.RemotePreferencesTest.testSetPort()",0,1,1,1
"org.jabref.logic.remote.RemotePreferencesTest.testSetUseRemoteServer()",0,1,1,1
"org.jabref.logic.remote.RemotePreferencesTest.testUseRemoteServer()",0,1,1,1
"org.jabref.logic.remote.RemoteSetupTest.pingReturnsFalseForNoServerListening()",0,1,1,1
"org.jabref.logic.remote.RemoteSetupTest.pingReturnsFalseForWrongServerListening()",2,1,1,2
"org.jabref.logic.remote.RemoteSetupTest.pingReturnsTrueWhenServerIsRunning()",0,1,1,1
"org.jabref.logic.remote.RemoteSetupTest.setUp()",0,1,1,1
"org.jabref.logic.remote.RemoteSetupTest.testClientTimeout()",0,1,1,1
"org.jabref.logic.remote.RemoteSetupTest.testGoodCase()",0,1,1,1
"org.jabref.logic.remote.RemoteSetupTest.testGoodCaseWithAllLifecycleMethods()",0,1,1,1
"org.jabref.logic.remote.RemoteSetupTest.testPortAlreadyInUse()",0,1,1,1
"org.jabref.logic.remote.RemoteUtil.RemoteUtil()",0,1,1,1
"org.jabref.logic.remote.RemoteUtil.isUserPort(int)",1,1,1,2
"org.jabref.logic.remote.RemoteUtilTest.acceptPortsAboveSystemPorts()",0,1,1,1
"org.jabref.logic.remote.RemoteUtilTest.rejectPortNumberBelowZero()",0,1,1,1
"org.jabref.logic.remote.RemoteUtilTest.rejectPortsAbove16Bits()",0,1,1,1
"org.jabref.logic.remote.RemoteUtilTest.rejectReservedSystemPorts()",0,1,1,1
"org.jabref.logic.remote.client.RemoteClient.RemoteClient(int)",0,1,1,1
"org.jabref.logic.remote.client.RemoteClient.openNewConnection()",0,1,1,1
"org.jabref.logic.remote.client.RemoteClient.ping()",4,2,4,4
"org.jabref.logic.remote.client.RemoteClient.sendCommandLineArguments(String[])",1,1,2,2
"org.jabref.logic.remote.server.RemoteListenerServer.RemoteListenerServer(MessageHandler,int,PreferencesService)",0,1,1,1
"org.jabref.logic.remote.server.RemoteListenerServer.closeServerSocket()",1,1,1,2
"org.jabref.logic.remote.server.RemoteListenerServer.handleMessage(Protocol,RemoteMessage,Object)",4,2,2,4
"org.jabref.logic.remote.server.RemoteListenerServer.run()",5,2,3,4
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle.close()",0,1,1,1
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle.isNotStartedBefore()",1,1,2,2
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle.isOpen()",0,1,1,1
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle.open(MessageHandler,int,PreferencesService)",3,2,2,4
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle.openAndStart(MessageHandler,int,PreferencesService)",0,1,1,1
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle.start()",2,1,3,3
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle.stop()",1,1,2,2
"org.jabref.logic.remote.server.RemoteListenerServerThread.RemoteListenerServerThread(MessageHandler,int,PreferencesService)",0,1,1,1
"org.jabref.logic.remote.server.RemoteListenerServerThread.interrupt()",0,1,1,1
"org.jabref.logic.remote.server.RemoteListenerServerThread.run()",0,1,1,1
"org.jabref.logic.remote.shared.Protocol.Protocol(Socket)",0,1,1,1
"org.jabref.logic.remote.shared.Protocol.close()",3,1,1,4
"org.jabref.logic.remote.shared.Protocol.receiveMessage()",5,2,3,5
"org.jabref.logic.remote.shared.Protocol.sendMessage(RemoteMessage)",0,1,1,1
"org.jabref.logic.remote.shared.Protocol.sendMessage(RemoteMessage,Object)",4,1,3,3
"org.jabref.logic.search.DatabaseSearcher.DatabaseSearcher(SearchQuery,BibDatabase)",0,1,1,1
"org.jabref.logic.search.DatabaseSearcher.getMatches()",1,2,2,2
"org.jabref.logic.search.DatabaseSearcherTest.setUp()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testCorrectMatchFromDatabaseWithArticleTypeEntry()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testCorrectMatchFromDatabaseWithIncollectionTypeEntry()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testGetDatabaseFromMatchesDatabaseWithEmptyEntries()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testNoMatchFromDatabaseWithEmptyEntry()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testNoMatchesFromDabaseWithIncollectionTypeEntry()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testNoMatchesFromDatabaseWithArticleTypeEntry()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testNoMatchesFromDatabaseWithTwoEntries()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testNoMatchesFromEmptyDatabase()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testNoMatchesFromEmptyDatabaseWithInvalidQuery()",0,1,1,1
"org.jabref.logic.search.DatabaseSearcherTest.testNoMatchesFromEmptyDatabaseWithInvalidSearchExpression()",0,1,1,1
"org.jabref.logic.search.SearchQuery.SearchQuery(String,EnumSet<SearchFlags>)",0,1,1,1
"org.jabref.logic.search.SearchQuery.getCaseSensitiveDescription()",2,2,1,2
"org.jabref.logic.search.SearchQuery.getJavaScriptPatternForWords()",0,1,1,1
"org.jabref.logic.search.SearchQuery.getLocalizedCaseSensitiveDescription()",2,2,2,2
"org.jabref.logic.search.SearchQuery.getLocalizedRegularExpressionDescription()",2,2,2,2
"org.jabref.logic.search.SearchQuery.getPatternForWords()",0,1,1,1
"org.jabref.logic.search.SearchQuery.getQuery()",0,1,1,1
"org.jabref.logic.search.SearchQuery.getRegularExpressionDescription()",2,2,1,2
"org.jabref.logic.search.SearchQuery.getRule()",0,1,1,1
"org.jabref.logic.search.SearchQuery.getSearchFlags()",0,1,1,1
"org.jabref.logic.search.SearchQuery.getSearchWords()",2,2,2,2
"org.jabref.logic.search.SearchQuery.isContainsBasedSearch()",0,1,1,1
"org.jabref.logic.search.SearchQuery.isGrammarBasedSearch()",0,1,1,1
"org.jabref.logic.search.SearchQuery.isMatch(BibEntry)",0,1,1,1
"org.jabref.logic.search.SearchQuery.isValid()",0,1,1,1
"org.jabref.logic.search.SearchQuery.joinWordsToPattern(EscapeMode)",5,3,6,6
"org.jabref.logic.search.SearchQuery.localize()",0,1,1,1
"org.jabref.logic.search.SearchQuery.toString()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.isMatchedForNormalAndFieldBasedSearchMixed()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testEscapingInJavascriptPattern()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testEscapingInPattern()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testGetPattern()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testGetRegexpJavascriptPattern()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testGetRegexpPattern()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testGrammarSearch()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testGrammarSearchFullEntry()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testGrammarSearchFullEntryLastCharMissing()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsContainsBasedSearch()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsGrammarBasedSearch()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsMatch()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsNotValidQueryContainsBracketNotAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryContainsBracketAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryContainsBracketNotAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryNotAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryWithEqualSignAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryWithEqualSignNotAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryWithNumbersAndEqualSignAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryWithNumbersAndEqualSignNotAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testIsValidQueryWithNumbersAsRegEx()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testSearchAllFields()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testSearchAllFieldsAndSpecificField()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testSearchAllFieldsNotForSpecificField()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testSearchMatchesSingleKeyword()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testSearchMatchesSingleKeywordNotPart()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testSearchingForOpenBraketInBooktitle()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testSimpleTerm()",0,1,1,1
"org.jabref.logic.search.SearchQueryTest.testToString()",0,1,1,1
"org.jabref.logic.shared.DBMSConnection.DBMSConnection(DBMSConnectionProperties)",2,2,2,3
"org.jabref.logic.shared.DBMSConnection.getAvailableDBMSTypes()",3,1,3,3
"org.jabref.logic.shared.DBMSConnection.getConnection()",0,1,1,1
"org.jabref.logic.shared.DBMSConnection.getProperties()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.DBMSConnectionProperties(DBMSType,String,int,String,String,String,boolean,boolean,String,String)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.DBMSConnectionProperties(SharedDatabasePreferences)",10,1,6,7
"org.jabref.logic.shared.DBMSConnectionProperties.asProperties()",2,1,3,3
"org.jabref.logic.shared.DBMSConnectionProperties.equals(Object)",3,3,8,10
"org.jabref.logic.shared.DBMSConnectionProperties.getDatabase()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getHost()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getKeyStore()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getPassword()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getPort()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getServerTimezone()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getType()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getUrl()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.getUser()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.hashCode()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.isAllowPublicKeyRetrieval()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.isUseSSL()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionProperties.isValid()",1,1,6,6
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.createDBMSConnectionProperties()",1,1,2,2
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setAllowPublicKeyRetrieval(boolean)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setDatabase(String)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setHost(String)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setKeyStore(String)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setPassword(String)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setPort(int)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setServerTimezone(String)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setType(DBMSType)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setUseSSL(boolean)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder.setUser(String)",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesTest.urlForMySqlDoesNotIncludeSslConfig()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionPropertiesTest.urlForOracle()",0,1,1,1
"org.jabref.logic.shared.DBMSConnectionTest.getConnectionFailsWhenconnectingToInvalidHost(DBMSType)",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.DBMSProcessor(DatabaseConnection)",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.checkBaseIntegrity()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.checkTableAvailability(String...)",2,1,3,3
"org.jabref.logic.shared.DBMSProcessor.databaseIsAtMostJabRef35()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.getDBMSConnectionProperties()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.getNotYetExistingEntries(List<BibEntry>)",3,2,3,4
"org.jabref.logic.shared.DBMSProcessor.getProcessorInstance(DatabaseConnection)",3,4,1,4
"org.jabref.logic.shared.DBMSProcessor.getSharedEntries()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.getSharedEntries(List<Integer>)",8,1,7,7
"org.jabref.logic.shared.DBMSProcessor.getSharedEntry(int)",2,2,2,2
"org.jabref.logic.shared.DBMSProcessor.getSharedIDVersionMapping()",2,1,3,3
"org.jabref.logic.shared.DBMSProcessor.getSharedMetaData()",2,1,3,3
"org.jabref.logic.shared.DBMSProcessor.insertEntries(List<BibEntry>)",1,2,1,2
"org.jabref.logic.shared.DBMSProcessor.insertEntry(BibEntry)",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.insertIntoEntryTable(List<BibEntry>)",5,1,6,6
"org.jabref.logic.shared.DBMSProcessor.insertIntoFieldTable(List<BibEntry>)",7,2,6,7
"org.jabref.logic.shared.DBMSProcessor.insertOrUpdateFields(BibEntry)",6,1,4,4
"org.jabref.logic.shared.DBMSProcessor.notifyClients()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.removeEntries(List<BibEntry>)",3,2,3,4
"org.jabref.logic.shared.DBMSProcessor.removeSharedFieldsByDifference(BibEntry,BibEntry)",1,1,2,2
"org.jabref.logic.shared.DBMSProcessor.setSharedMetaData(Map<String, String>)",8,1,5,5
"org.jabref.logic.shared.DBMSProcessor.setupSharedDatabase()",1,1,2,2
"org.jabref.logic.shared.DBMSProcessor.startNotificationListener(DBMSSynchronizer)",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.stopNotificationListener()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessor.updateEntry(BibEntry)",5,3,4,5
"org.jabref.logic.shared.DBMSProcessorTest.closeDbmsConnection()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.databaseIntegrityBrokenAfterClearedTables()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.databaseIntegrityFullFiledAfterSetup()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.escape(String,DBMSProcessor)",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.escapeValue(String)",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.getBibEntryExample()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.getBibEntryExample2()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.getBibEntryExample3()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.getBibEntryExampleWithEmptyFields()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.getMetaDataExample()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.insertMetaData(String,String,DBMSConnection,DBMSProcessor)",1,1,2,2
"org.jabref.logic.shared.DBMSProcessorTest.selectFrom(String,DBMSConnection,DBMSProcessor)",1,1,2,2
"org.jabref.logic.shared.DBMSProcessorTest.setup()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testGetEntriesByIdList()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testGetNotExistingSharedEntry()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testGetSharedEntries()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testGetSharedEntry()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testGetSharedIDVersionMapping()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testGetSharedMetaData()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testInsertEntry()",1,1,2,2
"org.jabref.logic.shared.DBMSProcessorTest.testInsertEntryWithEmptyFields()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testInsertMultipleEntries()",5,1,4,4
"org.jabref.logic.shared.DBMSProcessorTest.testRemoveAllEntries()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testRemoveEmptyEntryList()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testRemoveEntriesOnNullThrows()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testRemoveSingleEntry()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testRemoveSomeEntries()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testSetSharedMetaData()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testUpdateEmptyEntry()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testUpdateEntry()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testUpdateEqualEntry()",0,1,1,1
"org.jabref.logic.shared.DBMSProcessorTest.testUpdateNewerEntry()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.DBMSSynchronizer(BibDatabaseContext,Character,GlobalCitationKeyPattern,FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.applyMetaData()",8,2,5,6
"org.jabref.logic.shared.DBMSSynchronizer.checkCurrentConnection()",2,1,3,3
"org.jabref.logic.shared.DBMSSynchronizer.closeSharedDatabase()",1,1,2,2
"org.jabref.logic.shared.DBMSSynchronizer.getConnectionProperties()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.getDBName()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.getDBProcessor()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.initializeDatabases()",4,3,3,4
"org.jabref.logic.shared.DBMSSynchronizer.isEventSourceAccepted(EntriesEvent)",1,1,1,2
"org.jabref.logic.shared.DBMSSynchronizer.isPresentLocalBibEntry(BibEntry)",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.listen(EntriesAddedEvent)",2,1,3,3
"org.jabref.logic.shared.DBMSSynchronizer.listen(EntriesRemovedEvent)",2,1,3,3
"org.jabref.logic.shared.DBMSSynchronizer.listen(FieldChangedEvent)",3,1,5,5
"org.jabref.logic.shared.DBMSSynchronizer.listen(MetaDataChangedEvent)",1,1,2,2
"org.jabref.logic.shared.DBMSSynchronizer.openSharedDatabase(DatabaseConnection)",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.pullChanges()",1,2,1,2
"org.jabref.logic.shared.DBMSSynchronizer.pullLastEntryChanges()",3,3,2,3
"org.jabref.logic.shared.DBMSSynchronizer.pullWithLastEntry()",2,1,3,3
"org.jabref.logic.shared.DBMSSynchronizer.registerListener(Object)",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.removeNotSharedEntries(List<BibEntry>,Set<Integer>)",1,1,2,2
"org.jabref.logic.shared.DBMSSynchronizer.setMetaData(MetaData)",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizer.synchronizeLocalDatabase()",19,2,8,9
"org.jabref.logic.shared.DBMSSynchronizer.synchronizeLocalMetaData()",2,2,2,3
"org.jabref.logic.shared.DBMSSynchronizer.synchronizeSharedEntry(BibEntry)",3,2,3,4
"org.jabref.logic.shared.DBMSSynchronizer.synchronizeSharedMetaData(MetaData,GlobalCitationKeyPattern)",2,2,2,3
"org.jabref.logic.shared.DBMSSynchronizerTest.clear()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.createExampleBibEntry(int)",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.oneLocalAndOneSharedFieldChangeIsSynchronizedCorrectly()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.setup()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.testApplyMetaData()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.testEntriesRemovedEventListener()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.testEntryAddedEventListener()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.testInitializeDatabases()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.testMetaDataChangedEventListener()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.testSynchronizeLocalDatabaseWithEntryRemoval()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.testSynchronizeLocalDatabaseWithEntryUpdate()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.twoLocalFieldChangesAreSynchronizedCorrectly()",0,1,1,1
"org.jabref.logic.shared.DBMSSynchronizerTest.updateEntryDoesNotModifyLocalDatabase()",0,1,1,1
"org.jabref.logic.shared.DBMSType.DBMSType(String,String,String,int)",0,1,1,1
"org.jabref.logic.shared.DBMSType.fromString(String)",0,1,1,1
"org.jabref.logic.shared.DBMSType.getDefaultPort()",0,1,1,1
"org.jabref.logic.shared.DBMSType.getDriverClassPath()",0,1,1,1
"org.jabref.logic.shared.DBMSType.getUrl(String,int,String)",0,1,1,1
"org.jabref.logic.shared.DBMSType.toString()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.driverClassForMysqlIsCorrect()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.driverClassForOracleIsCorrect()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.driverClassForPostgresIsCorrect()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringForMysqlReturnsCorrectValue()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringForOracleRturnsCorrectValue()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringForPostgresReturnsCorrectValue()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringFromInvalidStringReturnsOptionalEmpty()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringWorksForEmptyString()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringWorksForMySQL()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringWorksForNullString()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringWorksForPostgreSQL()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.fromStringWorksForUnkownString()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.getDefaultPortForMysqlHasCorrectValue()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.getDefaultPortForOracleHasCorrectValue()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.getDefaultPortForPostgresHasCorrectValue()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.getUrlForMysqlHasCorrectFormat()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.getUrlForOracleHasCorrectFormat()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.getUrlForPostgresHasCorrectFormat()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.toStringCorrectForMysql()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.toStringCorrectForOracle()",0,1,1,1
"org.jabref.logic.shared.DBMSTypeTest.toStringCorrectForPostgres()",0,1,1,1
"org.jabref.logic.shared.DatabaseNotSupportedException.DatabaseNotSupportedException()",0,1,1,1
"org.jabref.logic.shared.MySQLProcessor.MySQLProcessor(DatabaseConnection)",0,1,1,1
"org.jabref.logic.shared.MySQLProcessor.escape(String)",0,1,1,1
"org.jabref.logic.shared.MySQLProcessor.setUp()",0,1,1,1
"org.jabref.logic.shared.OracleProcessor.OracleProcessor(DatabaseConnection)",0,1,1,1
"org.jabref.logic.shared.OracleProcessor.escape(String)",0,1,1,1
"org.jabref.logic.shared.OracleProcessor.insertIntoEntryTable(List<BibEntry>)",4,1,4,4
"org.jabref.logic.shared.OracleProcessor.insertIntoFieldTable(List<BibEntry>)",6,1,6,6
"org.jabref.logic.shared.OracleProcessor.notifyClients()",0,1,1,1
"org.jabref.logic.shared.OracleProcessor.setUp()",0,1,1,1
"org.jabref.logic.shared.OracleProcessor.startNotificationListener(DBMSSynchronizer)",1,1,2,2
"org.jabref.logic.shared.OracleProcessor.stopNotificationListener()",1,1,2,2
"org.jabref.logic.shared.PostgreSQLProcessor.PostgreSQLProcessor(DatabaseConnection)",0,1,1,1
"org.jabref.logic.shared.PostgreSQLProcessor.escape(String)",0,1,1,1
"org.jabref.logic.shared.PostgreSQLProcessor.insertIntoEntryTable(List<BibEntry>)",5,1,6,6
"org.jabref.logic.shared.PostgreSQLProcessor.notifyClients()",1,1,2,2
"org.jabref.logic.shared.PostgreSQLProcessor.setUp()",0,1,1,1
"org.jabref.logic.shared.PostgreSQLProcessor.startNotificationListener(DBMSSynchronizer)",1,1,2,2
"org.jabref.logic.shared.PostgreSQLProcessor.stopNotificationListener()",1,1,2,2
"org.jabref.logic.shared.SynchronizationTestEventListener.getSharedEntriesNotPresentEvent()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestEventListener.getUpdateRefusedEvent()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestEventListener.listen(SharedEntriesNotPresentEvent)",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestEventListener.listen(UpdateRefusedEvent)",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.clear()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.getBibEntryExample(int)",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.setup()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.simulateEntryChangeConflicts()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.simulateEntryDelitionAndManualPull()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.simulateEntryInsertionAndManualPull()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.simulateEntryUpdateAndManualPull()",0,1,1,1
"org.jabref.logic.shared.SynchronizationTestSimulator.simulateUpdateOnNoLongerExistingEntry()",0,1,1,1
"org.jabref.logic.shared.TestConnector.getTestConnectionProperties(DBMSType)",1,4,4,4
"org.jabref.logic.shared.TestConnector.getTestDBMSConnection(DBMSType)",0,1,1,1
"org.jabref.logic.shared.TestManager.clearTables(DBMSConnection)",3,1,4,4
"org.jabref.logic.shared.TestManager.getDBMSTypeTestParameter()",0,1,1,1
"org.jabref.logic.shared.event.ConnectionLostEvent.ConnectionLostEvent(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.shared.event.ConnectionLostEvent.getBibDatabaseContext()",0,1,1,1
"org.jabref.logic.shared.event.SharedEntriesNotPresentEvent.SharedEntriesNotPresentEvent(List<BibEntry>)",0,1,1,1
"org.jabref.logic.shared.event.SharedEntriesNotPresentEvent.getBibEntries()",0,1,1,1
"org.jabref.logic.shared.event.UpdateRefusedEvent.UpdateRefusedEvent(BibDatabaseContext,BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.shared.event.UpdateRefusedEvent.getBibDatabaseContext()",0,1,1,1
"org.jabref.logic.shared.event.UpdateRefusedEvent.getLocalBibEntry()",0,1,1,1
"org.jabref.logic.shared.event.UpdateRefusedEvent.getSharedBibEntry()",0,1,1,1
"org.jabref.logic.shared.exception.InvalidDBMSConnectionPropertiesException.InvalidDBMSConnectionPropertiesException()",0,1,1,1
"org.jabref.logic.shared.exception.NotASharedDatabaseException.NotASharedDatabaseException()",0,1,1,1
"org.jabref.logic.shared.exception.OfflineLockException.OfflineLockException(BibEntry,BibEntry)",0,1,1,1
"org.jabref.logic.shared.exception.OfflineLockException.getLocalBibEntry()",0,1,1,1
"org.jabref.logic.shared.exception.OfflineLockException.getSharedBibEntry()",0,1,1,1
"org.jabref.logic.shared.exception.SharedEntryNotPresentException.SharedEntryNotPresentException(BibEntry)",0,1,1,1
"org.jabref.logic.shared.exception.SharedEntryNotPresentException.getNonPresentBibEntry()",0,1,1,1
"org.jabref.logic.shared.listener.OracleNotificationListener.OracleNotificationListener(DBMSSynchronizer)",0,1,1,1
"org.jabref.logic.shared.listener.OracleNotificationListener.onDatabaseChangeNotification(DatabaseChangeEvent)",0,1,1,1
"org.jabref.logic.shared.listener.PostgresSQLNotificationListener.PostgresSQLNotificationListener(DBMSSynchronizer,PGConnection)",0,1,1,1
"org.jabref.logic.shared.listener.PostgresSQLNotificationListener.run()",11,1,6,6
"org.jabref.logic.shared.listener.PostgresSQLNotificationListener.stop()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.SharedDatabasePreferences()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.SharedDatabasePreferences(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.clear()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.clearAll()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.clearPassword()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getHost()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getKeyStoreFile()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getName()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getOptionalValue(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getPassword()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getPort()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getRememberPassword()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getServerTimezone()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getType()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.getUser()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.isUseSSL()",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.putAllDBMSConnectionProperties(DatabaseConnectionProperties)",1,1,2,2
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setHost(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setKeystoreFile(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setName(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setPassword(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setPort(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setRememberPassword(boolean)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setServerTimezone(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setType(String)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setUseSSL(boolean)",0,1,1,1
"org.jabref.logic.shared.prefs.SharedDatabasePreferences.setUser(String)",0,1,1,1
"org.jabref.logic.shared.security.Password.Password(String,String)",0,1,1,1
"org.jabref.logic.shared.security.Password.Password(char[],String)",0,1,1,1
"org.jabref.logic.shared.security.Password.decrypt()",0,1,1,1
"org.jabref.logic.shared.security.Password.encrypt()",0,1,1,1
"org.jabref.logic.shared.security.Password.get128BitHash(byte[])",0,1,1,1
"org.jabref.logic.shared.security.PasswordTest.passwordAESTest()",0,1,1,1
"org.jabref.logic.shared.security.PasswordTest.passwordAsCharTest()",0,1,1,1
"org.jabref.logic.texparser.DefaultLatexParser.DefaultLatexParser()",0,1,1,1
"org.jabref.logic.texparser.DefaultLatexParser.getLatexParserResult()",0,1,1,1
"org.jabref.logic.texparser.DefaultLatexParser.matchBibFile(Path,String)",9,1,5,5
"org.jabref.logic.texparser.DefaultLatexParser.matchCitation(Path,int,String)",3,1,3,3
"org.jabref.logic.texparser.DefaultLatexParser.matchNestedFile(Path,List<Path>,List<Path>,String)",6,1,5,5
"org.jabref.logic.texparser.DefaultLatexParser.parse(List<Path>)",15,5,8,9
"org.jabref.logic.texparser.DefaultLatexParser.parse(Path)",0,1,1,1
"org.jabref.logic.texparser.DefaultLatexParser.parse(String)",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testCiteCommands()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testDuplicateFiles()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testFileEncodingForThreeFiles()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testFileEncodingIso88591()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testFileEncodingIso885915()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testFileEncodingUtf8()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testFileNotFound()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testMatchCite(String,String)",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testNestedFiles()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testNonMatchCite(String)",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testSingleFile()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testTwoCitationsSameLine()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testTwoFiles()",0,1,1,1
"org.jabref.logic.texparser.DefaultTexParserTest.testUnknownKey()",0,1,1,1
"org.jabref.logic.texparser.LatexParserTest.setUp()",0,1,1,1
"org.jabref.logic.texparser.LatexParserTest.testSameFileDifferentDatabases()",0,1,1,1
"org.jabref.logic.texparser.LatexParserTest.testTwoFilesDifferentDatabases()",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolver.TexBibEntriesResolver(BibDatabase,GeneralPreferences,ImportFormatPreferences,FileUpdateMonitor)",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolver.addCrossReferencingData(BibEntry,Path,Map<Path, BibDatabase>)",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolver.apply(Entry<String, Citation>,LatexParserResult,Map<Path, BibDatabase>)",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolver.resolve(LatexParserResult)",2,1,2,2
"org.jabref.logic.texparser.TexBibEntriesResolverTest.setUp()",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolverTest.testCrossRef()",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolverTest.testDuplicateFiles()",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolverTest.testNestedFiles()",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolverTest.testSingleFile()",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolverTest.testTwoFiles()",0,1,1,1
"org.jabref.logic.texparser.TexBibEntriesResolverTest.testUnknownKey()",0,1,1,1
"org.jabref.logic.undo.AddUndoableActionEvent.AddUndoableActionEvent(boolean,String,boolean,String)",0,1,1,1
"org.jabref.logic.undo.UndoChangeEvent.UndoChangeEvent(boolean,String,boolean,String)",0,1,1,1
"org.jabref.logic.undo.UndoChangeEvent.getRedoDescription()",0,1,1,1
"org.jabref.logic.undo.UndoChangeEvent.getUndoDescription()",0,1,1,1
"org.jabref.logic.undo.UndoChangeEvent.isCanRedo()",0,1,1,1
"org.jabref.logic.undo.UndoChangeEvent.isCanUndo()",0,1,1,1
"org.jabref.logic.undo.UndoRedoEvent.UndoRedoEvent(boolean,String,boolean,String)",0,1,1,1
"org.jabref.logic.util.BuildInfo.BuildInfo()",0,1,1,1
"org.jabref.logic.util.BuildInfo.BuildInfo(String)",2,1,2,3
"org.jabref.logic.util.BuildInfo.getValue(Properties,String,String)",1,2,1,2
"org.jabref.logic.util.BuildInfoTest.azureInstrumentationKeyIsNotEmpty()",0,1,1,1
"org.jabref.logic.util.BuildInfoTest.testDefaults()",0,1,1,1
"org.jabref.logic.util.BuildInfoTest.testFileImport()",0,1,1,1
"org.jabref.logic.util.CoarseChangeFilter.CoarseChangeFilter(BibDatabaseContext)",0,1,1,1
"org.jabref.logic.util.CoarseChangeFilter.listen(BibDatabaseContextChangedEvent)",6,1,3,6
"org.jabref.logic.util.CoarseChangeFilter.registerListener(Object)",0,1,1,1
"org.jabref.logic.util.CoarseChangeFilter.shutdown()",0,1,1,1
"org.jabref.logic.util.CoarseChangeFilter.unregisterListener(Object)",0,1,1,1
"org.jabref.logic.util.DelayTaskThrottler.DelayTaskThrottler(int)",0,1,1,1
"org.jabref.logic.util.DelayTaskThrottler.cancel()",0,1,1,1
"org.jabref.logic.util.DelayTaskThrottler.execute(Runnable)",0,1,1,1
"org.jabref.logic.util.DelayTaskThrottler.schedule(Runnable)",2,1,3,3
"org.jabref.logic.util.DelayTaskThrottler.scheduleTask(Callable<?>)",2,1,3,3
"org.jabref.logic.util.DelayTaskThrottler.shutdown()",0,1,1,1
"org.jabref.logic.util.DevelopmentStageTest.checkStabilityOrder()",0,1,1,1
"org.jabref.logic.util.DevelopmentStageTest.parseNull()",0,1,1,1
"org.jabref.logic.util.DevelopmentStageTest.parseStages()",0,1,1,1
"org.jabref.logic.util.DevelopmentStageTest.parseUnknownString()",0,1,1,1
"org.jabref.logic.util.ExternalLinkCreator.getShortScienceSearchURL(BibEntry)",2,1,1,2
"org.jabref.logic.util.ExternalLinkCreatorTest.getShortScienceSearchURLEncodesSpecialCharacters()",0,1,1,1
"org.jabref.logic.util.ExternalLinkCreatorTest.getShortScienceSearchURLLinksToSearchResults()",0,1,1,1
"org.jabref.logic.util.ExternalLinkCreatorTest.getShortScienceSearchURLReturnsEmptyOnMissingTitle()",0,1,1,1
"org.jabref.logic.util.ExternalLinkCreatorTest.urlIsValid(String)",1,1,1,2
"org.jabref.logic.util.FileType.getExtensionsWithDot()",0,1,1,1
"org.jabref.logic.util.MetadataSerializationConfiguration.MetadataSerializationConfiguration()",0,1,1,1
"org.jabref.logic.util.OS.OS()",0,1,1,1
"org.jabref.logic.util.StandardFileType.StandardFileType(String,String...)",0,1,1,1
"org.jabref.logic.util.StandardFileType.fromExtensions(String...)",0,1,1,1
"org.jabref.logic.util.StandardFileType.getExtensions()",0,1,1,1
"org.jabref.logic.util.StandardFileType.getName()",0,1,1,1
"org.jabref.logic.util.TestEntry.TestEntry()",0,1,1,1
"org.jabref.logic.util.TestEntry.getTestEntry()",0,1,1,1
"org.jabref.logic.util.TestEntry.getTestEntryBook()",0,1,1,1
"org.jabref.logic.util.UnknownFileType.UnknownFileType(String...)",3,1,3,3
"org.jabref.logic.util.UnknownFileType.equals(Object)",2,3,1,3
"org.jabref.logic.util.UnknownFileType.getExtensions()",0,1,1,1
"org.jabref.logic.util.UnknownFileType.getName()",0,1,1,1
"org.jabref.logic.util.UnknownFileType.hashCode()",0,1,1,1
"org.jabref.logic.util.UpdateField.UpdateField()",0,1,1,1
"org.jabref.logic.util.UpdateField.setAutomaticFields(BibEntry,boolean,String,boolean,String)",2,1,3,3
"org.jabref.logic.util.UpdateField.setAutomaticFields(BibEntry,boolean,boolean,OwnerPreferences,TimestampPreferences)",2,1,3,3
"org.jabref.logic.util.UpdateField.setAutomaticFields(Collection<BibEntry>,OwnerPreferences,TimestampPreferences)",0,1,1,1
"org.jabref.logic.util.UpdateField.setAutomaticFields(Collection<BibEntry>,boolean,OwnerPreferences,TimestampPreferences)",5,2,4,6
"org.jabref.logic.util.UpdateField.updateField(BibEntry,Field,String)",0,1,1,1
"org.jabref.logic.util.UpdateField.updateField(BibEntry,Field,String,Boolean)",11,5,7,7
"org.jabref.logic.util.UpdateField.updateNonDisplayableField(BibEntry,Field,String)",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.createOwnerPreference(boolean,boolean)",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.createTimestampPreference()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.creationdateAssignedCorrectlyAfterAutomaticSet()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.emptyCreationdateFieldNowPresentAfterAutomaticSet()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.emptyOwnerFieldNowPresentAfterAutomaticSet()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.ownerAssignedCorrectlyAfterAutomaticSet()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.ownerIsNotResetAfterAutomaticSetIfOverwriteOwnerFalse()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.ownerNotChangedForCollectionOfBibEntriesIfOptionsDisabled()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.ownerSetToDefaultValueForCollectionOfBibEntries()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.setUp()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldCorrectFieldChangeContentsEmptyField()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldCorrectFieldChangeContentsNonEmptyField()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldHasChanged()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSameContentClears()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSameContentHasChanged()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSameContentHasCorrectFieldChange()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSameContentHasFieldChange()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSameValueNoChange()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSameValueNotChange()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSetEmptyToNullClears()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSetRmptyToNullHasNoFieldChangeContents()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSetToNullClears()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSetToNullCorrectFieldChangeContents()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldSetToNullHasFieldChangeContents()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldValidFieldChange()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldWorksEmptyField()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateFieldWorksNonEmptyField()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateNonDisplayableFieldHasNotChanged()",0,1,1,1
"org.jabref.logic.util.UpdateFieldTest.testUpdateNonDisplayableFieldUpdates()",0,1,1,1
"org.jabref.logic.util.Version.DevelopmentStage.DevelopmentStage(String,int)",0,1,1,1
"org.jabref.logic.util.Version.DevelopmentStage.isMoreStableThan(DevelopmentStage)",0,1,1,1
"org.jabref.logic.util.Version.DevelopmentStage.parse(String)",4,5,4,5
"org.jabref.logic.util.Version.Version()",0,1,1,1
"org.jabref.logic.util.Version.equals(Object)",2,3,1,3
"org.jabref.logic.util.Version.getAllAvailableVersions()",1,1,2,2
"org.jabref.logic.util.Version.getChangelogUrl()",4,2,3,3
"org.jabref.logic.util.Version.getFullVersion()",0,1,1,1
"org.jabref.logic.util.Version.getMajor()",0,1,1,1
"org.jabref.logic.util.Version.getMinor()",0,1,1,1
"org.jabref.logic.util.Version.getPatch()",0,1,1,1
"org.jabref.logic.util.Version.hashCode()",0,1,1,1
"org.jabref.logic.util.Version.isDevelopmentVersion()",0,1,1,1
"org.jabref.logic.util.Version.isNewerThan(Version)",18,12,9,13
"org.jabref.logic.util.Version.parse(String)",14,3,10,11
"org.jabref.logic.util.Version.shouldBeUpdatedTo(List<Version>)",5,1,5,5
"org.jabref.logic.util.Version.shouldBeUpdatedTo(Version)",2,2,1,3
"org.jabref.logic.util.Version.toString()",0,1,1,1
"org.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToBeta()",0,1,1,1
"org.jabref.logic.util.VersionTest.alphaShouldBeUpdatedToStables()",0,1,1,1
"org.jabref.logic.util.VersionTest.betaNewerThanAlpha()",0,1,1,1
"org.jabref.logic.util.VersionTest.betaShouldBeUpdatedToStable()",0,1,1,1
"org.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithDash()",0,1,1,1
"org.jabref.logic.util.VersionTest.changelogOfDevelopmentVersionWithoutDash()",0,1,1,1
"org.jabref.logic.util.VersionTest.changelogWithThreeDigits()",0,1,1,1
"org.jabref.logic.util.VersionTest.changelogWithTwoDigits()",0,1,1,1
"org.jabref.logic.util.VersionTest.ciSuffixShouldBeRemoved()",0,1,1,1
"org.jabref.logic.util.VersionTest.ciSuffixShouldBeRemovedIfDateIsPresent()",0,1,1,1
"org.jabref.logic.util.VersionTest.equalVersionsNotNewer()",0,1,1,1
"org.jabref.logic.util.VersionTest.getAllAvailableVersionsReturnsSomething()",0,1,1,1
"org.jabref.logic.util.VersionTest.initVersionFromWrongStringResultsInUnknownVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.stableNewerThanBeta()",0,1,1,1
"org.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToAlpha()",0,1,1,1
"org.jabref.logic.util.VersionTest.stableShouldNotBeUpdatedToBeta()",0,1,1,1
"org.jabref.logic.util.VersionTest.unknownVersionAsEmptyString()",0,1,1,1
"org.jabref.logic.util.VersionTest.unknownVersionAsNull()",0,1,1,1
"org.jabref.logic.util.VersionTest.unknownVersionAsString()",0,1,1,1
"org.jabref.logic.util.VersionTest.unknownVersionIsNotNewerThanValidVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.validVersionIsNotNewerThanUnknownVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionEmpty()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNewerMinor()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNewerPatch()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNewerThan()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNewerThanDevThreeDigits()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNewerThanDevTwoDigits()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNewerThanDevVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNotNewerMinor()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNotNewerPatch()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNotNewerThan()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNotNewerThanSameVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionNull()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionOneDigit()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionOneDigitDevVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionThreeDigitDevVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionThreeDigits()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionTwoDigitDevVersion()",0,1,1,1
"org.jabref.logic.util.VersionTest.versionTwoDigits()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.AutoLinkPreferences(CitationKeyDependency,String,boolean,Character)",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.askAutoNamingPdfsProperty()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.citationKeyDependencyProperty()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.getCitationKeyDependency()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.getKeywordDelimiter()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.getRegularExpression()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.keywordDelimiterProperty()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.regularExpressionProperty()",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.setAskAutoNamingPdfs(boolean)",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.setCitationKeyDependency(CitationKeyDependency)",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.setKeywordDelimiter(Character)",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.setRegularExpression(String)",0,1,1,1
"org.jabref.logic.util.io.AutoLinkPreferences.shouldAskAutoNamingPdfs()",0,1,1,1
"org.jabref.logic.util.io.CitationKeyBasedFileFinder.CitationKeyBasedFileFinder(boolean)",0,1,1,1
"org.jabref.logic.util.io.CitationKeyBasedFileFinder.findAssociatedFiles(BibEntry,List<Path>,List<String>)",7,4,6,6
"org.jabref.logic.util.io.CitationKeyBasedFileFinder.findFilesByExtension(List<Path>,List<String>)",7,3,4,5
"org.jabref.logic.util.io.CitationKeyBasedFileFinder.matches(String,String)",1,2,2,2
"org.jabref.logic.util.io.CitationKeyBasedFileFinderTest.findAssociatedFilesFindsFilesStartingWithKey()",0,1,1,1
"org.jabref.logic.util.io.CitationKeyBasedFileFinderTest.findAssociatedFilesIgnoresFilesStartingWithKeyButContinueWithText()",0,1,1,1
"org.jabref.logic.util.io.CitationKeyBasedFileFinderTest.findAssociatedFilesInNonExistingDirectoryFindsNothing()",0,1,1,1
"org.jabref.logic.util.io.CitationKeyBasedFileFinderTest.findAssociatedFilesInSubDirectories()",0,1,1,1
"org.jabref.logic.util.io.CitationKeyBasedFileFinderTest.setUp(Path)",0,1,1,1
"org.jabref.logic.util.io.DatabaseFileLookup.DatabaseFileLookup(BibDatabaseContext,FilePreferences)",1,1,2,2
"org.jabref.logic.util.io.DatabaseFileLookup.lookupDatabase(Path)",0,1,1,1
"org.jabref.logic.util.io.DatabaseFileLookup.parseFileField(BibEntry)",0,1,1,1
"org.jabref.logic.util.io.FileFinders.constructFromConfiguration(AutoLinkPreferences)",1,4,2,4
"org.jabref.logic.util.io.FileHistory.FileHistory(List<Path>)",0,1,1,1
"org.jabref.logic.util.io.FileHistory.getFileAt(int)",0,1,1,1
"org.jabref.logic.util.io.FileHistory.getHistory()",0,1,1,1
"org.jabref.logic.util.io.FileHistory.isEmpty()",0,1,1,1
"org.jabref.logic.util.io.FileHistory.newFile(Path)",1,1,2,2
"org.jabref.logic.util.io.FileHistory.removeItem(Path)",0,1,1,1
"org.jabref.logic.util.io.FileHistory.size()",0,1,1,1
"org.jabref.logic.util.io.FileHistoryTest.getFileAtTest()",0,1,1,1
"org.jabref.logic.util.io.FileHistoryTest.isEmptyTest()",0,1,1,1
"org.jabref.logic.util.io.FileHistoryTest.itemsAlreadyInListIsMovedToTop()",0,1,1,1
"org.jabref.logic.util.io.FileHistoryTest.newItemsAreAddedInRightOrder()",0,1,1,1
"org.jabref.logic.util.io.FileHistoryTest.removeItemsLeavesOtherItemsInRightOrder()",0,1,1,1
"org.jabref.logic.util.io.FileHistoryTest.setUp()",0,1,1,1
"org.jabref.logic.util.io.FileHistoryTest.sizeTest()",0,1,1,1
"org.jabref.logic.util.io.FileNameCleaner.FileNameCleaner()",0,1,1,1
"org.jabref.logic.util.io.FileNameCleaner.cleanDirectoryName(String)",4,1,3,3
"org.jabref.logic.util.io.FileNameCleaner.cleanFileName(String)",5,1,5,5
"org.jabref.logic.util.io.FileNameCleaner.isCharLegal(char)",0,1,1,1
"org.jabref.logic.util.io.FileNameCleanerTest.testCleanCurlyBracesAsWell()",0,1,1,1
"org.jabref.logic.util.io.FileNameCleanerTest.testCleanDirectoryName()",0,1,1,1
"org.jabref.logic.util.io.FileNameCleanerTest.testCleanDirectoryNameForWindows()",0,1,1,1
"org.jabref.logic.util.io.FileNameCleanerTest.testCleanFileName()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniqueness.eraseDuplicateMarks(String)",1,1,2,2
"org.jabref.logic.util.io.FileNameUniqueness.getNonOverWritingFileName(Path,String)",3,1,2,3
"org.jabref.logic.util.io.FileNameUniqueness.isDuplicatedFile(Path,Path,DialogService)",11,5,4,7
"org.jabref.logic.util.io.FileNameUniquenessTest.testGetNonOverWritingFileNameReturnsSameName()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testGetNonOverWritingFileNameReturnsUniqueNameOver1Conflict()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testGetNonOverWritingFileNameReturnsUniqueNameOverNConflicts()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testIsDuplicatedFileWithNoSimilarNames()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testIsDuplicatedFileWithOneSimilarNames()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testTaseDuplicateMarksReturnsOrignalFileName1()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testTaseDuplicateMarksReturnsOrignalFileName2()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testTaseDuplicateMarksReturnsSameName1()",0,1,1,1
"org.jabref.logic.util.io.FileNameUniquenessTest.testTaseDuplicateMarksReturnsSameName2()",0,1,1,1
"org.jabref.logic.util.io.FileUtil.FileUtil()",0,1,1,1
"org.jabref.logic.util.io.FileUtil.addExtension(Path,String)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.copyFile(Path,Path,boolean)",4,3,5,5
"org.jabref.logic.util.io.FileUtil.createDirNameFromPattern(BibDatabase,BibEntry,String)",1,2,1,2
"org.jabref.logic.util.io.FileUtil.createFileNameFromPattern(BibDatabase,BibEntry,String)",1,1,2,2
"org.jabref.logic.util.io.FileUtil.find(String,List<Path>)",1,1,2,2
"org.jabref.logic.util.io.FileUtil.find(String,Path)",1,1,2,2
"org.jabref.logic.util.io.FileUtil.getBaseName(Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.getBaseName(String)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.getFileExtension(Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.getFileExtension(String)",3,2,3,3
"org.jabref.logic.util.io.FileUtil.getInitialDirectory(BibDatabaseContext,PreferencesService)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.getListOfLinkedFiles(List<BibEntry>,List<Path>)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.getUniquePathFragment(List<String>,Path)",1,1,3,3
"org.jabref.logic.util.io.FileUtil.getValidFileName(String)",1,2,2,2
"org.jabref.logic.util.io.FileUtil.isBibFile(Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.isPDFFile(Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.relativize(Path,List<Path>)",4,4,3,4
"org.jabref.logic.util.io.FileUtil.renameFile(Path,Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.renameFile(Path,Path,boolean)",1,1,2,2
"org.jabref.logic.util.io.FileUtil.renameFileWithException(Path,Path,boolean)",2,2,2,2
"org.jabref.logic.util.io.FileUtil.toPortableString(Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtil.uniquePathSubstrings(List<String>)",14,1,9,9
"org.jabref.logic.util.io.FileUtilTest.extensionBakAddedCorrectly()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.extensionBakAddedCorrectlyToAFileContainedInTmpDirectory()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.getFileExtensionTrimsAndReturnsInLowercase()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.getFileExtensionWithDotAtStartReturnsEmptyExtension()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.getFileExtensionWithMultipleDotsString()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.getFileExtensionWithNoDotReturnsEmptyExtension()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.getFileExtensionWithSimpleString()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.getFileNameWithMultipleDotsString()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.getFileNameWithSimpleString()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.invalidFilenameWithoutExtension()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.setUpViewModel(Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromEmptySourcePathToEmptyDestinationPathWithOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromEmptySourcePathToEmptyDestinationPathWithoutOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromEmptySourcePathToExistDestinationPathWithOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromEmptySourcePathToExistDestinationPathWithoutOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromExistSourcePathToExistDestinationPathWithOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromExistSourcePathToExistDestinationPathWithoutOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromExistSourcePathToOtherExistDestinationPathWithOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileFromExistSourcePathToOtherExistDestinationPathWithoutOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileSuccessfulWithOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testCopyFileSuccessfulWithoutOverrideExistFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetDefaultFileNameNoPatternNoBibTeXKey()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetFileExtensionMultipleDotsFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetFileExtensionNoExtension2File()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetFileExtensionNoExtensionFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetFileExtensionSimpleFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedDirNameDefaultFullTitle()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedDirNamePatternEmpty()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedFileNameBibTeXKey()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedFileNameByYearAuthorFirstpage()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedFileNameDefaultFullTitle()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedFileNameDefaultWithLowercaseTitle()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedFileNameGetDefaultIfEmptyFieldNoKey()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedFileNameGetKeyIfEmptyField()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testGetLinkedFileNameNoPattern()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testIsBibFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testIsNotBibFile()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileSuccessful(Path)",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileExistAndOtherToFileExist()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileExistAndToFileExist()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileExistAndToFileIsNull()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileExistAndToFileNotExist()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileIsNullAndToFileExist()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileIsNullAndToFileIsNull()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileNotExistAndToFileExist()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.testRenameFileWithFromFileNotExistAndToFileNotExist()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.uniquePathSubstrings()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.validFilenameShouldBeMaximum255Chars()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.validFilenameShouldNotAlterValidFilename()",0,1,1,1
"org.jabref.logic.util.io.FileUtilTest.validFilenameWithoutExtension()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinder.RegExpBasedFileFinder(String,Character)",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinder.createFileNamePattern(String[],String,BibEntry)",1,1,2,2
"org.jabref.logic.util.io.RegExpBasedFileFinder.findAssociatedFiles(BibEntry,List<Path>,List<String>)",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinder.findFile(BibEntry,List<Path>,String)",1,1,2,2
"org.jabref.logic.util.io.RegExpBasedFileFinder.findFile(BibEntry,Path,String,String)",36,7,14,16
"org.jabref.logic.util.io.RegExpBasedFileFinder.isSubDirectory(Path,Path)",1,1,2,2
"org.jabref.logic.util.io.RegExpBasedFileFinder.toFileNameRegex(String)",1,1,2,2
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.findAssociatedFilesFindCleanedFileFromBracketedExpression()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.findAssociatedFilesFindFileContainingBracketsFromBracketedExpression()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.findAssociatedFilesFindFileContainingParenthesizesFromBracketedExpression()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.setUp(Path)",1,1,2,2
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.testAuthorWithDiacritics()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.testFindFileInSubdirectory()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.testFindFileNonRecursive()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.testFindFiles()",0,1,1,1
"org.jabref.logic.util.io.RegExpBasedFileFinderTests.testYearAuthFirstPageFindFiles()",0,1,1,1
"org.jabref.logic.util.io.XMLUtil.NodeListWrapper.NodeListWrapper(NodeList)",0,1,1,1
"org.jabref.logic.util.io.XMLUtil.NodeListWrapper.get(int)",0,1,1,1
"org.jabref.logic.util.io.XMLUtil.NodeListWrapper.size()",0,1,1,1
"org.jabref.logic.util.io.XMLUtil.XMLUtil()",0,1,1,1
"org.jabref.logic.util.io.XMLUtil.asList(NodeList)",1,1,2,2
"org.jabref.logic.util.io.XMLUtil.getAttributeContent(Node,String)",0,1,1,1
"org.jabref.logic.util.io.XMLUtil.getNode(Node,String)",0,1,1,1
"org.jabref.logic.util.io.XMLUtil.getNodeContent(Node,String)",3,3,3,3
"org.jabref.logic.util.io.XMLUtil.getNodesByName(Node,String)",1,2,2,2
"org.jabref.logic.util.io.XMLUtil.printDocument(Document)",1,1,2,2
"org.jabref.logic.util.strings.HTMLUnicodeConversionMaps.HTMLUnicodeConversionMaps()",0,1,1,1
"org.jabref.logic.util.strings.HTMLUnicodeConversionMaps.cleanLaTeX(String)",0,1,1,1
"org.jabref.logic.util.strings.QuotedStringTokenizer.QuotedStringTokenizer(String,String,char)",2,1,2,3
"org.jabref.logic.util.strings.QuotedStringTokenizer.hasMoreTokens()",0,1,1,1
"org.jabref.logic.util.strings.QuotedStringTokenizer.isDelimiter(char)",0,1,1,1
"org.jabref.logic.util.strings.QuotedStringTokenizer.nextToken()",8,4,5,5
"org.jabref.logic.util.strings.RtfCharMap.RtfCharMap()",0,1,1,1
"org.jabref.logic.util.strings.RtfCharMap.get(String)",0,1,1,1
"org.jabref.logic.util.strings.RtfCharMap.put(String,String)",0,1,1,1
"org.jabref.logic.util.strings.StringLengthComparator.compare(String,String)",2,3,2,3
"org.jabref.logic.util.strings.StringLengthComparatorTest.compareStringLength(int,String,String)",0,1,1,1
"org.jabref.logic.util.strings.StringLengthComparatorTest.setUp()",0,1,1,1
"org.jabref.logic.util.strings.StringLengthComparatorTest.tests()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulator.Direction.Direction(int)",0,1,1,1
"org.jabref.logic.util.strings.StringManipulator.backwardKillWord(int,String)",0,1,1,1
"org.jabref.logic.util.strings.StringManipulator.capitalize(int,String)",0,1,1,1
"org.jabref.logic.util.strings.StringManipulator.deleteUntilWordBoundary(int,String,Direction)",1,1,3,3
"org.jabref.logic.util.strings.StringManipulator.getNextWordBoundary(int,String,Direction)",14,1,7,11
"org.jabref.logic.util.strings.StringManipulator.killWord(int,String)",0,1,1,1
"org.jabref.logic.util.strings.StringManipulator.lowercase(int,String)",0,1,1,1
"org.jabref.logic.util.strings.StringManipulator.setWordCase(String,int,LetterCase)",3,1,5,6
"org.jabref.logic.util.strings.StringManipulator.uppercase(int,String)",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testBackwardsKillWordTrimsPreceedingWhitespace()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testCapitalizePreservesNewlines()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testGetNextWordBoundary(String,int,int,Direction)",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testKillPreviousWord()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testKillWordRemovesFromPositionUpToNextWord()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testKillWordRemovesNextWordIfPositionIsInSpace()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testKillWordTrimsTrailingWhitespace()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testLowercaseEditsTheNextWord()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testUppercaseIgnoresTrailingWhitespace()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testUppercasePreservesDoubleSpace()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testUppercasePreservesMixedSpaceNewLineTab()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testUppercasePreservesNewlines()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testUppercasePreservesSpace()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.testUppercasePreservesTab()",0,1,1,1
"org.jabref.logic.util.strings.StringManipulatorTest.wordBoundaryTestData()",0,1,1,1
"org.jabref.logic.util.strings.StringSimilarity.editDistanceIgnoreCase(String,String)",0,1,1,1
"org.jabref.logic.util.strings.StringSimilarity.isSimilar(String,String)",0,1,1,1
"org.jabref.logic.util.strings.StringSimilarityTest.testStringSimilarity(String,String,String)",0,1,1,1
"org.jabref.logic.util.strings.UnicodeLigaturesMap.UnicodeLigaturesMap()",0,1,1,1
"org.jabref.logic.util.strings.XmlCharsMap.XmlCharsMap()",0,1,1,1
"org.jabref.logic.xmp.DocumentInformationExtractor.DocumentInformationExtractor(PDDocumentInformation)",0,1,1,1
"org.jabref.logic.xmp.DocumentInformationExtractor.extractAuthor()",1,1,2,2
"org.jabref.logic.xmp.DocumentInformationExtractor.extractBibtexEntry()",2,2,2,2
"org.jabref.logic.xmp.DocumentInformationExtractor.extractKeywords()",1,1,2,2
"org.jabref.logic.xmp.DocumentInformationExtractor.extractOtherFields()",7,1,4,4
"org.jabref.logic.xmp.DocumentInformationExtractor.extractSubject()",1,1,2,2
"org.jabref.logic.xmp.DocumentInformationExtractor.extractTitle()",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.DublinCoreExtractor(DublinCoreSchema,XmpPreferences,BibEntry)",0,1,1,1
"org.jabref.logic.xmp.DublinCoreExtractor.extractAbstract()",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.extractAuthor()",2,1,3,3
"org.jabref.logic.xmp.DublinCoreExtractor.extractBibTexFields()",6,1,4,4
"org.jabref.logic.xmp.DublinCoreExtractor.extractBibtexEntry()",1,2,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.extractDOI()",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.extractEditor()",2,1,3,3
"org.jabref.logic.xmp.DublinCoreExtractor.extractPublisher()",2,1,3,3
"org.jabref.logic.xmp.DublinCoreExtractor.extractRights()",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.extractSource()",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.extractSubject()",2,1,3,3
"org.jabref.logic.xmp.DublinCoreExtractor.extractTitle()",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.extractType()",4,1,4,4
"org.jabref.logic.xmp.DublinCoreExtractor.extractYearAndMonth()",10,1,6,7
"org.jabref.logic.xmp.DublinCoreExtractor.fillContributor(String)",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.fillCreator(String)",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.fillCustomField(Field,String)",0,1,1,1
"org.jabref.logic.xmp.DublinCoreExtractor.fillDate()",0,1,1,1
"org.jabref.logic.xmp.DublinCoreExtractor.fillDescription(String)",0,1,1,1
"org.jabref.logic.xmp.DublinCoreExtractor.fillDublinCoreSchema()",15,3,12,13
"org.jabref.logic.xmp.DublinCoreExtractor.fillIdentifier(String)",0,1,1,1
"org.jabref.logic.xmp.DublinCoreExtractor.fillKeywords(String)",1,1,2,2
"org.jabref.logic.xmp.DublinCoreExtractor.fillPublisher(String)",0,1,1,1
"org.jabref.logic.xmp.DublinCoreExtractor.fillTitle(String)",0,1,1,1
"org.jabref.logic.xmp.XmpPreferences.XmpPreferences(boolean,Set<Field>,Character)",0,1,1,1
"org.jabref.logic.xmp.XmpPreferences.getKeywordSeparator()",0,1,1,1
"org.jabref.logic.xmp.XmpPreferences.getXmpPrivacyFilter()",0,1,1,1
"org.jabref.logic.xmp.XmpPreferences.shouldUseXmpPrivacyFilter()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReader.XmpUtilReader()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReader.getXmpMetadata(PDDocument)",4,3,4,6
"org.jabref.logic.xmp.XmpUtilReader.loadWithAutomaticDecryption(Path)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReader.readRawXmp(Path)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReader.readXmp(Path,XmpPreferences)",11,1,6,6
"org.jabref.logic.xmp.XmpUtilReader.readXmp(String,XmpPreferences)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReaderTest.setUp()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReaderTest.testReadArticleDublinCoreReadRawXmp()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReaderTest.testReadArticleDublinCoreReadXmp()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReaderTest.testReadEmtpyMetadata()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReaderTest.testReadNoDescriptionMetadata()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilReaderTest.testReadPDMetadata()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilShared.XmpUtilShared()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilShared.hasMetadata(Path,XmpPreferences)",2,1,3,3
"org.jabref.logic.xmp.XmpUtilShared.parseXmpMetadata(InputStream)",1,1,1,2
"org.jabref.logic.xmp.XmpUtilWriter.generateXmpStringWithXmpDeclaration(List<BibEntry>,XmpPreferences)",4,1,5,5
"org.jabref.logic.xmp.XmpUtilWriter.generateXmpStringWithoutXmpDeclaration(List<BibEntry>,XmpPreferences)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriter.getDefaultOrDatabaseEntry(BibEntry,BibDatabase)",2,2,2,2
"org.jabref.logic.xmp.XmpUtilWriter.writeDocumentInformation(PDDocument,BibEntry,BibDatabase,XmpPreferences)",17,3,12,12
"org.jabref.logic.xmp.XmpUtilWriter.writeDublinCore(PDDocument,List<BibEntry>,BibDatabase,XmpPreferences)",7,1,5,5
"org.jabref.logic.xmp.XmpUtilWriter.writeToDCSchema(DublinCoreSchema,BibEntry,BibDatabase,XmpPreferences)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriter.writeToDCSchema(DublinCoreSchema,BibEntry,XmpPreferences)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriter.writeXmp(Path,BibEntry,BibDatabase,XmpPreferences)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriter.writeXmp(Path,List<BibEntry>,BibDatabase,XmpPreferences)",5,2,4,5
"org.jabref.logic.xmp.XmpUtilWriter.writeXmp(String,BibEntry,BibDatabase,XmpPreferences)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriterTest.createDefaultFile(String,Path)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriterTest.initBibEntries()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriterTest.setUp()",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriterTest.testWriteMultipleBibEntries(Path)",0,1,1,1
"org.jabref.logic.xmp.XmpUtilWriterTest.testWriteXmp(Path)",0,1,1,1
"org.jabref.migrations.ConvertLegacyExplicitGroups.getExplicitGroupsWithLegacyKeys(GroupTreeNode)",3,1,3,3
"org.jabref.migrations.ConvertLegacyExplicitGroups.performMigration(ParserResult)",7,2,4,5
"org.jabref.migrations.ConvertLegacyExplicitGroupsTest.generateParserResult(GroupTreeNode)",0,1,1,1
"org.jabref.migrations.ConvertLegacyExplicitGroupsTest.performActionClearsLegacyKeys()",0,1,1,1
"org.jabref.migrations.ConvertLegacyExplicitGroupsTest.performActionWritesGroupMembershipInEntry()",0,1,1,1
"org.jabref.migrations.ConvertLegacyExplicitGroupsTest.performActionWritesGroupMembershipInEntryForComplexGroupTree()",0,1,1,1
"org.jabref.migrations.ConvertLegacyExplicitGroupsTest.setUp()",0,1,1,1
"org.jabref.migrations.ConvertMarkingToGroups.clearMarkings(List<BibEntry>)",0,1,1,1
"org.jabref.migrations.ConvertMarkingToGroups.getMarkingWithEntries(List<BibEntry>)",6,3,3,4
"org.jabref.migrations.ConvertMarkingToGroups.performMigration(ParserResult)",5,1,4,4
"org.jabref.migrations.ConvertMarkingToGroupsTest.performMigrationForSingleEntry()",0,1,1,1
"org.jabref.migrations.CustomEntryTypePreferenceMigration.CustomEntryTypePreferenceMigration()",0,1,1,1
"org.jabref.migrations.CustomEntryTypePreferenceMigration.getBibEntryType(int)",3,3,3,3
"org.jabref.migrations.CustomEntryTypePreferenceMigration.upgradeStoredBibEntryTypes(BibDatabaseMode)",1,1,2,2
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest.commentField()",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest.createMinimalBibEntry()",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest.multiLineReviewField()",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest.noFields()",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest.reviewAndCommentField()",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest.reviewField()",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest.setUp()",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentMigration.collectConflicts(ParserResult)",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentMigration.hasCommentField(BibEntry)",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentMigration.hasReviewField(BibEntry)",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentMigration.mergeCommentFieldIfPresent(BibEntry,String)",1,2,2,2
"org.jabref.migrations.MergeReviewIntoCommentMigration.migrate(BibEntry,ParserResult)",1,1,2,2
"org.jabref.migrations.MergeReviewIntoCommentMigration.needsMigration(ParserResult)",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentMigration.performConflictingMigration(ParserResult)",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentMigration.performMigration(ParserResult)",0,1,1,1
"org.jabref.migrations.MergeReviewIntoCommentMigration.updateFields(BibEntry,String)",0,1,1,1
"org.jabref.migrations.PreferencesMigrations.PreferencesMigrations()",0,1,1,1
"org.jabref.migrations.PreferencesMigrations.addCrossRefRelatedFieldsForAutoComplete(JabRefPreferences)",0,1,1,1
"org.jabref.migrations.PreferencesMigrations.changeColumnVariableNamesFor51(JabRefPreferences)",2,1,3,3
"org.jabref.migrations.PreferencesMigrations.copyPrefsRecursively(Preferences,Preferences)",5,1,4,4
"org.jabref.migrations.PreferencesMigrations.migrateFileImportPattern(String,String,JabRefPreferences,Preferences)",7,1,5,5
"org.jabref.migrations.PreferencesMigrations.migrateTypedKeyPrefs(JabRefPreferences,Preferences)",1,1,2,2
"org.jabref.migrations.PreferencesMigrations.restoreVariablesForBackwardCompatibility(JabRefPreferences)",8,2,5,6
"org.jabref.migrations.PreferencesMigrations.runMigrations()",0,1,1,1
"org.jabref.migrations.PreferencesMigrations.upgradeColumnPreferences(JabRefPreferences)",9,1,5,6
"org.jabref.migrations.PreferencesMigrations.upgradeFaultyEncodingStrings(JabRefPreferences)",2,2,2,3
"org.jabref.migrations.PreferencesMigrations.upgradeImportFileAndDirePatterns(JabRefPreferences,Preferences)",5,1,4,4
"org.jabref.migrations.PreferencesMigrations.upgradeKeyBindingsToJavaFX(JabRefPreferences)",0,1,1,1
"org.jabref.migrations.PreferencesMigrations.upgradeLabelPatternToCitationKeyPattern(JabRefPreferences)",8,2,7,8
"org.jabref.migrations.PreferencesMigrations.upgradePrefsToOrgJabRef(Preferences)",5,1,4,4
"org.jabref.migrations.PreferencesMigrations.upgradePreviewStyleAllowMarkdown(JabRefPreferences)",0,1,1,1
"org.jabref.migrations.PreferencesMigrations.upgradePreviewStyleFromReviewToComment(JabRefPreferences)",0,1,1,1
"org.jabref.migrations.PreferencesMigrations.upgradeSortOrder(JabRefPreferences)",4,1,4,4
"org.jabref.migrations.PreferencesMigrations.upgradeStoredBibEntryTypes(JabRefPreferences,Preferences)",4,1,4,4
"org.jabref.migrations.PreferencesMigrationsTest.setUp()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testArbitraryBibtexkeyPattern()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testChangeColumnPreferencesVariableNamesBackwardsCompatibility()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testChangeColumnPreferencesVariableNamesFor51()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testOldStyleBibtexkeyPattern0()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testOldStyleBibtexkeyPattern1()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testPreviewStyle()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testRestoreColumnVariablesForBackwardCompatibility()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testUpgradeColumnPreferencesAlreadyMigrated()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.testUpgradeColumnPreferencesFromWithoutTypes()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.upgradePreviewStyleAllowMarkupCustomized()",0,1,1,1
"org.jabref.migrations.PreferencesMigrationsTest.upgradePreviewStyleAllowMarkupDefault()",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFields.SpecialFieldsToSeparateFields(Character)",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFields.getMigrationTable()",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFields.migrateEntry(BibEntry)",4,1,4,4
"org.jabref.migrations.SpecialFieldsToSeparateFields.performMigration(ParserResult)",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFieldsTest.migrateMultipleSpecialFields()",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFieldsTest.migrateSpecialFieldsMixedWithKeyword()",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFieldsTest.migrateToCorrectField(SpecialField,String,BibEntry)",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFieldsTest.noKewordToMigrate()",0,1,1,1
"org.jabref.migrations.SpecialFieldsToSeparateFieldsTest.provideKeywordFieldPairs()",0,1,1,1
"org.jabref.model.ChainNode.ChainNode(Class<T>)",1,2,1,2
"org.jabref.model.ChainNode.addAtEnd(T)",2,1,2,2
"org.jabref.model.ChainNode.getChild()",0,1,1,1
"org.jabref.model.ChainNode.getParent()",0,1,1,1
"org.jabref.model.ChainNode.isAncestorOf(T)",2,2,2,2
"org.jabref.model.ChainNode.moveTo(T)",1,2,1,2
"org.jabref.model.ChainNode.removeChild()",1,1,2,2
"org.jabref.model.ChainNode.setChild(T)",1,2,1,2
"org.jabref.model.ChainNode.setParent(T)",0,1,1,1
"org.jabref.model.FieldChange.FieldChange(BibEntry,Field,String,String)",0,1,1,1
"org.jabref.model.FieldChange.equals(Object)",23,13,6,13
"org.jabref.model.FieldChange.getEntry()",0,1,1,1
"org.jabref.model.FieldChange.getField()",0,1,1,1
"org.jabref.model.FieldChange.getNewValue()",0,1,1,1
"org.jabref.model.FieldChange.getOldValue()",0,1,1,1
"org.jabref.model.FieldChange.hashCode()",0,1,1,1
"org.jabref.model.FieldChange.toString()",0,1,1,1
"org.jabref.model.FieldChangeTest.blankFieldChangeNotAllowed()",0,1,1,1
"org.jabref.model.FieldChangeTest.differentFieldChangeIsNotEqual()",0,1,1,1
"org.jabref.model.FieldChangeTest.equalFieldChange()",0,1,1,1
"org.jabref.model.FieldChangeTest.fieldChangeDoesNotEqualString()",0,1,1,1
"org.jabref.model.FieldChangeTest.fieldChangeEqualsItSelf()",0,1,1,1
"org.jabref.model.FieldChangeTest.fieldChangeOnNullEntryNotAllowed()",0,1,1,1
"org.jabref.model.FieldChangeTest.fieldChangeOnNullFieldNotAllowed()",0,1,1,1
"org.jabref.model.TreeNode.TreeNode(Class<T>)",1,2,1,2
"org.jabref.model.TreeNode.addChild(T)",0,1,1,1
"org.jabref.model.TreeNode.addChild(T,int)",1,2,1,2
"org.jabref.model.TreeNode.childIndexExists(int)",1,1,2,2
"org.jabref.model.TreeNode.copySubtree()",1,1,2,2
"org.jabref.model.TreeNode.findChildrenSatisfying(Predicate<T>)",2,1,3,3
"org.jabref.model.TreeNode.getChildAt(int)",1,1,2,2
"org.jabref.model.TreeNode.getChildren()",0,1,1,1
"org.jabref.model.TreeNode.getDescendant(List<Integer>)",4,3,3,3
"org.jabref.model.TreeNode.getFirstChild()",0,1,1,1
"org.jabref.model.TreeNode.getIndexOfChild(T)",2,2,2,2
"org.jabref.model.TreeNode.getIndexedPathFromRoot()",1,2,1,2
"org.jabref.model.TreeNode.getLastChild()",0,1,1,1
"org.jabref.model.TreeNode.getLevel()",1,2,1,2
"org.jabref.model.TreeNode.getNextSibling()",0,1,1,1
"org.jabref.model.TreeNode.getNumberOfChildren()",0,1,1,1
"org.jabref.model.TreeNode.getParent()",0,1,1,1
"org.jabref.model.TreeNode.getPathFromRoot()",1,2,2,2
"org.jabref.model.TreeNode.getPositionInParent()",0,1,1,1
"org.jabref.model.TreeNode.getPreviousSibling()",0,1,1,1
"org.jabref.model.TreeNode.getRelativeSibling(int)",5,3,3,3
"org.jabref.model.TreeNode.getRoot()",2,2,2,2
"org.jabref.model.TreeNode.isAncestorOf(T)",7,4,3,4
"org.jabref.model.TreeNode.isLeaf()",0,1,1,1
"org.jabref.model.TreeNode.isNodeDescendant(T)",0,1,1,1
"org.jabref.model.TreeNode.isRoot()",0,1,1,1
"org.jabref.model.TreeNode.moveAllChildrenTo(T,int)",1,1,2,2
"org.jabref.model.TreeNode.moveTo(T)",3,1,3,3
"org.jabref.model.TreeNode.moveTo(T,int)",2,2,2,3
"org.jabref.model.TreeNode.notifyAboutDescendantChange(T)",1,1,2,2
"org.jabref.model.TreeNode.removeAllChildren()",1,1,2,2
"org.jabref.model.TreeNode.removeChild(T)",0,1,1,1
"org.jabref.model.TreeNode.removeChild(int)",1,1,2,2
"org.jabref.model.TreeNode.removeFromParent()",1,1,2,2
"org.jabref.model.TreeNode.setParent(T)",0,1,1,1
"org.jabref.model.TreeNode.sortChildren(Comparator<? super T>,boolean)",10,2,6,7
"org.jabref.model.TreeNode.subscribeToDescendantChanged(Consumer<T>)",0,1,1,1
"org.jabref.model.TreeNodeTest.WrongTreeNodeImplementation.WrongTreeNodeImplementation()",0,1,1,1
"org.jabref.model.TreeNodeTest.WrongTreeNodeImplementation.copyNode()",0,1,1,1
"org.jabref.model.TreeNodeTest.addChildSomewhereInTreeInvokesChangeEvent()",0,1,1,1
"org.jabref.model.TreeNodeTest.addThrowsExceptionIfNodeHasParent()",0,1,1,1
"org.jabref.model.TreeNodeTest.constructorChecksThatClassImplementsCorrectInterface()",0,1,1,1
"org.jabref.model.TreeNodeTest.constructorExceptsCorrectImplementation()",0,1,1,1
"org.jabref.model.TreeNodeTest.copySubtreeCopiesChildren()",0,1,1,1
"org.jabref.model.TreeNodeTest.findChildrenWithSameName()",0,1,1,1
"org.jabref.model.TreeNodeTest.getChildAtInvalidIndexReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getChildAtReturnsCorrect()",0,1,1,1
"org.jabref.model.TreeNodeTest.getChildCountInComplexTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getChildCountInSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getChildrenReturnsAllChildren()",0,1,1,1
"org.jabref.model.TreeNodeTest.getDescendantComplexPath()",0,1,1,1
"org.jabref.model.TreeNodeTest.getDescendantNonExistentReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getDescendantSimplePath()",0,1,1,1
"org.jabref.model.TreeNodeTest.getFirstChildAtLeafReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getFirstChildAtReturnsCorrect()",0,1,1,1
"org.jabref.model.TreeNodeTest.getIndexOfChild()",0,1,1,1
"org.jabref.model.TreeNodeTest.getIndexOfNonExistentChildReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getIndexedPathFromRootComplexPath()",0,1,1,1
"org.jabref.model.TreeNodeTest.getIndexedPathFromRootReturnsEmptyListForRoot()",0,1,1,1
"org.jabref.model.TreeNodeTest.getIndexedPathFromRootSimplePath()",0,1,1,1
"org.jabref.model.TreeNodeTest.getLevelInComplexTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getLevelInSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getLevelOfRoot()",0,1,1,1
"org.jabref.model.TreeNodeTest.getNextSiblingForNonexistentReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getNextSiblingForRootReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getNextSiblingReturnsCorrect()",0,1,1,1
"org.jabref.model.TreeNodeTest.getParentForRootReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getParentReturnsCorrect()",0,1,1,1
"org.jabref.model.TreeNodeTest.getPathFromRootInComplexTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getPathFromRootInSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getPositionInParentForRootThrowsException()",0,1,1,1
"org.jabref.model.TreeNodeTest.getPositionInParentSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getPreviousSiblingForNonexistentReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getPreviousSiblingForRootReturnsEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.getPreviousSiblingReturnsCorrect()",0,1,1,1
"org.jabref.model.TreeNodeTest.getRootInComplexTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getRootInSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.getRootOfSingleNode()",0,1,1,1
"org.jabref.model.TreeNodeTest.getRootReturnsFalseForChild()",0,1,1,1
"org.jabref.model.TreeNodeTest.getRootReturnsTrueForRoot()",0,1,1,1
"org.jabref.model.TreeNodeTest.isAncestorOfInComplexTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.isAncestorOfInSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.isLeafIsCorrectForRootWithoutChildren()",0,1,1,1
"org.jabref.model.TreeNodeTest.isNodeDescendantInComplex()",0,1,1,1
"org.jabref.model.TreeNodeTest.isNodeDescendantInFirstLevel()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveAllChildrenToAddsAtSpecifiedPosition()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveAllChildrenToChangesParent()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveAllChildrenToDescendantThrowsException()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveNodeSomewhereInTreeInvokesChangeEvent()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveToAddsAsLastChildInComplexTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveToAddsAsLastChildInSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveToChangesParent()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveToInSameLevelAddsAtEnd()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveToInSameLevelWhenNodeWasAfterTargetIndex()",0,1,1,1
"org.jabref.model.TreeNodeTest.moveToInSameLevelWhenNodeWasBeforeTargetIndex()",0,1,1,1
"org.jabref.model.TreeNodeTest.newTreeNodeHasNoParentOrChildren()",0,1,1,1
"org.jabref.model.TreeNodeTest.nodeIsAncestorOfItself()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeAllChildrenRemovesAllNodesFromChildrenCollection()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeAllChildrenSetsParentOfChildToEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeChildIndexRemovesNodeFromChildrenCollection()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeChildIndexSetsParentToEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeChildIndexSomewhereInTreeInvokesChangeEvent()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeChildRemovesNodeFromChildrenCollection()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeChildSetsParentToEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeChildSomewhereInTreeInvokesChangeEvent()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeFromParentRemovesNodeFromChildrenCollection()",0,1,1,1
"org.jabref.model.TreeNodeTest.removeFromParentSetsParentToEmpty()",0,1,1,1
"org.jabref.model.TreeNodeTest.setUp()",0,1,1,1
"org.jabref.model.TreeNodeTest.sortChildrenRecursiveSortsInDeeperLevel()",0,1,1,1
"org.jabref.model.TreeNodeTest.sortChildrenSortsInFirstLevel()",0,1,1,1
"org.jabref.model.TreeNodeTestData.TreeNodeMock.TreeNodeMock()",0,1,1,1
"org.jabref.model.TreeNodeTestData.TreeNodeMock.TreeNodeMock(String)",0,1,1,1
"org.jabref.model.TreeNodeTestData.TreeNodeMock.copyNode()",0,1,1,1
"org.jabref.model.TreeNodeTestData.TreeNodeMock.getName()",0,1,1,1
"org.jabref.model.TreeNodeTestData.TreeNodeMock.setName(String)",0,1,1,1
"org.jabref.model.TreeNodeTestData.TreeNodeMock.toString()",0,1,1,1
"org.jabref.model.TreeNodeTestData.getNodeAsChild(TreeNodeMock)",0,1,1,1
"org.jabref.model.TreeNodeTestData.getNodeInComplexTree()",0,1,1,1
"org.jabref.model.TreeNodeTestData.getNodeInComplexTree(TreeNodeMock)",0,1,1,1
"org.jabref.model.TreeNodeTestData.getNodeInSimpleTree()",0,1,1,1
"org.jabref.model.TreeNodeTestData.getNodeInSimpleTree(TreeNodeMock)",0,1,1,1
"org.jabref.model.database.BibDatabase.BibDatabase()",0,1,1,1
"org.jabref.model.database.BibDatabase.BibDatabase(List<BibEntry>)",0,1,1,1
"org.jabref.model.database.BibDatabase.BibDatabase(List<BibEntry>,String)",0,1,1,1
"org.jabref.model.database.BibDatabase.addString(BibtexString)",2,3,1,3
"org.jabref.model.database.BibDatabase.clearSharedDatabaseID()",0,1,1,1
"org.jabref.model.database.BibDatabase.containsEntryWithId(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.copyPreamble(BibDatabase)",0,1,1,1
"org.jabref.model.database.BibDatabase.generateSharedDatabaseID()",0,1,1,1
"org.jabref.model.database.BibDatabase.getAllVisibleFields()",1,1,2,2
"org.jabref.model.database.BibDatabase.getEntries()",0,1,1,1
"org.jabref.model.database.BibDatabase.getEntriesByCitationKey(String)",4,1,3,3
"org.jabref.model.database.BibDatabase.getEntriesSorted(Comparator<BibEntry>)",0,1,1,1
"org.jabref.model.database.BibDatabase.getEntryByCitationKey(String)",3,3,3,3
"org.jabref.model.database.BibDatabase.getEntryCount()",0,1,1,1
"org.jabref.model.database.BibDatabase.getEpilog()",0,1,1,1
"org.jabref.model.database.BibDatabase.getNewLineSeparator()",0,1,1,1
"org.jabref.model.database.BibDatabase.getNumberOfCitationKeyOccurrences(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.getPreamble()",2,2,2,2
"org.jabref.model.database.BibDatabase.getReferencedEntry(BibEntry)",0,1,1,1
"org.jabref.model.database.BibDatabase.getSharedDatabaseID()",0,1,1,1
"org.jabref.model.database.BibDatabase.getString(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.getStringByName(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.getStringCount()",0,1,1,1
"org.jabref.model.database.BibDatabase.getStringKeySet()",0,1,1,1
"org.jabref.model.database.BibDatabase.getStringValues()",0,1,1,1
"org.jabref.model.database.BibDatabase.getText(String,BibDatabase)",2,2,2,3
"org.jabref.model.database.BibDatabase.getUsedStrings(Collection<BibEntry>)",5,1,5,5
"org.jabref.model.database.BibDatabase.hasEntries()",0,1,1,1
"org.jabref.model.database.BibDatabase.hasNoStrings()",0,1,1,1
"org.jabref.model.database.BibDatabase.hasStringByName(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.insertEntries(BibEntry...)",0,1,1,1
"org.jabref.model.database.BibDatabase.insertEntries(List<BibEntry>)",0,1,1,1
"org.jabref.model.database.BibDatabase.insertEntries(List<BibEntry>,EntriesEventSource)",3,1,3,3
"org.jabref.model.database.BibDatabase.insertEntry(BibEntry)",0,1,1,1
"org.jabref.model.database.BibDatabase.insertEntry(BibEntry,EntriesEventSource)",0,1,1,1
"org.jabref.model.database.BibDatabase.isDuplicateCitationKeyExisting(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.isShared()",0,1,1,1
"org.jabref.model.database.BibDatabase.registerListener(Object)",0,1,1,1
"org.jabref.model.database.BibDatabase.relayEntryChangeEvent(FieldChangedEvent)",0,1,1,1
"org.jabref.model.database.BibDatabase.removeEntries(List<BibEntry>)",0,1,1,1
"org.jabref.model.database.BibDatabase.removeEntries(List<BibEntry>,EntriesEventSource)",2,1,3,3
"org.jabref.model.database.BibDatabase.removeEntry(BibEntry)",0,1,1,1
"org.jabref.model.database.BibDatabase.removeEntry(BibEntry,EntriesEventSource)",0,1,1,1
"org.jabref.model.database.BibDatabase.removeString(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.resolveContent(String,Set<String>,Set<String>)",17,4,7,7
"org.jabref.model.database.BibDatabase.resolveForStrings(BibEntry,boolean)",3,1,3,3
"org.jabref.model.database.BibDatabase.resolveForStrings(Collection<BibEntry>,boolean)",1,1,2,2
"org.jabref.model.database.BibDatabase.resolveForStrings(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.resolveString(String,Set<String>,Set<String>)",9,4,5,5
"org.jabref.model.database.BibDatabase.setEpilog(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.setNewLineSeparator(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.setPreamble(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.setSharedDatabaseID(String)",0,1,1,1
"org.jabref.model.database.BibDatabase.setStrings(List<BibtexString>)",0,1,1,1
"org.jabref.model.database.BibDatabase.unregisterListener(Object)",1,1,2,2
"org.jabref.model.database.BibDatabaseContext.BibDatabaseContext()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.BibDatabaseContext(BibDatabase)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.BibDatabaseContext(BibDatabase,MetaData)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.BibDatabaseContext(BibDatabase,MetaData,Path)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.BibDatabaseContext(BibDatabase,MetaData,Path,DatabaseLocation)",1,1,2,2
"org.jabref.model.database.BibDatabaseContext.clearDBMSSynchronizer()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.clearDatabasePath()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.convertToLocalDatabase()",2,1,3,3
"org.jabref.model.database.BibDatabaseContext.convertToSharedDatabase(DatabaseSynchronizer)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getDBMSSynchronizer()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getDatabase()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getDatabasePath()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getEntries()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getFileDirectories(FilePreferences)",4,1,3,3
"org.jabref.model.database.BibDatabaseContext.getFileDirectoryPath(String)",2,2,3,3
"org.jabref.model.database.BibDatabaseContext.getFirstExistingFileDir(FilePreferences)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getFulltextIndexBasePath()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getFulltextIndexPath()",1,2,2,2
"org.jabref.model.database.BibDatabaseContext.getLocation()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getMetaData()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.getMode()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.hasEmptyEntries()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.isBiblatexMode()",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.setDatabasePath(Path)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.setMetaData(MetaData)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.setMode(BibDatabaseMode)",0,1,1,1
"org.jabref.model.database.BibDatabaseContext.toString()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.getFileDirectoriesWithAbsoluteDbParent()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.getFileDirectoriesWithEmptyDbParent()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.getFileDirectoriesWithMetadata()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.getFileDirectoriesWithRelativeDbParent()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.getFileDirectoriesWithRelativeDottedDbParent()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.getFileDirectoriesWithRelativeMetadata()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.setUp()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.testGetFullTextIndexPathWhenPathIsNotNull()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.testGetFullTextIndexPathWhenPathIsNull()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.testTypeBasedOnDefaultBiblatex()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.testTypeBasedOnDefaultBibtex()",0,1,1,1
"org.jabref.model.database.BibDatabaseContextTest.testTypeBasedOnInferredModeBiblatex()",0,1,1,1
"org.jabref.model.database.BibDatabaseMode.getAsString()",0,1,1,1
"org.jabref.model.database.BibDatabaseMode.getFormattedName()",2,2,1,2
"org.jabref.model.database.BibDatabaseMode.getOppositeMode()",2,2,1,2
"org.jabref.model.database.BibDatabaseMode.parse(String)",0,1,1,1
"org.jabref.model.database.BibDatabaseModeDetection.BibDatabaseModeDetection()",0,1,1,1
"org.jabref.model.database.BibDatabaseModeDetection.inferMode(BibDatabase)",2,2,1,2
"org.jabref.model.database.BibDatabaseModeDetectionTest.detectBiblatex()",0,1,1,1
"org.jabref.model.database.BibDatabaseModeDetectionTest.detectMixedModeAsBiblatex()",0,1,1,1
"org.jabref.model.database.BibDatabaseModeDetectionTest.detectUndistinguishableAsBibtex()",0,1,1,1
"org.jabref.model.database.BibDatabaseModeDetectionTest.detectUnknownTypeAsBibtex()",0,1,1,1
"org.jabref.model.database.BibDatabaseModeDetectionTest.ignoreUnknownTypesForBiblatexDecision()",0,1,1,1
"org.jabref.model.database.BibDatabaseModeDetectionTest.ignoreUnknownTypesForBibtexDecision()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.addSameStringIdTwiceThrowsKeyCollisionException()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.addSameStringLabelTwiceThrowsKeyCollisionException()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.changingEntryPostsChangeEntryEvent()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.circularStringResolving()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.circularStringResolvingLongerCycle()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.containsEntryIdFindsEntry()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.correctKeyCountAfterRemoving()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.correctKeyCountOne()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.correctKeyCountTwo()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.databaseContainsNewStringInStringValues()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.databaseHasNoStringsAfterRemoval()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.databaseHasStringAfterInsertion()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.databaseReturnsNullForRemovedString()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.databaseStringCountIncreasesAfterStringInsertion()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.databaseStringKeySetIncreasesAfterStringInsertion()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.emptyDatabaseHasNoStrings()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.getEntriesSortedWithTwoEntries()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.getUsedStrings()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.getUsedStringsNoString()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.getUsedStringsSingleString()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.hasStringLabelFindsString()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.insertEntryAddsEntryToEntriesList()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.insertEntryPostsAddedEntryEvent()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.insertEntryWithSameIdDoesNotThrowException()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.insertMultipleEntriesPostsAddedEntryEvent()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.insertNullEntryThrowsException()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.noEmptyEntry()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.preambleIsEmptyIfNotSet()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.removeAllEntriesRemovesAllEntriesFromEntriesList()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.removeEntriesPostsRemovedEntriesEvent()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.removeEntryRemovesEntryFromEntriesList()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.removeNullEntryThrowsException()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.removeSomeEntriesRemovesThoseEntriesFromEntriesList()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.resolveForStringsMonth()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.resolveForStringsOddHashMarkAtTheEnd()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.resolveForStringsSurroundingContent()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.retrieveInsertedStringById()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.setPreambleWorks()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.setSingleStringAsCollection()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.setStringAsCollectionWithNewContent()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.setStringAsCollectionWithUpdatedContentThrowsKeyCollisionException()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.setUp()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.stringCountIsZeroAfterRemoval()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.stringIsNotModifiedAfterInsertion()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.stringKeySetDoesNotContainStringIdAfterRemoval()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.stringKeySizeIsEmptyAfterRemoval()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.stringValuesDoesNotContainStringAfterRemoval()",0,1,1,1
"org.jabref.model.database.BibDatabaseTest.withEmptyEntry()",0,1,1,1
"org.jabref.model.database.BibDatabases.BibDatabases()",0,1,1,1
"org.jabref.model.database.BibDatabases.purgeEmptyEntries(Collection<BibEntry>)",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.addAndRemoveEntry()",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.addEmptyCiteKey()",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.addEntry()",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.changeCiteKey()",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.removeEmptyCiteKey()",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.removeMultipleCiteKeys()",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.setCiteKeySameKeyDifferentEntries()",0,1,1,1
"org.jabref.model.database.DuplicationCheckerTest.setUp()",0,1,1,1
"org.jabref.model.database.KeyChangeListener.KeyChangeListener(BibDatabase)",0,1,1,1
"org.jabref.model.database.KeyChangeListener.listen(EntriesRemovedEvent)",1,1,2,2
"org.jabref.model.database.KeyChangeListener.listen(FieldChangedEvent)",1,1,2,2
"org.jabref.model.database.KeyChangeListener.replaceKeyInMultiplesKeyField(String,String,BibEntry,Field,String)",4,1,3,3
"org.jabref.model.database.KeyChangeListener.replaceSingleKeyInField(String,String,BibEntry,Field,String)",4,1,3,3
"org.jabref.model.database.KeyChangeListener.updateEntryLinks(String,String)",8,1,4,4
"org.jabref.model.database.KeyChangeListenerTest.setUp()",0,1,1,1
"org.jabref.model.database.KeyChangeListenerTest.testCrossrefChanged()",0,1,1,1
"org.jabref.model.database.KeyChangeListenerTest.testCrossrefEntryRemoved()",0,1,1,1
"org.jabref.model.database.KeyChangeListenerTest.testCrossrefRemoved()",0,1,1,1
"org.jabref.model.database.KeyChangeListenerTest.testRelatedAllEntriesRemoved()",0,1,1,1
"org.jabref.model.database.KeyChangeListenerTest.testRelatedChanged()",0,1,1,1
"org.jabref.model.database.KeyChangeListenerTest.testRelatedChangedInSameEntry()",0,1,1,1
"org.jabref.model.database.KeyChangeListenerTest.testRelatedEntryRemoved()",0,1,1,1
"org.jabref.model.database.KeyCollisionException.KeyCollisionException()",0,1,1,1
"org.jabref.model.database.KeyCollisionException.KeyCollisionException(String,String)",0,1,1,1
"org.jabref.model.database.KeyCollisionException.KeyCollisionException(String,Throwable)",0,1,1,1
"org.jabref.model.database.KeyCollisionException.KeyCollisionException(Throwable)",0,1,1,1
"org.jabref.model.database.KeyCollisionException.getId()",0,1,1,1
"org.jabref.model.database.event.AutosaveEventTest.givenNothingWhenCreatingThenNotNull()",0,1,1,1
"org.jabref.model.database.event.BibDatabaseContextChangedEvent.BibDatabaseContextChangedEvent()",0,1,1,1
"org.jabref.model.database.event.BibDatabaseContextChangedEvent.BibDatabaseContextChangedEvent(boolean)",0,1,1,1
"org.jabref.model.database.event.BibDatabaseContextChangedEvent.isFilteredOut()",0,1,1,1
"org.jabref.model.database.event.BibDatabaseContextChangedEvent.setFilteredOut(boolean)",0,1,1,1
"org.jabref.model.database.event.EntriesAddedEvent.EntriesAddedEvent(List<BibEntry>,BibEntry,EntriesEventSource)",0,1,1,1
"org.jabref.model.database.event.EntriesAddedEvent.EntriesAddedEvent(List<BibEntry>,EntriesEventSource)",0,1,1,1
"org.jabref.model.database.event.EntriesAddedEvent.getFirstEntry()",0,1,1,1
"org.jabref.model.database.event.EntriesRemovedEvent.EntriesRemovedEvent(List<BibEntry>)",0,1,1,1
"org.jabref.model.database.event.EntriesRemovedEvent.EntriesRemovedEvent(List<BibEntry>,EntriesEventSource)",0,1,1,1
"org.jabref.model.entry.Author.Author(String,String,String,String,String)",0,1,1,1
"org.jabref.model.entry.Author.addDotIfAbbreviation(String)",41,12,20,27
"org.jabref.model.entry.Author.equals(Object)",3,3,6,7
"org.jabref.model.entry.Author.getFirst()",0,1,1,1
"org.jabref.model.entry.Author.getFirstAbbr()",0,1,1,1
"org.jabref.model.entry.Author.getFirstLast(boolean)",2,1,2,2
"org.jabref.model.entry.Author.getJr()",0,1,1,1
"org.jabref.model.entry.Author.getLast()",0,1,1,1
"org.jabref.model.entry.Author.getLastFirst(boolean)",2,1,2,2
"org.jabref.model.entry.Author.getLastOnly()",4,2,2,3
"org.jabref.model.entry.Author.getNameForAlphabetization()",2,1,3,3
"org.jabref.model.entry.Author.getVon()",0,1,1,1
"org.jabref.model.entry.Author.hashCode()",0,1,1,1
"org.jabref.model.entry.Author.latexFree()",1,1,2,2
"org.jabref.model.entry.Author.properBrackets(String)",6,3,2,5
"org.jabref.model.entry.Author.removeStartAndEndBraces(String)",20,5,8,12
"org.jabref.model.entry.Author.toString()",0,1,1,1
"org.jabref.model.entry.AuthorList.AuthorList(List<Author>)",0,1,1,1
"org.jabref.model.entry.AuthorList.andCoordinatedConjunction(List<Author>,Function<Author, String>,boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.andCoordinatedConjunction(List<String>,boolean)",2,1,3,5
"org.jabref.model.entry.AuthorList.collect()",0,1,1,1
"org.jabref.model.entry.AuthorList.equals(Object)",2,3,1,3
"org.jabref.model.entry.AuthorList.fixAuthorFirstNameFirst(String)",0,1,1,1
"org.jabref.model.entry.AuthorList.fixAuthorFirstNameFirstCommas(String,boolean,boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.fixAuthorForAlphabetization(String)",0,1,1,1
"org.jabref.model.entry.AuthorList.fixAuthorLastNameFirst(String)",0,1,1,1
"org.jabref.model.entry.AuthorList.fixAuthorLastNameFirst(String,boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.fixAuthorLastNameFirstCommas(String,boolean,boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.fixAuthorLastNameOnlyCommas(String,boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.fixAuthorNatbib(String)",0,1,1,1
"org.jabref.model.entry.AuthorList.getAsFirstLastNames(boolean,boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.getAsFirstLastNamesWithAnd()",0,1,1,1
"org.jabref.model.entry.AuthorList.getAsLastFirstFirstLastNamesWithAnd(boolean)",1,1,2,3
"org.jabref.model.entry.AuthorList.getAsLastFirstNames(boolean,boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.getAsLastFirstNamesWithAnd(boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.getAsLastNames(boolean)",0,1,1,1
"org.jabref.model.entry.AuthorList.getAsNatbib()",1,1,3,4
"org.jabref.model.entry.AuthorList.getAuthor(int)",0,1,1,1
"org.jabref.model.entry.AuthorList.getAuthors()",0,1,1,1
"org.jabref.model.entry.AuthorList.getForAlphabetization()",0,1,1,1
"org.jabref.model.entry.AuthorList.getNumberOfAuthors()",0,1,1,1
"org.jabref.model.entry.AuthorList.hashCode()",0,1,1,1
"org.jabref.model.entry.AuthorList.isEmpty()",0,1,1,1
"org.jabref.model.entry.AuthorList.latexFree()",1,1,2,2
"org.jabref.model.entry.AuthorList.of(Author...)",0,1,1,1
"org.jabref.model.entry.AuthorList.of(List<Author>)",0,1,1,1
"org.jabref.model.entry.AuthorList.parse(String)",1,1,2,2
"org.jabref.model.entry.AuthorList.toString()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.correctNamesWithOneComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.createCorrectInitials()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.equalsFalseDifferentOrder()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.equalsFalseForNull()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.equalsFalseWhenNotAuthorList()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.equalsTrueConsistent()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.equalsTrueReflexive()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.equalsTrueSymmetric()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.equalsTrueTransitive()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeEmptyAuthorStringForEmptyInput()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeEmptyAuthorStringForEmptyInputAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeOneInstitutionWithParanthesisAtStart()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeOneInstitutionWithParanthesisAtStartAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeThreeUnicodeAuthorsFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeThreeUnicodeAuthorsFromLatexAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeThreeUnicodeAuthorsFromLatexAbbreviateAndOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeMixedAuthorsFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeMixedAuthorsFromLatexAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeOneAuthorNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeOneAuthorNameFromLatexAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeOneInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeOneInsitutionNameFromLatexAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeTwoAuthorNamesFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeTwoAuthorNamesFromLatexAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeTwoAuthorNamesFromLatexAbbreviateAndOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeTwoInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsFirstLastNamesLatexFreeUnicodeTwoInsitutionNameFromLatexAbbreviate()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeEmptyAuthorStringForEmptyInput()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeEmptyAuthorStringForEmptyInputAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeEmptyAuthorStringForEmptyInputAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeEmptyAuthorStringForEmptyInputOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeOneInstitutionWithParanthesisAtStart()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeOneInstitutionWithParanthesisAtStartAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeOneInstitutionWithParanthesisAtStartAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeOneInstitutionWithParanthesisAtStartOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeThreeUnicodeAuthorsFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeThreeUnicodeAuthorsFromLatexAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeThreeUnicodeAuthorsFromLatexAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeThreeUnicodeAuthorsFromLatexOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeMixedAuthorsFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeMixedAuthorsFromLatexAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeMixedAuthorsFromLatexAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeMixedAuthorsFromLatexOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneAuthorNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneAuthorNameFromLatexAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneAuthorNameFromLatexAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneAuthorNameFromLatexOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneInsitutionNameFromLatexAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneInsitutionNameFromLatexAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeOneInsitutionNameFromLatexOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoAuthorNamesFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoAuthorNamesFromLatexAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoAuthorNamesFromLatexAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoAuthorNamesFromLatexOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoInsitutionNameFromLatexAbbr()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoInsitutionNameFromLatexAbbrOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastFirstNamesLatexFreeUnicodeTwoInsitutionNameFromLatexOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeOneInstitutionWithParanthesisAtStart()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeMixedAuthorsFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeOneAuthorNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeOneInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeThreeAuthorsFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeThreeAuthorsFromLatexUsingOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeTwoAuthorNamesFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeTwoAuthorNamesFromLatexUsingOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsLastNamesLatexFreeUnicodeTwoInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeEmptyAuthorStringForEmptyInput()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeOneInstitutionWithParanthesisAtStart()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeUnicodeAuthorEtAlFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeUnicodeMixedAuthorsFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeUnicodeOneAuthorNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeUnicodeOneInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeUnicodeTwoAuthorNamesFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.getAsNatbibLatexFreeUnicodeTwoInsitutionNameFromLatex()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.hashCodeConsistent()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.hashCodeNotConstant()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseCacheAuthorsWithTwoOrMoreCommasAndWithSpaceInAllParts()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseCacheAuthorsWithTwoOrMoreCommasAndWithoutSpaceInAllParts()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseCachesOneAuthor()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseCachesOneLatexFreeAuthor()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseFirstNameFromFirstAuthorMultipleAuthorsWithLatexNames()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseFirstNameFromSecondAuthorMultipleAuthorsWithLatexNames()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseGarbageCollectAuthorListForUnreachableKey()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseGarbageCollectUnreachableInstitution()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseInstitutionAuthorWithLatexNames()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseLastNameFromFirstAuthorMultipleAuthorsWithLatexNames()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseLastNameFromSecondAuthorMultipleAuthorsWithLatexNames()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithBraces()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithBracesAroundFirstName()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithBracesAroundLastName()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithHyphenInFirstName()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithHyphenInLastName()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithHyphenInLastNameWhenLastNameGivenFirst()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithHyphenInLastNameWithEscaped()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseNameWithHyphenInLastNameWithInitials()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.parseRetrieveCachedAuthorListAfterGarbageCollection()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.size(String)",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testAbbreviationWithRelax()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testCompanyAuthor()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testCompanyAuthorAndPerson()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testCompanyAuthorWithLowerCaseWord()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorFirstNameFirst()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorFirstNameFirstCommas()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorForAlphabetization()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorLastNameFirst()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorLastNameFirstCommasNoComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorLastNameFirstCommasOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorLastNameOnlyCommas()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testFixAuthorNatbib()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthor()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsFirstFirst()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsFirstFirstAnds()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsForAlphabetization()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsLastFirstAnds()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsLastFirstNoComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsLastFirstOxfordComma()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsLastOnly()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetAuthorsNatbib()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testGetEmptyAuthor()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testIsEmpty()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testRemoveStartAndEndBraces()",0,1,1,1
"org.jabref.model.entry.AuthorListTest.testSize()",1,1,2,2
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationAddDot()",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationDoNotAddDot(String)",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationDoesNotAddMultipleSpaces()",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationEndsWithDoubleAbbreviation()",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationEndsWithUpperCaseLetter()",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationEndsWithUpperCaseLetterSpaced()",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationEndsWithWhiteSpaced()",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationIfNameIsNullOrEmpty(String)",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationIfStartsWithNumber(String)",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationLowerCaseLetters(String)",0,1,1,1
"org.jabref.model.entry.AuthorTest.addDotIfAbbreviationStartWithUpperCaseAndHyphen()",0,1,1,1
"org.jabref.model.entry.BibEntry.BibEntry()",0,1,1,1
"org.jabref.model.entry.BibEntry.BibEntry(EntryType)",0,1,1,1
"org.jabref.model.entry.BibEntry.addFile(LinkedFile)",0,1,1,1
"org.jabref.model.entry.BibEntry.addFile(int,LinkedFile)",0,1,1,1
"org.jabref.model.entry.BibEntry.addKeyword(Keyword,Character)",0,1,1,1
"org.jabref.model.entry.BibEntry.addKeyword(String,Character)",1,2,1,2
"org.jabref.model.entry.BibEntry.addKeywords(Collection<String>,Character)",0,1,1,1
"org.jabref.model.entry.BibEntry.addLinkedFile(BibEntry,LinkedFile,LinkedFile,List<LinkedFile>)",6,1,4,5
"org.jabref.model.entry.BibEntry.allFieldsPresent(Collection<OrFields>,BibDatabase)",0,1,1,1
"org.jabref.model.entry.BibEntry.clearCiteKey()",0,1,1,1
"org.jabref.model.entry.BibEntry.clearField(Field)",0,1,1,1
"org.jabref.model.entry.BibEntry.clearField(Field,EntriesEventSource)",1,2,2,2
"org.jabref.model.entry.BibEntry.clone()",0,1,1,1
"org.jabref.model.entry.BibEntry.equals(Object)",4,3,4,6
"org.jabref.model.entry.BibEntry.genericGetFieldOrAlias(Field,BiFunction<BibEntry, Field, Optional<String>>)",20,10,12,13
"org.jabref.model.entry.BibEntry.genericGetResolvedFieldOrAlias(Field,BibDatabase,BiFunction<BibEntry, Field, Optional<String>>)",12,3,10,10
"org.jabref.model.entry.BibEntry.getAuthorTitleYear(int)",2,2,2,3
"org.jabref.model.entry.BibEntry.getCitationKey()",2,2,2,2
"org.jabref.model.entry.BibEntry.getCiteKeyBinding()",0,1,1,1
"org.jabref.model.entry.BibEntry.getDOI()",0,1,1,1
"org.jabref.model.entry.BibEntry.getEntryLinkList(Field,BibDatabase)",0,1,1,1
"org.jabref.model.entry.BibEntry.getField(Field)",0,1,1,1
"org.jabref.model.entry.BibEntry.getFieldAsKeywords(Field,Character)",4,3,4,4
"org.jabref.model.entry.BibEntry.getFieldAsWords(Field)",5,3,3,3
"org.jabref.model.entry.BibEntry.getFieldBinding(Field)",2,2,2,3
"org.jabref.model.entry.BibEntry.getFieldMap()",0,1,1,1
"org.jabref.model.entry.BibEntry.getFieldOrAlias(Field)",0,1,1,1
"org.jabref.model.entry.BibEntry.getFieldOrAliasLatexFree(Field)",0,1,1,1
"org.jabref.model.entry.BibEntry.getFieldValues()",0,1,1,1
"org.jabref.model.entry.BibEntry.getFields()",0,1,1,1
"org.jabref.model.entry.BibEntry.getFieldsObservable()",0,1,1,1
"org.jabref.model.entry.BibEntry.getFiles()",1,2,1,2
"org.jabref.model.entry.BibEntry.getISBN()",0,1,1,1
"org.jabref.model.entry.BibEntry.getId()",0,1,1,1
"org.jabref.model.entry.BibEntry.getKeywords(Character)",0,1,1,1
"org.jabref.model.entry.BibEntry.getLatexFreeField(Field)",7,5,5,5
"org.jabref.model.entry.BibEntry.getMonth()",0,1,1,1
"org.jabref.model.entry.BibEntry.getObservables()",0,1,1,1
"org.jabref.model.entry.BibEntry.getParsedSerialization()",0,1,1,1
"org.jabref.model.entry.BibEntry.getPublicationDate()",0,1,1,1
"org.jabref.model.entry.BibEntry.getResolvedFieldOrAlias(Field,BibDatabase)",0,1,1,1
"org.jabref.model.entry.BibEntry.getResolvedFieldOrAlias(OrFields,BibDatabase)",3,3,2,3
"org.jabref.model.entry.BibEntry.getResolvedFieldOrAliasLatexFree(Field,BibDatabase)",0,1,1,1
"org.jabref.model.entry.BibEntry.getResolvedKeywords(Character,BibDatabase)",0,1,1,1
"org.jabref.model.entry.BibEntry.getSharedBibEntryData()",0,1,1,1
"org.jabref.model.entry.BibEntry.getSourceField(Field,EntryType,EntryType)",71,22,22,80
"org.jabref.model.entry.BibEntry.getTitle()",0,1,1,1
"org.jabref.model.entry.BibEntry.getType()",0,1,1,1
"org.jabref.model.entry.BibEntry.getUserComments()",0,1,1,1
"org.jabref.model.entry.BibEntry.hasChanged()",0,1,1,1
"org.jabref.model.entry.BibEntry.hasCitationKey()",0,1,1,1
"org.jabref.model.entry.BibEntry.hasField(Field)",0,1,1,1
"org.jabref.model.entry.BibEntry.hashCode()",0,1,1,1
"org.jabref.model.entry.BibEntry.invalidateFieldCache(Field)",1,1,2,2
"org.jabref.model.entry.BibEntry.putKeywords(KeywordList,Character)",4,3,3,3
"org.jabref.model.entry.BibEntry.putKeywords(List<String>,Character)",0,1,1,1
"org.jabref.model.entry.BibEntry.registerListener(Object)",0,1,1,1
"org.jabref.model.entry.BibEntry.removeKeywords(KeywordList,Character)",0,1,1,1
"org.jabref.model.entry.BibEntry.replaceKeywords(KeywordList,Keyword,Character)",0,1,1,1
"org.jabref.model.entry.BibEntry.setChanged(boolean)",0,1,1,1
"org.jabref.model.entry.BibEntry.setCitationKey(String)",0,1,1,1
"org.jabref.model.entry.BibEntry.setCommentsBeforeEntry(String)",0,1,1,1
"org.jabref.model.entry.BibEntry.setDate(Date)",0,1,1,1
"org.jabref.model.entry.BibEntry.setEntryLinkList(Field,List<ParsedEntryLink>)",0,1,1,1
"org.jabref.model.entry.BibEntry.setField(Field,String)",0,1,1,1
"org.jabref.model.entry.BibEntry.setField(Field,String,EntriesEventSource)",4,3,4,4
"org.jabref.model.entry.BibEntry.setField(Map<Field, String>)",0,1,1,1
"org.jabref.model.entry.BibEntry.setFiles(List<LinkedFile>)",2,2,3,3
"org.jabref.model.entry.BibEntry.setId(String)",0,1,1,1
"org.jabref.model.entry.BibEntry.setMonth(Month)",0,1,1,1
"org.jabref.model.entry.BibEntry.setParsedSerialization(String)",0,1,1,1
"org.jabref.model.entry.BibEntry.setType(EntryType)",0,1,1,1
"org.jabref.model.entry.BibEntry.setType(EntryType,EntriesEventSource)",1,2,2,2
"org.jabref.model.entry.BibEntry.toString()",0,1,1,1
"org.jabref.model.entry.BibEntry.typeProperty()",0,1,1,1
"org.jabref.model.entry.BibEntry.unregisterListener(Object)",1,1,2,2
"org.jabref.model.entry.BibEntry.withCitationKey(String)",0,1,1,1
"org.jabref.model.entry.BibEntry.withField(Field,String)",0,1,1,1
"org.jabref.model.entry.BibEntryTest.addKeywordIsCaseSensitive()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.addNullKeywordThrowsNPE()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.allFieldsPresentDefault()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.allFieldsPresentOr()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.builderReturnsABibEntryNotChangedFlagged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.changeKeywordsReturnsChange()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.clearFieldWorksForAuthor()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.clearKeywordsReturnsChange()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.clonedBibEntryHasUniqueID()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.clonedBibEntryWithBookTypeAndOneFieldHasOriginalChangedFlag()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.clonedBibEntryWithMiscTypeHasOriginalChangedFlag()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.compareIsTrueWhenIdAndFieldsAreEqual()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.compareToDifferentClassIsFalse()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.compareToNullObjectIsFalse()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldIsCaseInsensitive()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasDateWithOnlyYear()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasDateWithYearAbbreviatedMonth()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasDateWithYearAbbreviatedMonthString()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasDateWithYearNumericalMonthString()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasLatexFreeAlreadyFreeAliasValueIsUnchanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasLatexFreeAlreadyFreeValueIsUnchanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasLatexFreeBracesAreRemoved()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasLatexFreeBracesAreRemovedFromAlias()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasLatexFreeComplexConversionInAlias()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasMonthWithDateYYYYMM()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasMonthWithDateYYYYMMDD()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasMonthWithDateYYYYReturnsNull()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasYearWithDateYYYY()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasYearWithDateYYYYMM()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldOrAliasYearWithDateYYYYMMDD()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getFieldWorksWithBibFieldAsWell()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.getKeywordsReturnsParsedKeywordListFromKeywordsField()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.identicObjectsareEqual()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.isEmptyCiteKey()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.isNullCiteKeyThrowsNPE()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.keywordListCorrectlyConstructedForThreeKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.monthCorrectlyReturnedForCapitalizedMonth()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.monthCorrectlyReturnedForMonth()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.monthCorrectlyReturnedForMonthMay()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.monthCorrectlyReturnedForMonthString()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.monthFieldCorrectlyReturnedForMonthMay()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.newBibEntryIsUnchanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.putKeywordsToEmptyReturnsNoChange()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.putKeywordsToSameReturnsNoChange()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.putNullKeywordListThrowsNPE()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.putNullKeywordSeparatorThrowsNPE()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.removeKeywordsOnEntryWithoutKeywordsDoesNothing()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.removeKeywordsWithEmptyListDoesNothing()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.removeKeywordsWithExistingKeywordsRemovesThem()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.removeKeywordsWithNonExistingKeywordsDoesNothing()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setAndGetAreConsistentForCapitalizedMonth()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setAndGetAreConsistentForMonth()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setAndGetAreConsistentForMonthString()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setFieldLeadsToAChangedEntry()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setFieldWorksForAuthor()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setFieldWorksWithBibFieldAsWell()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setNullFieldThrowsNPE()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.setUp()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.settingCiteKeyLeadsToCorrectCiteKey()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.settingCiteKeyLeadsToHasCiteKy()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.settingTitleFieldsLeadsToChangeFlagged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.settingTypeToNullThrowsException()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.tearDown()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testAddKeywordEmptyKeywordIsNotAdded()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testAddKeywordEmptyKeywordNotChanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testAddKeywordHasChanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testAddKeywordIsCorrect()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testAddKeywordTwiceYiedsOnlyOne()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testAddKeywordWithDifferentCapitalizationChanges()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testAddKeywordsWorksAsExpected()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testDefaultConstructor()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testGetAndAddToLinkedFileList()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testGetEmptyKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testGetEmptyResolvedKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testGetResolvedKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testGetSeparatedKeywordsAreCorrect()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testGetSingleKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testGetSingleResolvedKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testPutKeywordsHasChanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testPutKeywordsOverwritesOldKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testPutKeywordsPutEmpyListErasesPreviousKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testPutKeywordsPutEmpyListHasChanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testPutKeywordsPutEmpyListToEmptyBibentry()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.testPutKeywordsPutEmpyListToEmptyBibentryNotChanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.texNewBibEntryAfterAddingEmptyKeywordNotChanged()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.texNewBibEntryHasNoKeywords()",0,1,1,1
"org.jabref.model.entry.BibEntryTest.texNewBibEntryHasNoKeywordsEvenAfterAddingEmptyKeyword()",0,1,1,1
"org.jabref.model.entry.BibEntryType.BibEntryType(EntryType,Collection<BibField>,Collection<OrFields>)",0,1,1,1
"org.jabref.model.entry.BibEntryType.compareTo(BibEntryType)",0,1,1,1
"org.jabref.model.entry.BibEntryType.equals(Object)",4,3,4,6
"org.jabref.model.entry.BibEntryType.getAllBibFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getAllFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getDeprecatedFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getOptionalFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getOptionalFieldsAndAliases()",3,1,3,3
"org.jabref.model.entry.BibEntryType.getPrimaryOptionalFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getRequiredFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getSecondaryOptionalFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getSecondaryOptionalNotDeprecatedFields()",0,1,1,1
"org.jabref.model.entry.BibEntryType.getType()",0,1,1,1
"org.jabref.model.entry.BibEntryType.hashCode()",0,1,1,1
"org.jabref.model.entry.BibEntryType.isRequired(Field)",0,1,1,1
"org.jabref.model.entry.BibEntryType.toString()",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.build()",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withDetailFields(Collection<Field>)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withDetailFields(Field...)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withImportantFields(Collection<Field>)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withImportantFields(Field...)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withImportantFields(Set<BibField>)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withRequiredFields(Field...)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withRequiredFields(List<OrFields>,Field...)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withRequiredFields(OrFields,Field...)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withRequiredFields(Set<OrFields>)",0,1,1,1
"org.jabref.model.entry.BibEntryTypeBuilder.withType(EntryType)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.BibEntryTypesManager()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes.InternalEntryTypes(List<BibEntryType>)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes.addCustomOrModifiedType(BibEntryType)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes.clearAllCustomEntryTypes()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes.enrich(EntryType)",2,2,2,2
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes.getAllTypes()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes.isCustomOrModifiedType(BibEntryType)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes.removeCustomOrModifiedEntryType(BibEntryType)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.addCustomOrModifiedType(BibEntryType,BibDatabaseMode)",2,1,3,3
"org.jabref.model.entry.BibEntryTypesManager.addCustomOrModifiedTypes(List<BibEntryType>,List<BibEntryType>)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.clearAllCustomEntryTypes(BibDatabaseMode)",2,1,3,3
"org.jabref.model.entry.BibEntryTypesManager.enrich(EntryType,BibDatabaseMode)",1,1,2,2
"org.jabref.model.entry.BibEntryTypesManager.getAllCustomTypes(BibDatabaseMode)",2,2,2,2
"org.jabref.model.entry.BibEntryTypesManager.getAllTypes(BibDatabaseMode)",1,1,2,2
"org.jabref.model.entry.BibEntryTypesManager.isCustomOrModifiedType(BibEntryType,BibDatabaseMode)",1,1,2,2
"org.jabref.model.entry.BibEntryTypesManager.isCustomType(EntryType,BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManager.isDifferentCustomOrModifiedType(BibEntryType,BibDatabaseMode)",2,2,2,2
"org.jabref.model.entry.BibEntryTypesManager.parse(String)",3,3,3,4
"org.jabref.model.entry.BibEntryTypesManager.removeCustomOrModifiedEntryType(BibEntryType,BibDatabaseMode)",2,1,3,3
"org.jabref.model.entry.BibEntryTypesManager.serialize(BibEntryType)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.allTypesBiblatexAreCorrect()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.allTypesBibtexAreCorrect()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.isCustomOrModifiedTypeReturnsTrueForModifiedStandardEntryType(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.mode()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.newCustomEntryTypeFound(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.overwriteBibEntryTypeFields(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.overwriteStandardTypeRequiredFields(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.registerBibEntryTypeDoesNotAffectOtherMode()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.registeredBibEntryTypeIsContainedInListOfCustomizedEntryTypes(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.registeredCustomizedStandardEntryTypeIsNotContainedInListOfCustomEntryTypes(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.setUp()",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.standardTypeIsStillAccessibleIfOverwritten(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.testParsingEmptyOptionalFieldsFieldsReturnsEmpyCollections(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.testParsingEmptyOrFieldsReturnsEmpyCollections(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.testsModifyingArticle(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.testsModifyingArticleWithParsing(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.testsModifyingArticleWithParsingKeepsListOrder(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibEntryTypesManagerTest.unknownTypeIsNotFound(BibDatabaseMode)",0,1,1,1
"org.jabref.model.entry.BibtexString.BibtexString(String,String)",0,1,1,1
"org.jabref.model.entry.BibtexString.Type.Type(String)",0,1,1,1
"org.jabref.model.entry.BibtexString.Type.get(String)",5,5,2,5
"org.jabref.model.entry.BibtexString.clone()",0,1,1,1
"org.jabref.model.entry.BibtexString.equals(Object)",4,3,6,8
"org.jabref.model.entry.BibtexString.getContent()",1,1,1,2
"org.jabref.model.entry.BibtexString.getId()",0,1,1,1
"org.jabref.model.entry.BibtexString.getName()",0,1,1,1
"org.jabref.model.entry.BibtexString.getParsedSerialization()",0,1,1,1
"org.jabref.model.entry.BibtexString.getType()",0,1,1,1
"org.jabref.model.entry.BibtexString.getUserComments()",3,2,2,3
"org.jabref.model.entry.BibtexString.hasChanged()",0,1,1,1
"org.jabref.model.entry.BibtexString.hashCode()",0,1,1,1
"org.jabref.model.entry.BibtexString.setContent(String)",0,1,1,1
"org.jabref.model.entry.BibtexString.setId(String)",0,1,1,1
"org.jabref.model.entry.BibtexString.setName(String)",0,1,1,1
"org.jabref.model.entry.BibtexString.setParsedSerialization(String)",0,1,1,1
"org.jabref.model.entry.BibtexString.toString()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.authorTypeCorrectlyDetermined()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.clonedBibtexStringEqualsOriginalString()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.cloningDoesNotChangeContents()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.getContentNeverReturnsNull()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.idIsUpdatedAtSetId()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.initalizationWorksCorrectly()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.institutionTypeCorrectlyDetermined()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.modifyingACloneDoesNotModifyTheOriginalEntry()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.otherTypeCorrectlyDeterminedForLowerCase()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.otherTypeCorrectlyDeterminedForUpperCase()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.settingFieldsInACloneWorks()",0,1,1,1
"org.jabref.model.entry.BibtexStringTest.usingTheIdGeneratorDoesNotHitTheOriginalId()",0,1,1,1
"org.jabref.model.entry.CanonicalBibEntry.CanonicalBibEntry()",0,1,1,1
"org.jabref.model.entry.CanonicalBibEntry.getCanonicalRepresentation(BibEntry)",4,1,4,4
"org.jabref.model.entry.CanonicalBibEntryTest.canonicalRepresentationIsCorrectForStringMonth()",0,1,1,1
"org.jabref.model.entry.CanonicalBibEntryTest.canonicalRepresentationWithNewlines()",0,1,1,1
"org.jabref.model.entry.CanonicalBibEntryTest.simpleCanonicalRepresentation()",0,1,1,1
"org.jabref.model.entry.CrossrefTest.authorInheritance(EntryType,EntryType)",0,1,1,1
"org.jabref.model.entry.CrossrefTest.authorInheritanceSource()",0,1,1,1
"org.jabref.model.entry.CrossrefTest.bookTitleInheritance(EntryType,EntryType)",0,1,1,1
"org.jabref.model.entry.CrossrefTest.bookTitleInheritanceSource()",0,1,1,1
"org.jabref.model.entry.CrossrefTest.forbiddenFields(StandardField)",0,1,1,1
"org.jabref.model.entry.CrossrefTest.journalTitleInheritance(EntryType,EntryType)",0,1,1,1
"org.jabref.model.entry.CrossrefTest.journalTitleInheritanceSource()",0,1,1,1
"org.jabref.model.entry.CrossrefTest.mainTitleInheritance(EntryType,EntryType)",0,1,1,1
"org.jabref.model.entry.CrossrefTest.mainTitleInheritanceSource()",0,1,1,1
"org.jabref.model.entry.CrossrefTest.noTitleInheritance(EntryType,EntryType)",0,1,1,1
"org.jabref.model.entry.CrossrefTest.noTitleInheritanceSource()",0,1,1,1
"org.jabref.model.entry.CrossrefTest.sameNameInheritance()",0,1,1,1
"org.jabref.model.entry.CrossrefTest.sameNameInheritance(EntryType,EntryType,StandardField)",0,1,1,1
"org.jabref.model.entry.CrossrefTest.setup()",0,1,1,1
"org.jabref.model.entry.Date.Date(TemporalAccessor)",0,1,1,1
"org.jabref.model.entry.Date.Date(int)",0,1,1,1
"org.jabref.model.entry.Date.Date(int,int)",0,1,1,1
"org.jabref.model.entry.Date.Date(int,int,int)",0,1,1,1
"org.jabref.model.entry.Date.convertToInt(String)",1,1,2,2
"org.jabref.model.entry.Date.equals(Object)",4,3,4,6
"org.jabref.model.entry.Date.get(ChronoField)",2,2,2,2
"org.jabref.model.entry.Date.getDay()",0,1,1,1
"org.jabref.model.entry.Date.getMonth()",0,1,1,1
"org.jabref.model.entry.Date.getNormalized()",0,1,1,1
"org.jabref.model.entry.Date.getYear()",0,1,1,1
"org.jabref.model.entry.Date.hashCode()",0,1,1,1
"org.jabref.model.entry.Date.parse(Optional<String>,Optional<String>,Optional<String>)",8,2,4,4
"org.jabref.model.entry.Date.parse(String)",2,2,3,3
"org.jabref.model.entry.Date.toString()",0,1,1,1
"org.jabref.model.entry.Date.toTemporalAccessor()",0,1,1,1
"org.jabref.model.entry.DateTest.nonExistentDates(String,String)",0,1,1,1
"org.jabref.model.entry.DateTest.parseCorrectlyDayMonthYearDate()",0,1,1,1
"org.jabref.model.entry.DateTest.parseCorrectlyMonthYearDate()",0,1,1,1
"org.jabref.model.entry.DateTest.parseCorrectlyYearDate()",0,1,1,1
"org.jabref.model.entry.DateTest.parseCorrectlyYearMonthDate()",0,1,1,1
"org.jabref.model.entry.DateTest.parseDateNull()",0,1,1,1
"org.jabref.model.entry.DateTest.provideInvalidCornerCaseArguments()",0,1,1,1
"org.jabref.model.entry.EntryConverter.EntryConverter()",0,1,1,1
"org.jabref.model.entry.EntryLinkList.EntryLinkList()",0,1,1,1
"org.jabref.model.entry.EntryLinkList.parse(String,BibDatabase)",4,1,4,4
"org.jabref.model.entry.EntryLinkList.serialize(List<ParsedEntryLink>)",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.assertSourceCrossrefsTarget(BibEntry,BibEntry)",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.before()",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.create(String)",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.givenBibEntryWhenParsingThenExpectLink()",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.givenFieldValueAndDatabaseWhenParsingThenExpectDataBase()",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.givenFieldValueAndDatabaseWhenParsingThenExpectEmptyLinkedEntry()",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.givenFieldValueAndDatabaseWhenParsingThenExpectKey()",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.givenFieldValueAndDatabaseWhenParsingThenExpectLink()",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.givenNullFieldValueAndDatabaseWhenParsingThenExpectLinksIsEmpty()",0,1,1,1
"org.jabref.model.entry.EntryLinkListTest.givenTargetAndSourceWhenSourceCrossrefTargetThenSourceCrossrefsTarget()",0,1,1,1
"org.jabref.model.entry.EntryTypeFactoryTest.testParseEntryTypePatent()",0,1,1,1
"org.jabref.model.entry.IdGenerator.IdGenerator()",0,1,1,1
"org.jabref.model.entry.IdGenerator.next()",0,1,1,1
"org.jabref.model.entry.IdGeneratorTest.testCreateNeutralId()",1,1,2,2
"org.jabref.model.entry.Keyword.Keyword(String)",0,1,1,1
"org.jabref.model.entry.Keyword.addAtEnd(String)",0,1,1,1
"org.jabref.model.entry.Keyword.compareTo(Keyword)",0,1,1,1
"org.jabref.model.entry.Keyword.equals(Object)",4,3,3,5
"org.jabref.model.entry.Keyword.flatten()",0,1,1,1
"org.jabref.model.entry.Keyword.get()",0,1,1,1
"org.jabref.model.entry.Keyword.getAllSubchainsAsString(Character)",0,1,1,1
"org.jabref.model.entry.Keyword.getPathFromRootAsString(Character)",0,1,1,1
"org.jabref.model.entry.Keyword.getSubchainAsString(Character)",0,1,1,1
"org.jabref.model.entry.Keyword.hashCode()",0,1,1,1
"org.jabref.model.entry.Keyword.of(String...)",2,2,2,3
"org.jabref.model.entry.Keyword.toString()",0,1,1,1
"org.jabref.model.entry.KeywordList.KeywordList()",0,1,1,1
"org.jabref.model.entry.KeywordList.KeywordList(Collection<Keyword>)",0,1,1,1
"org.jabref.model.entry.KeywordList.KeywordList(Keyword...)",0,1,1,1
"org.jabref.model.entry.KeywordList.KeywordList(List<String>)",0,1,1,1
"org.jabref.model.entry.KeywordList.KeywordList(String...)",0,1,1,1
"org.jabref.model.entry.KeywordList.add(Keyword)",1,2,1,2
"org.jabref.model.entry.KeywordList.add(String)",0,1,1,1
"org.jabref.model.entry.KeywordList.addAll(KeywordList)",0,1,1,1
"org.jabref.model.entry.KeywordList.clear()",0,1,1,1
"org.jabref.model.entry.KeywordList.contains(Keyword)",0,1,1,1
"org.jabref.model.entry.KeywordList.contains(String)",0,1,1,1
"org.jabref.model.entry.KeywordList.createClone()",0,1,1,1
"org.jabref.model.entry.KeywordList.equals(Object)",3,3,2,4
"org.jabref.model.entry.KeywordList.get(int)",0,1,1,1
"org.jabref.model.entry.KeywordList.getAsString(Character)",0,1,1,1
"org.jabref.model.entry.KeywordList.hashCode()",0,1,1,1
"org.jabref.model.entry.KeywordList.isEmpty()",0,1,1,1
"org.jabref.model.entry.KeywordList.iterator()",0,1,1,1
"org.jabref.model.entry.KeywordList.parse(String,Character)",0,1,1,1
"org.jabref.model.entry.KeywordList.parse(String,Character,Character)",2,2,2,3
"org.jabref.model.entry.KeywordList.remove(Keyword)",0,1,1,1
"org.jabref.model.entry.KeywordList.remove(String)",0,1,1,1
"org.jabref.model.entry.KeywordList.removeAll(KeywordList)",0,1,1,1
"org.jabref.model.entry.KeywordList.replaceAll(KeywordList,Keyword)",5,1,4,4
"org.jabref.model.entry.KeywordList.retainAll(KeywordList)",0,1,1,1
"org.jabref.model.entry.KeywordList.size()",0,1,1,1
"org.jabref.model.entry.KeywordList.stream()",0,1,1,1
"org.jabref.model.entry.KeywordList.toString()",0,1,1,1
"org.jabref.model.entry.KeywordList.toStringList()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.asStringAddsSpaceAfterDelimiter()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseEmptyStringReturnsEmptyList()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseHierarchicalChain()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseIgnoresDuplicates()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseOneWordReturnsOneKeyword()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseTwoHierarchicalChains()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseTwoWordReturnsTwoKeywords()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseTwoWordReturnsTwoKeywordsWithDifferentDelimiter()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseTwoWordReturnsTwoKeywordsWithoutSpace()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseWordsWithBracketsReturnsOneKeyword()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseWordsWithWhitespaceAndCommaReturnsTwoKeyword()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.parseWordsWithWhitespaceReturnsOneKeyword()",0,1,1,1
"org.jabref.model.entry.KeywordListTest.setUp()",0,1,1,1
"org.jabref.model.entry.KeywordTest.getAllSubchainsAsStringForSimpleChain()",0,1,1,1
"org.jabref.model.entry.KeywordTest.getPathFromRootAsStringForSimpleChain()",0,1,1,1
"org.jabref.model.entry.LinkedFile.LinkedFile(String,Path,String)",0,1,1,1
"org.jabref.model.entry.LinkedFile.LinkedFile(String,String,String)",0,1,1,1
"org.jabref.model.entry.LinkedFile.LinkedFile(String,URL,String)",0,1,1,1
"org.jabref.model.entry.LinkedFile.LinkedFile(URL,String)",0,1,1,1
"org.jabref.model.entry.LinkedFile.descriptionProperty()",0,1,1,1
"org.jabref.model.entry.LinkedFile.equals(Object)",3,3,4,5
"org.jabref.model.entry.LinkedFile.fileTypeProperty()",0,1,1,1
"org.jabref.model.entry.LinkedFile.findIn(BibDatabaseContext,FilePreferences)",0,1,1,1
"org.jabref.model.entry.LinkedFile.findIn(List<Path>)",8,4,6,6
"org.jabref.model.entry.LinkedFile.getDescription()",0,1,1,1
"org.jabref.model.entry.LinkedFile.getFileType()",0,1,1,1
"org.jabref.model.entry.LinkedFile.getLink()",0,1,1,1
"org.jabref.model.entry.LinkedFile.getObservables()",0,1,1,1
"org.jabref.model.entry.LinkedFile.hashCode()",0,1,1,1
"org.jabref.model.entry.LinkedFile.isEmpty()",0,1,1,1
"org.jabref.model.entry.LinkedFile.isOnlineLink()",0,1,1,1
"org.jabref.model.entry.LinkedFile.isOnlineLink(String)",1,1,3,3
"org.jabref.model.entry.LinkedFile.linkProperty()",0,1,1,1
"org.jabref.model.entry.LinkedFile.readObject(ObjectInputStream)",0,1,1,1
"org.jabref.model.entry.LinkedFile.setDescription(String)",0,1,1,1
"org.jabref.model.entry.LinkedFile.setFileType(String)",0,1,1,1
"org.jabref.model.entry.LinkedFile.setLink(String)",2,1,2,2
"org.jabref.model.entry.LinkedFile.toString()",0,1,1,1
"org.jabref.model.entry.LinkedFile.writeObject(ObjectOutputStream)",0,1,1,1
"org.jabref.model.entry.Month.Month(String,String,int)",0,1,1,1
"org.jabref.model.entry.Month.getFullName()",0,1,1,1
"org.jabref.model.entry.Month.getJabRefFormat()",0,1,1,1
"org.jabref.model.entry.Month.getMonthByNumber(int)",3,3,3,3
"org.jabref.model.entry.Month.getMonthByShortName(String)",3,3,3,3
"org.jabref.model.entry.Month.getNumber()",0,1,1,1
"org.jabref.model.entry.Month.getShortName()",0,1,1,1
"org.jabref.model.entry.Month.getTwoDigitNumber()",0,1,1,1
"org.jabref.model.entry.Month.parse(String)",5,4,4,6
"org.jabref.model.entry.Month.parseGermanShortMonth(String)",1,13,13,13
"org.jabref.model.entry.MonthTest.getFullNameTest()",0,1,1,1
"org.jabref.model.entry.MonthTest.getFullNameTest(String,Month)",0,1,1,1
"org.jabref.model.entry.MonthTest.getJabRefFormatTest()",0,1,1,1
"org.jabref.model.entry.MonthTest.getJabRefFormatTest(String,Month)",0,1,1,1
"org.jabref.model.entry.MonthTest.getMonthByNumberTest()",0,1,1,1
"org.jabref.model.entry.MonthTest.getMonthByNumberTest(Optional<Month>,int)",0,1,1,1
"org.jabref.model.entry.MonthTest.getMonthByShortNameLowercaseTest(Optional<Month>,String)",0,1,1,1
"org.jabref.model.entry.MonthTest.getMonthByShortNameSpecialCases()",0,1,1,1
"org.jabref.model.entry.MonthTest.getNumberTest()",0,1,1,1
"org.jabref.model.entry.MonthTest.getNumberTest(int,Month)",0,1,1,1
"org.jabref.model.entry.MonthTest.getShortNameTest()",0,1,1,1
"org.jabref.model.entry.MonthTest.getShortNameTest(String,Month)",0,1,1,1
"org.jabref.model.entry.MonthTest.getTwoDigitNumberTest()",0,1,1,1
"org.jabref.model.entry.MonthTest.getTwoDigitNumberTest(String,Month)",0,1,1,1
"org.jabref.model.entry.MonthTest.parseBibtexName()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseCorrectly(Optional<Month>,String)",0,1,1,1
"org.jabref.model.entry.MonthTest.parseFullName()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseFullNameGerman()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseGermanShortMonthTest()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseGermanShortMonthTest(Optional<Month>,String)",0,1,1,1
"org.jabref.model.entry.MonthTest.parseNumber()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseShortName()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseShortNameGerman()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseShortNameGermanLowercase()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseSpecialCases()",0,1,1,1
"org.jabref.model.entry.MonthTest.parseTwoDigitNumber()",0,1,1,1
"org.jabref.model.entry.ParsedEntryLink.ParsedEntryLink(BibEntry)",0,1,1,1
"org.jabref.model.entry.ParsedEntryLink.ParsedEntryLink(String,BibDatabase)",0,1,1,1
"org.jabref.model.entry.ParsedEntryLink.equals(Object)",3,3,2,4
"org.jabref.model.entry.ParsedEntryLink.getDatabase()",0,1,1,1
"org.jabref.model.entry.ParsedEntryLink.getKey()",0,1,1,1
"org.jabref.model.entry.ParsedEntryLink.getLinkedEntry()",0,1,1,1
"org.jabref.model.entry.ParsedEntryLink.hashCode()",0,1,1,1
"org.jabref.model.entry.ParsedEntryLink.setKey(String)",0,1,1,1
"org.jabref.model.entry.SharedBibEntryData.SharedBibEntryData()",0,1,1,1
"org.jabref.model.entry.SharedBibEntryData.getSharedID()",0,1,1,1
"org.jabref.model.entry.SharedBibEntryData.getVersion()",0,1,1,1
"org.jabref.model.entry.SharedBibEntryData.setSharedID(int)",0,1,1,1
"org.jabref.model.entry.SharedBibEntryData.setVersion(int)",0,1,1,1
"org.jabref.model.entry.event.EntriesEvent.EntriesEvent(List<BibEntry>)",0,1,1,1
"org.jabref.model.entry.event.EntriesEvent.EntriesEvent(List<BibEntry>,EntriesEventSource)",0,1,1,1
"org.jabref.model.entry.event.EntriesEvent.getBibEntries()",0,1,1,1
"org.jabref.model.entry.event.EntriesEvent.getEntriesEventSource()",0,1,1,1
"org.jabref.model.entry.event.EntryChangedEvent.EntryChangedEvent(BibEntry)",0,1,1,1
"org.jabref.model.entry.event.EntryChangedEvent.EntryChangedEvent(BibEntry,EntriesEventSource)",0,1,1,1
"org.jabref.model.entry.event.EntryChangedEvent.getBibEntry()",0,1,1,1
"org.jabref.model.entry.event.FieldAddedOrRemovedEvent.FieldAddedOrRemovedEvent(FieldChange,EntriesEventSource)",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.FieldChangedEvent(BibEntry,Field,String,String)",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.FieldChangedEvent(BibEntry,Field,String,String,EntriesEventSource)",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.FieldChangedEvent(FieldChange)",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.FieldChangedEvent(FieldChange,EntriesEventSource)",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.computeMajorCharacterChange(String,String)",8,5,6,8
"org.jabref.model.entry.event.FieldChangedEvent.getField()",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.getMajorCharacterChange()",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.getNewValue()",0,1,1,1
"org.jabref.model.entry.event.FieldChangedEvent.getOldValue()",0,1,1,1
"org.jabref.model.entry.field.BibField.BibField(Field,FieldPriority)",0,1,1,1
"org.jabref.model.entry.field.BibField.compareTo(BibField)",0,1,1,1
"org.jabref.model.entry.field.BibField.equals(Object)",2,3,1,3
"org.jabref.model.entry.field.BibField.getField()",0,1,1,1
"org.jabref.model.entry.field.BibField.getPriority()",0,1,1,1
"org.jabref.model.entry.field.BibField.hashCode()",0,1,1,1
"org.jabref.model.entry.field.BibField.toString()",0,1,1,1
"org.jabref.model.entry.field.BibFieldTest.bibFieldsConsideredEqualIfUnderlyingFieldIsEqual()",0,1,1,1
"org.jabref.model.entry.field.BibFieldTest.bibFieldsConsideredNotEqualIfUnderlyingFieldNotEqual()",0,1,1,1
"org.jabref.model.entry.field.Field.getAlias()",0,1,1,1
"org.jabref.model.entry.field.Field.getDisplayName()",0,1,1,1
"org.jabref.model.entry.field.Field.isDeprecated()",0,1,1,1
"org.jabref.model.entry.field.Field.isNumeric()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getAllFields()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getBookNameFields()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getCommonFields()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getDefaultGeneralFields()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getFieldsFiltered(Predicate<Field>)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getIdentifierFieldNames()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getJournalNameFields()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getKeyFields()",1,1,2,2
"org.jabref.model.entry.field.FieldFactory.getNotTextFieldNames()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getPersonNameFields()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.getStandardFieldsWithCitationKey()",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.isInternalField(Field)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.isMultiLineField(Field,List<Field>)",1,1,5,5
"org.jabref.model.entry.field.FieldFactory.parseField(String)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.parseFieldList(String)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.parseOrFields(String)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.parseOrFieldsList(String)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.serializeFieldsList(Collection<Field>)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.serializeOrFields(Field...)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.serializeOrFields(OrFields)",0,1,1,1
"org.jabref.model.entry.field.FieldFactory.serializeOrFieldsList(Set<OrFields>)",0,1,1,1
"org.jabref.model.entry.field.FieldFactoryTest.testOrFieldsThreeTerms()",0,1,1,1
"org.jabref.model.entry.field.FieldFactoryTest.testOrFieldsTwoTerms()",0,1,1,1
"org.jabref.model.entry.field.IEEEField.IEEEField(String,FieldProperty,FieldProperty...)",0,1,1,1
"org.jabref.model.entry.field.IEEEField.fromName(String)",0,1,1,1
"org.jabref.model.entry.field.IEEEField.getName()",0,1,1,1
"org.jabref.model.entry.field.IEEEField.getProperties()",0,1,1,1
"org.jabref.model.entry.field.IEEEField.isStandardField()",0,1,1,1
"org.jabref.model.entry.field.InternalField.InternalField(String)",0,1,1,1
"org.jabref.model.entry.field.InternalField.InternalField(String,FieldProperty,FieldProperty...)",0,1,1,1
"org.jabref.model.entry.field.InternalField.fromName(String)",1,2,2,2
"org.jabref.model.entry.field.InternalField.getName()",0,1,1,1
"org.jabref.model.entry.field.InternalField.getProperties()",0,1,1,1
"org.jabref.model.entry.field.InternalField.isStandardField()",0,1,1,1
"org.jabref.model.entry.field.OrFields.OrFields(Collection<Field>)",0,1,1,1
"org.jabref.model.entry.field.OrFields.OrFields(Field)",0,1,1,1
"org.jabref.model.entry.field.OrFields.OrFields(Field...)",0,1,1,1
"org.jabref.model.entry.field.OrFields.compareTo(OrFields)",0,1,1,1
"org.jabref.model.entry.field.OrFields.getDisplayName()",1,1,2,2
"org.jabref.model.entry.field.OrFields.getPrimary()",0,1,1,1
"org.jabref.model.entry.field.SpecialField.SpecialField(String,SpecialFieldValue...)",1,1,2,2
"org.jabref.model.entry.field.SpecialField.fromName(String)",0,1,1,1
"org.jabref.model.entry.field.SpecialField.getKeyWords()",0,1,1,1
"org.jabref.model.entry.field.SpecialField.getName()",0,1,1,1
"org.jabref.model.entry.field.SpecialField.getProperties()",0,1,1,1
"org.jabref.model.entry.field.SpecialField.getValues()",0,1,1,1
"org.jabref.model.entry.field.SpecialField.isSingleValueField()",0,1,1,1
"org.jabref.model.entry.field.SpecialField.isStandardField()",0,1,1,1
"org.jabref.model.entry.field.SpecialField.parseValue(String)",0,1,1,1
"org.jabref.model.entry.field.SpecialFieldTest.getSpecialFieldInstanceFromFieldNameEmptyForInvalidField()",0,1,1,1
"org.jabref.model.entry.field.SpecialFieldTest.getSpecialFieldInstanceFromFieldNameValid()",0,1,1,1
"org.jabref.model.entry.field.SpecialFieldValue.SpecialFieldValue(String)",0,1,1,1
"org.jabref.model.entry.field.SpecialFieldValue.getFieldValue()",0,1,1,1
"org.jabref.model.entry.field.SpecialFieldValue.getKeyword()",0,1,1,1
"org.jabref.model.entry.field.SpecialFieldValue.getRating(int)",1,1,1,6
"org.jabref.model.entry.field.SpecialFieldValue.toRating()",1,1,1,6
"org.jabref.model.entry.field.StandardField.StandardField(String)",0,1,1,1
"org.jabref.model.entry.field.StandardField.StandardField(String,FieldProperty,FieldProperty...)",0,1,1,1
"org.jabref.model.entry.field.StandardField.StandardField(String,String)",0,1,1,1
"org.jabref.model.entry.field.StandardField.StandardField(String,String,FieldProperty,FieldProperty...)",0,1,1,1
"org.jabref.model.entry.field.StandardField.fromName(String)",0,1,1,1
"org.jabref.model.entry.field.StandardField.getDisplayName()",2,2,2,2
"org.jabref.model.entry.field.StandardField.getName()",0,1,1,1
"org.jabref.model.entry.field.StandardField.getProperties()",0,1,1,1
"org.jabref.model.entry.field.StandardField.isStandardField()",0,1,1,1
"org.jabref.model.entry.field.StandardFieldTest.fieldsConsideredEqualIfSame()",0,1,1,1
"org.jabref.model.entry.field.UnknownField.UnknownField(String)",0,1,1,1
"org.jabref.model.entry.field.UnknownField.equals(Object)",2,3,1,3
"org.jabref.model.entry.field.UnknownField.getName()",0,1,1,1
"org.jabref.model.entry.field.UnknownField.getProperties()",0,1,1,1
"org.jabref.model.entry.field.UnknownField.hashCode()",0,1,1,1
"org.jabref.model.entry.field.UnknownField.isStandardField()",0,1,1,1
"org.jabref.model.entry.field.UnknownField.toString()",0,1,1,1
"org.jabref.model.entry.field.UnknownFieldTest.fieldsConsideredEqualINameDifferByCapitalization()",0,1,1,1
"org.jabref.model.entry.field.UnknownFieldTest.fieldsConsideredEqualIfSameName()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifier.ArXivIdentifier(String)",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifier.ArXivIdentifier(String,String)",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifier.ArXivIdentifier(String,String,String)",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifier.equals(Object)",4,3,3,5
"org.jabref.model.entry.identifier.ArXivIdentifier.getArXivIdentifier(Matcher)",2,1,1,3
"org.jabref.model.entry.identifier.ArXivIdentifier.getClassification()",2,2,2,2
"org.jabref.model.entry.identifier.ArXivIdentifier.getDefaultField()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifier.getExternalURI()",1,1,2,2
"org.jabref.model.entry.identifier.ArXivIdentifier.getNormalized()",2,2,1,2
"org.jabref.model.entry.identifier.ArXivIdentifier.getNormalizedWithoutVersion()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifier.hashCode()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifier.parse(String)",2,3,3,3
"org.jabref.model.entry.identifier.ArXivIdentifier.toString()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.acceptArxivPrefix()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.acceptLegacyEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.acceptLegacyMathEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.acceptPlainEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.acceptPlainEprintWithVersion()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.acceptUrlHttpEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.acceptUrlHttpsEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.constructCorrectURLForEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.fourDigitDateIsInvalidInLegacyFormat()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.ignoreLeadingAndTrailingWhitespaces()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parse()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseHttpsUrl()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseOldIdentifier()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseOldIdentifierWithArXivPrefix()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseOldUrlWithVersion()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parsePdfUrl()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseUrl()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseUrlWithVersion()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseWithArXivPrefix()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseWithArXivPrefixAndClassification()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseWithArxivPrefix()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.parseWithClassification()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.rejectEmbeddedEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.rejectInvalidEprint()",0,1,1,1
"org.jabref.model.entry.identifier.ArXivIdentifierTest.rejectUrlOtherDomainEprint()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.DOI(String)",13,5,6,7
"org.jabref.model.entry.identifier.DOI.equals(Object)",3,3,2,4
"org.jabref.model.entry.identifier.DOI.findInText(String)",3,1,4,4
"org.jabref.model.entry.identifier.DOI.getDOI()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.getDefaultField()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.getExternalURI()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.getExternalURIFromBase(URI)",1,1,2,2
"org.jabref.model.entry.identifier.DOI.getExternalURIWithCustomBase(String)",0,1,1,1
"org.jabref.model.entry.identifier.DOI.getNormalized()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.getURIAsASCIIString()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.hashCode()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.isShortDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOI.isValid(String)",0,1,1,1
"org.jabref.model.entry.identifier.DOI.parse(String)",1,1,2,2
"org.jabref.model.entry.identifier.DOI.toString()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.equalsWorksFor2017Doi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.isShortDoiShouldReturnFalseWhenItIsDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.isShortDoiShouldReturnTrueWhenItIsShortDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.noDOIFoundInsideArbitraryText()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectEmbeddedDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectEmbeddedShortDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectInvalidDirectoryIndicator()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectInvalidDirectoryIndicatorInShortDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectInvalidDoiUri()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectMissingDivider()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectMissingDividerInShortDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.rejectURLShortDoi()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.testData()",0,1,1,1
"org.jabref.model.entry.identifier.DOITest.testEquals(String,String)",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.ISBN(String)",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.equals(Object)",3,3,2,4
"org.jabref.model.entry.identifier.ISBN.getDefaultField()",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.getExternalURI()",1,1,2,2
"org.jabref.model.entry.identifier.ISBN.getNormalized()",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.hashCode()",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.isIsbn10()",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.isIsbn13()",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.isValid()",1,1,2,2
"org.jabref.model.entry.identifier.ISBN.isValidChecksum()",2,1,2,2
"org.jabref.model.entry.identifier.ISBN.isValidFormat()",0,1,1,1
"org.jabref.model.entry.identifier.ISBN.isbn10check()",4,2,2,5
"org.jabref.model.entry.identifier.ISBN.isbn13check()",4,2,2,4
"org.jabref.model.entry.identifier.ISBN.parse(String)",2,2,2,2
"org.jabref.model.entry.identifier.ISBNTest.testIsIsbn10Correct()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsIsbn10Incorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsIsbn13Correct()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsIsbn13Incorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidChecksum10Correct()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidChecksum10Incorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidChecksum13Correct()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidChecksum13Incorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidFormat10Correct()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidFormat10Incorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidFormat13Correct()",0,1,1,1
"org.jabref.model.entry.identifier.ISBNTest.testIsValidFormat13Incorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISSN.ISSN(String)",0,1,1,1
"org.jabref.model.entry.identifier.ISSN.getCleanedISSN()",1,2,2,2
"org.jabref.model.entry.identifier.ISSN.isCanBeCleaned()",0,1,1,1
"org.jabref.model.entry.identifier.ISSN.isValidChecksum()",9,1,2,7
"org.jabref.model.entry.identifier.ISSN.isValidFormat()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testGetCleanedISSN()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testGetCleanedISSNDashAlreadyThere()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testGetCleanedISSNDashRubbish()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testIsCanBeCleaned()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testIsCanBeCleanedDashAlreadyThere()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testIsCanBeCleanedIncorrectRubbish()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testIsValidChecksumCorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testIsValidChecksumIncorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testIsValidFormatCorrect()",0,1,1,1
"org.jabref.model.entry.identifier.ISSNTest.testIsValidFormatIncorrect()",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprint.IacrEprint(String)",2,2,2,2
"org.jabref.model.entry.identifier.IacrEprint.getAsciiUrl()",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprint.getDefaultField()",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprint.getExternalURI()",1,1,2,2
"org.jabref.model.entry.identifier.IacrEprint.getNormalized()",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprint.matchesExcepted(String)",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprint.parse(String)",1,1,2,2
"org.jabref.model.entry.identifier.IacrEprintTest.acceptCorrectIacrEprintIdentifier(String,String)",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprintTest.constructValidIacrEprintUrl()",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprintTest.provideTestData()",0,1,1,1
"org.jabref.model.entry.identifier.IacrEprintTest.rejectInvalidIacrEprint()",0,1,1,1
"org.jabref.model.entry.identifier.MathSciNetId.MathSciNetId(String)",0,1,1,1
"org.jabref.model.entry.identifier.MathSciNetId.equals(Object)",3,3,2,4
"org.jabref.model.entry.identifier.MathSciNetId.getDefaultField()",0,1,1,1
"org.jabref.model.entry.identifier.MathSciNetId.getExternalURI()",1,1,2,2
"org.jabref.model.entry.identifier.MathSciNetId.getNormalized()",0,1,1,1
"org.jabref.model.entry.identifier.MathSciNetId.hashCode()",0,1,1,1
"org.jabref.model.entry.identifier.MathSciNetId.parse(String)",0,1,1,1
"org.jabref.model.entry.identifier.MathSciNetId.toString()",0,1,1,1
"org.jabref.model.entry.identifier.MathSciNetIdTest.parseRemovesNewLineCharacterAtEnd()",0,1,1,1
"org.jabref.model.entry.types.BibtexEntryTypeDefinitions.BibtexEntryTypeDefinitions()",0,1,1,1
"org.jabref.model.entry.types.EntryTypeFactory.EntryTypeFactory()",0,1,1,1
"org.jabref.model.entry.types.EntryTypeFactory.isBiblatex(EntryType)",0,1,1,1
"org.jabref.model.entry.types.EntryTypeFactory.isBibtex(EntryType)",0,1,1,1
"org.jabref.model.entry.types.EntryTypeFactory.isEqualNameAndFieldBased(BibEntryType,BibEntryType)",6,3,6,8
"org.jabref.model.entry.types.EntryTypeFactory.isExclusiveBiblatex(EntryType)",1,1,2,2
"org.jabref.model.entry.types.EntryTypeFactory.parse(String)",0,1,1,1
"org.jabref.model.entry.types.IEEETranEntryType.IEEETranEntryType(String)",0,1,1,1
"org.jabref.model.entry.types.IEEETranEntryType.fromName(String)",0,1,1,1
"org.jabref.model.entry.types.IEEETranEntryType.getDisplayName()",0,1,1,1
"org.jabref.model.entry.types.IEEETranEntryType.getName()",0,1,1,1
"org.jabref.model.entry.types.IEEETranEntryTypeDefinitions.IEEETranEntryTypeDefinitions()",0,1,1,1
"org.jabref.model.entry.types.StandardEntryType.StandardEntryType(String)",0,1,1,1
"org.jabref.model.entry.types.StandardEntryType.getDisplayName()",0,1,1,1
"org.jabref.model.entry.types.StandardEntryType.getName()",0,1,1,1
"org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryType.SystematicLiteratureReviewStudyEntryType(String)",0,1,1,1
"org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryType.fromName(String)",0,1,1,1
"org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryType.getDisplayName()",0,1,1,1
"org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryType.getName()",0,1,1,1
"org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryTypeDefinitions.SystematicLiteratureReviewStudyEntryTypeDefinitions()",0,1,1,1
"org.jabref.model.entry.types.UnknownEntryType.UnknownEntryType(String)",0,1,1,1
"org.jabref.model.entry.types.UnknownEntryType.equals(Object)",3,3,2,4
"org.jabref.model.entry.types.UnknownEntryType.getDisplayName()",0,1,1,1
"org.jabref.model.entry.types.UnknownEntryType.getName()",0,1,1,1
"org.jabref.model.entry.types.UnknownEntryType.hashCode()",0,1,1,1
"org.jabref.model.entry.types.UnknownEntryType.toString()",0,1,1,1
"org.jabref.model.event.TestEventListener.getAddedEntries()",0,1,1,1
"org.jabref.model.event.TestEventListener.getChangedEntry()",0,1,1,1
"org.jabref.model.event.TestEventListener.getFirstInsertedEntry()",0,1,1,1
"org.jabref.model.event.TestEventListener.getRemovedEntries()",0,1,1,1
"org.jabref.model.event.TestEventListener.listen(EntriesAddedEvent)",0,1,1,1
"org.jabref.model.event.TestEventListener.listen(EntriesRemovedEvent)",0,1,1,1
"org.jabref.model.event.TestEventListener.listen(EntryChangedEvent)",0,1,1,1
"org.jabref.model.groups.AbstractGroup.AbstractGroup(String,GroupHierarchyType)",0,1,1,1
"org.jabref.model.groups.AbstractGroup.containsAll(List<BibEntry>)",3,3,2,3
"org.jabref.model.groups.AbstractGroup.containsAny(List<BibEntry>)",3,3,2,3
"org.jabref.model.groups.AbstractGroup.equals(Object)",4,3,4,6
"org.jabref.model.groups.AbstractGroup.getColor()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.getDescription()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.getHierarchicalContext()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.getIconName()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.getName()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.isExpanded()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.isMatch(BibEntry)",0,1,1,1
"org.jabref.model.groups.AbstractGroup.nameProperty()",0,1,1,1
"org.jabref.model.groups.AbstractGroup.setColor(Color)",0,1,1,1
"org.jabref.model.groups.AbstractGroup.setColor(String)",2,1,2,2
"org.jabref.model.groups.AbstractGroup.setDescription(String)",2,1,2,2
"org.jabref.model.groups.AbstractGroup.setExpanded(boolean)",0,1,1,1
"org.jabref.model.groups.AbstractGroup.setIconName(String)",2,1,2,2
"org.jabref.model.groups.AbstractGroup.toString()",0,1,1,1
"org.jabref.model.groups.AllEntriesGroup.AllEntriesGroup(String)",0,1,1,1
"org.jabref.model.groups.AllEntriesGroup.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.AllEntriesGroup.deepCopy()",0,1,1,1
"org.jabref.model.groups.AllEntriesGroup.equals(Object)",1,1,2,2
"org.jabref.model.groups.AllEntriesGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.AllEntriesGroup.isDynamic()",0,1,1,1
"org.jabref.model.groups.AutomaticGroup.AutomaticGroup(String,GroupHierarchyType)",0,1,1,1
"org.jabref.model.groups.AutomaticGroup.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.AutomaticGroup.createSubgroups(ObservableList<BibEntry>)",0,1,1,1
"org.jabref.model.groups.AutomaticGroup.isDynamic()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.AutomaticKeywordGroup(String,GroupHierarchyType,Field,Character,Character)",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.createGroup(Keyword)",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.createSubgroups(BibEntry)",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.deepCopy()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.equals(Object)",4,3,3,5
"org.jabref.model.groups.AutomaticKeywordGroup.getField()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.getKeywordDelimiter()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.getKeywordHierarchicalDelimiter()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroupTest.createIncludingKeywordsSubgroup()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroupTest.createSubgroupsForTwoKeywords()",0,1,1,1
"org.jabref.model.groups.AutomaticKeywordGroupTest.createSubgroupsIgnoresEmptyKeyword()",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroup.AutomaticPersonsGroup(String,GroupHierarchyType,Field)",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroup.createSubgroups(BibEntry)",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroup.deepCopy()",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroup.equals(Object)",3,3,2,4
"org.jabref.model.groups.AutomaticPersonsGroup.getField()",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroupTest.createPersonSubGroupFrom(String...)",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroupTest.createSubgroupFromLatex()",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroupTest.createSubgroupFromUnicode()",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroupTest.createSubgroupsContainingSpaceSeparatedNames()",0,1,1,1
"org.jabref.model.groups.AutomaticPersonsGroupTest.createSubgroupsFromCommaSeparatedLastNames()",0,1,1,1
"org.jabref.model.groups.ExplicitGroup.ExplicitGroup(String,GroupHierarchyType,Character)",0,1,1,1
"org.jabref.model.groups.ExplicitGroup.addLegacyEntryKey(String)",0,1,1,1
"org.jabref.model.groups.ExplicitGroup.clearLegacyEntryKeys()",0,1,1,1
"org.jabref.model.groups.ExplicitGroup.deepCopy()",0,1,1,1
"org.jabref.model.groups.ExplicitGroup.equals(Object)",3,3,7,9
"org.jabref.model.groups.ExplicitGroup.getLegacyEntryKeys()",0,1,1,1
"org.jabref.model.groups.ExplicitGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.ExplicitGroup.isDynamic()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.addDuplicateGroupDoesNotChangeGroupsField()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.addSingleGroupToEmptyBibEntryChangesGroupsField()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.addSingleGroupToNonemptyBibEntryAppendsToGroupsField()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.addTwoGroupsToBibEntryChangesGroupsField()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.containsMatchesPhraseWithBrackets()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.containsOnlyMatchesCompletePhraseWithSlash()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.containsOnlyMatchesCompletePhraseWithWhitespace()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.removeDoesNotChangeFieldIfContainsNameAsPart()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.removeDoesNotChangeFieldIfContainsNameAsWord()",0,1,1,1
"org.jabref.model.groups.ExplicitGroupTest.setUp()",0,1,1,1
"org.jabref.model.groups.GroupEntryChanger.add(BibEntry)",0,1,1,1
"org.jabref.model.groups.GroupEntryChanger.remove(BibEntry)",0,1,1,1
"org.jabref.model.groups.GroupHierarchyType.getByNumberOrDefault(int)",3,2,1,3
"org.jabref.model.groups.GroupTreeNode.GroupTreeNode(AbstractGroup)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.addEntriesToGroup(Collection<BibEntry>)",2,2,2,2
"org.jabref.model.groups.GroupTreeNode.addSubgroup(AbstractGroup)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.copyNode()",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.equals(Object)",4,3,3,5
"org.jabref.model.groups.GroupTreeNode.findMatches(BibDatabase)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.findMatches(List<BibEntry>)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.fromGroup(AbstractGroup)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.getChildByPath(String)",4,3,3,3
"org.jabref.model.groups.GroupTreeNode.getContainingGroups(List<BibEntry>,boolean)",7,1,5,5
"org.jabref.model.groups.GroupTreeNode.getEntriesInGroup(List<BibEntry>)",3,1,3,3
"org.jabref.model.groups.GroupTreeNode.getGroup()",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.getMatchingGroups(BibEntry)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.getMatchingGroups(List<BibEntry>)",4,3,4,4
"org.jabref.model.groups.GroupTreeNode.getName()",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.getPath()",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.getSearchMatcher()",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.getSearchMatcher(GroupHierarchyType)",8,2,6,9
"org.jabref.model.groups.GroupTreeNode.hashCode()",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.isSameGroupAs(GroupTreeNode)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.matches(BibEntry)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.removeEntriesFromGroup(List<BibEntry>)",2,2,2,2
"org.jabref.model.groups.GroupTreeNode.setGroup(AbstractGroup)",0,1,1,1
"org.jabref.model.groups.GroupTreeNode.setGroup(AbstractGroup,boolean,boolean,List<BibEntry>)",8,1,4,7
"org.jabref.model.groups.GroupTreeNode.toString()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.addEntriesToGroupWorksNotForGroupsNotSupportingExplicitAddingOfEntries()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.findMatchesMultipleEntries()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.findMatchesOneEntry()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.findMatchesReturnsEmptyForEmptyList()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.findMatchesWorksForHierarchyOfIndependentGroups()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.findMatchesWorksForRefiningGroups()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getChildByPathDoesNotFindChildWhenInvalidPath()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getChildByPathFindsCorrectChildInSecondLevel()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getExplict(String)",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getKeywordGroup(String)",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getNodeInComplexTree(GroupTreeNode)",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getNodeInSimpleTree()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getNodeInSimpleTree(GroupTreeNode)",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getPathSimpleTree()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getRoot()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getSearchGroup(String)",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getSearchRuleForIncludingGroupReturnsGroupOrSubgroupAsMatcher()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getSearchRuleForIndependentGroupReturnsGroupAsMatcher()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.getSearchRuleForRefiningGroupReturnsParentAndGroupAsMatcher()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.onlyRootAndChildNodeContainAtLeastOneEntry()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.onlySubgroupsContainAllEntries()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.removeEntriesFromGroupWorksNotForGroupsNotSupportingExplicitRemovalOfEntries()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.setGroupAddsOnlyPreviousAssignments()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.setGroupAddsPreviousAssignmentsExplicitToExplicit()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.setGroupChangesUnderlyingGroup()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.setGroupExplicitToExplicitIsRenameAndSoRemovesPreviousAssignment()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.setGroupExplicitToSearchDoesNotKeepPreviousAssignments()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.setGroupWithFalseDoesNotAddsPreviousAssignments()",0,1,1,1
"org.jabref.model.groups.GroupTreeNodeTest.setUp()",0,1,1,1
"org.jabref.model.groups.KeywordGroup.KeywordGroup(String,GroupHierarchyType,Field,String,boolean)",0,1,1,1
"org.jabref.model.groups.KeywordGroup.equals(Object)",5,4,4,7
"org.jabref.model.groups.KeywordGroup.getSearchExpression()",0,1,1,1
"org.jabref.model.groups.KeywordGroup.getSearchField()",0,1,1,1
"org.jabref.model.groups.KeywordGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.KeywordGroup.isCaseSensitive()",0,1,1,1
"org.jabref.model.groups.KeywordGroup.isDynamic()",0,1,1,1
"org.jabref.model.groups.LastNameGroup.LastNameGroup(String,GroupHierarchyType,Field,String)",0,1,1,1
"org.jabref.model.groups.LastNameGroup.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.LastNameGroup.deepCopy()",0,1,1,1
"org.jabref.model.groups.LastNameGroup.getAsLastNamesLatexFree(Field,BibEntry)",0,1,1,1
"org.jabref.model.groups.RegexKeywordGroup.RegexKeywordGroup(String,GroupHierarchyType,Field,String,boolean)",0,1,1,1
"org.jabref.model.groups.RegexKeywordGroup.compilePattern(String,boolean)",1,1,2,2
"org.jabref.model.groups.RegexKeywordGroup.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.RegexKeywordGroup.deepCopy()",0,1,1,1
"org.jabref.model.groups.RegexKeywordGroup.equals(Object)",3,3,5,7
"org.jabref.model.groups.RegexKeywordGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.SearchGroup.SearchGroup(String,GroupHierarchyType,String,EnumSet<SearchFlags>)",0,1,1,1
"org.jabref.model.groups.SearchGroup.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.SearchGroup.deepCopy()",1,1,2,2
"org.jabref.model.groups.SearchGroup.equals(Object)",3,3,4,6
"org.jabref.model.groups.SearchGroup.getSearchExpression()",0,1,1,1
"org.jabref.model.groups.SearchGroup.getSearchFlags()",0,1,1,1
"org.jabref.model.groups.SearchGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.SearchGroup.isDynamic()",0,1,1,1
"org.jabref.model.groups.SearchGroup.toString()",0,1,1,1
"org.jabref.model.groups.SearchGroupTest.containsDoesNotFindsWordWithInvalidRegularExpression()",0,1,1,1
"org.jabref.model.groups.SearchGroupTest.containsFindsWordWithRegularExpression()",0,1,1,1
"org.jabref.model.groups.SearchGroupTest.notQueryWorksWithLRightPartOfQuery()",0,1,1,1
"org.jabref.model.groups.SearchGroupTest.notQueryWorksWithLeftPartOfQuery()",0,1,1,1
"org.jabref.model.groups.TexGroup.TexGroup(String,GroupHierarchyType,Path,AuxParser,FileUpdateMonitor,MetaData)",0,1,1,1
"org.jabref.model.groups.TexGroup.TexGroup(String,GroupHierarchyType,Path,AuxParser,FileUpdateMonitor,MetaData,String)",0,1,1,1
"org.jabref.model.groups.TexGroup.contains(BibEntry)",1,1,2,2
"org.jabref.model.groups.TexGroup.create(String,GroupHierarchyType,Path,AuxParser,FileUpdateMonitor,MetaData)",0,1,1,1
"org.jabref.model.groups.TexGroup.createWithoutFileMonitoring(String,GroupHierarchyType,Path,AuxParser,FileUpdateMonitor,MetaData)",0,1,1,1
"org.jabref.model.groups.TexGroup.deepCopy()",1,1,2,2
"org.jabref.model.groups.TexGroup.equals(Object)",4,4,2,5
"org.jabref.model.groups.TexGroup.expandPath(Path)",0,1,1,1
"org.jabref.model.groups.TexGroup.fileUpdated()",0,1,1,1
"org.jabref.model.groups.TexGroup.getFileDirectoriesAsPaths()",0,1,1,1
"org.jabref.model.groups.TexGroup.getFilePath()",0,1,1,1
"org.jabref.model.groups.TexGroup.getFilePathResolved()",0,1,1,1
"org.jabref.model.groups.TexGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.TexGroup.isDynamic()",0,1,1,1
"org.jabref.model.groups.TexGroup.relativize(Path)",0,1,1,1
"org.jabref.model.groups.TexGroup.toString()",0,1,1,1
"org.jabref.model.groups.TexGroupTest.containsReturnsTrueForEntryInAux()",0,1,1,1
"org.jabref.model.groups.TexGroupTest.containsReturnsTrueForEntryNotInAux()",0,1,1,1
"org.jabref.model.groups.TexGroupTest.getFilePathReturnsRelativePath()",0,1,1,1
"org.jabref.model.groups.TexGroupTest.setUp()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.KeywordListSearchStrategy.KeywordListSearchStrategy()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.KeywordListSearchStrategy.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.StringSearchStrategy.StringSearchStrategy()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.StringSearchStrategy.contains(BibEntry)",2,2,2,2
"org.jabref.model.groups.WordKeywordGroup.TypeSearchStrategy.TypeSearchStrategy()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.TypeSearchStrategy.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.WordKeywordGroup(String,GroupHierarchyType,Field,String,boolean,Character,boolean)",5,1,2,3
"org.jabref.model.groups.WordKeywordGroup.add(Collection<BibEntry>)",3,1,3,3
"org.jabref.model.groups.WordKeywordGroup.contains(BibEntry)",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.containsCaseInsensitive(Set<String>,Collection<String>)",3,3,2,3
"org.jabref.model.groups.WordKeywordGroup.containsCaseInsensitive(Set<String>,String)",3,3,2,3
"org.jabref.model.groups.WordKeywordGroup.deepCopy()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.equals(Object)",3,3,7,9
"org.jabref.model.groups.WordKeywordGroup.hashCode()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroup.remove(List<BibEntry>)",3,1,3,3
"org.jabref.model.groups.WordKeywordGroupTest.addChangesFieldIfEmptyBefore()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.addChangesFieldIfNotEmptyBefore()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.addDoesNotAddDuplicate()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsDoesNotFindWordIfCaseDiffers()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsDoesNotFindsWordInSentenceIfCaseDiffers()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsFindsComplexWordInSentence()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsFindsSameComplexWord()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsFindsSameWord()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsFindsWordInCommaSeparatedList()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsFindsWordInSemicolonSeparatedList()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.containsFindsWordInSentence()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.removeDoesNothingIfEntryNotMatched()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.removeRemovesNameFromField()",0,1,1,1
"org.jabref.model.groups.WordKeywordGroupTest.setUp()",0,1,1,1
"org.jabref.model.groups.event.GroupUpdatedEvent.GroupUpdatedEvent(MetaData)",0,1,1,1
"org.jabref.model.groups.event.GroupUpdatedEvent.getMetaData()",0,1,1,1
"org.jabref.model.metadata.ContentSelector.ContentSelector(Field,List<String>)",0,1,1,1
"org.jabref.model.metadata.ContentSelector.ContentSelector(Field,String...)",0,1,1,1
"org.jabref.model.metadata.ContentSelector.equals(Object)",4,3,3,5
"org.jabref.model.metadata.ContentSelector.getField()",0,1,1,1
"org.jabref.model.metadata.ContentSelector.getValues()",0,1,1,1
"org.jabref.model.metadata.ContentSelector.hashCode()",0,1,1,1
"org.jabref.model.metadata.ContentSelectors.ContentSelectors()",0,1,1,1
"org.jabref.model.metadata.ContentSelectors.addContentSelector(ContentSelector)",0,1,1,1
"org.jabref.model.metadata.ContentSelectors.equals(Object)",3,3,2,4
"org.jabref.model.metadata.ContentSelectors.getContentSelectors()",0,1,1,1
"org.jabref.model.metadata.ContentSelectors.getFieldsWithSelectors()",1,1,2,2
"org.jabref.model.metadata.ContentSelectors.getSelectorValuesForField(Field)",3,3,3,3
"org.jabref.model.metadata.ContentSelectors.hashCode()",0,1,1,1
"org.jabref.model.metadata.ContentSelectors.parse(Field,String)",0,1,1,1
"org.jabref.model.metadata.ContentSelectors.removeSelector(Field)",4,3,3,4
"org.jabref.model.metadata.MetaData.MetaData()",0,1,1,1
"org.jabref.model.metadata.MetaData.addContentSelector(ContentSelector)",0,1,1,1
"org.jabref.model.metadata.MetaData.clearContentSelectors(Field)",0,1,1,1
"org.jabref.model.metadata.MetaData.clearDefaultFileDirectory()",0,1,1,1
"org.jabref.model.metadata.MetaData.clearLatexFileDirectory(String)",0,1,1,1
"org.jabref.model.metadata.MetaData.clearSaveActions()",0,1,1,1
"org.jabref.model.metadata.MetaData.clearSaveOrderConfig()",0,1,1,1
"org.jabref.model.metadata.MetaData.clearUserFileDirectory(String)",0,1,1,1
"org.jabref.model.metadata.MetaData.equals(Object)",4,3,13,15
"org.jabref.model.metadata.MetaData.getCiteKeyPattern(GlobalCitationKeyPattern)",0,1,1,1
"org.jabref.model.metadata.MetaData.getContentSelectorList()",0,1,1,1
"org.jabref.model.metadata.MetaData.getContentSelectorValuesForField(Field)",0,1,1,1
"org.jabref.model.metadata.MetaData.getContentSelectors()",0,1,1,1
"org.jabref.model.metadata.MetaData.getDefaultCiteKeyPattern()",0,1,1,1
"org.jabref.model.metadata.MetaData.getDefaultFileDirectory()",0,1,1,1
"org.jabref.model.metadata.MetaData.getEncoding()",0,1,1,1
"org.jabref.model.metadata.MetaData.getGroups()",0,1,1,1
"org.jabref.model.metadata.MetaData.getLatexFileDirectories()",0,1,1,1
"org.jabref.model.metadata.MetaData.getLatexFileDirectory(String)",0,1,1,1
"org.jabref.model.metadata.MetaData.getMode()",0,1,1,1
"org.jabref.model.metadata.MetaData.getSaveActions()",0,1,1,1
"org.jabref.model.metadata.MetaData.getSaveOrderConfig()",0,1,1,1
"org.jabref.model.metadata.MetaData.getUnknownMetaData()",0,1,1,1
"org.jabref.model.metadata.MetaData.getUserFileDirectories()",0,1,1,1
"org.jabref.model.metadata.MetaData.getUserFileDirectory(String)",0,1,1,1
"org.jabref.model.metadata.MetaData.groupsBinding()",0,1,1,1
"org.jabref.model.metadata.MetaData.hashCode()",0,1,1,1
"org.jabref.model.metadata.MetaData.isEmpty()",0,1,1,1
"org.jabref.model.metadata.MetaData.isProtected()",0,1,1,1
"org.jabref.model.metadata.MetaData.markAsNotProtected()",0,1,1,1
"org.jabref.model.metadata.MetaData.markAsProtected()",0,1,1,1
"org.jabref.model.metadata.MetaData.postChange()",1,1,2,2
"org.jabref.model.metadata.MetaData.putUnknownMetaDataItem(String,List<String>)",0,1,1,1
"org.jabref.model.metadata.MetaData.registerListener(Object)",0,1,1,1
"org.jabref.model.metadata.MetaData.setCiteKeyPattern(AbstractCitationKeyPattern)",0,1,1,1
"org.jabref.model.metadata.MetaData.setCiteKeyPattern(List<String>,Map<EntryType, List<String>>)",3,1,3,3
"org.jabref.model.metadata.MetaData.setDefaultFileDirectory(String)",0,1,1,1
"org.jabref.model.metadata.MetaData.setEncoding(Charset)",0,1,1,1
"org.jabref.model.metadata.MetaData.setEncoding(Charset,ChangePropagation)",1,1,2,2
"org.jabref.model.metadata.MetaData.setEventPropagation(boolean)",0,1,1,1
"org.jabref.model.metadata.MetaData.setGroups(GroupTreeNode)",0,1,1,1
"org.jabref.model.metadata.MetaData.setLatexFileDirectory(String,Path)",0,1,1,1
"org.jabref.model.metadata.MetaData.setMode(BibDatabaseMode)",1,2,1,2
"org.jabref.model.metadata.MetaData.setSaveActions(FieldFormatterCleanups)",0,1,1,1
"org.jabref.model.metadata.MetaData.setSaveOrderConfig(SaveOrderConfig)",0,1,1,1
"org.jabref.model.metadata.MetaData.setUserFileDirectory(String,String)",0,1,1,1
"org.jabref.model.metadata.MetaData.unregisterListener(Object)",1,1,1,2
"org.jabref.model.metadata.MetaDataTest.emptyGroupsIfNotSet()",0,1,1,1
"org.jabref.model.metadata.MetaDataTest.setUp()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.OrderType.OrderType(String)",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.OrderType.fromBooleans(boolean,boolean)",2,1,1,3
"org.jabref.model.metadata.SaveOrderConfig.OrderType.toString()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.SaveOrderConfig()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.SaveOrderConfig(List<String>)",7,3,5,6
"org.jabref.model.metadata.SaveOrderConfig.SaveOrderConfig(OrderType,List<SortCriterion>)",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.SortCriterion.SortCriterion()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.SortCriterion.SortCriterion(Field,String)",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.SortCriterion.SortCriterion(Field,boolean)",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.SortCriterion.equals(Object)",4,3,3,5
"org.jabref.model.metadata.SaveOrderConfig.SortCriterion.hashCode()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.SortCriterion.toString()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.equals(Object)",3,3,3,4
"org.jabref.model.metadata.SaveOrderConfig.getAsStringList()",3,1,3,3
"org.jabref.model.metadata.SaveOrderConfig.getDefaultSaveOrder()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.getOrderType()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.getSortCriteria()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.hashCode()",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.parse(List<String>)",0,1,1,1
"org.jabref.model.metadata.SaveOrderConfig.toString()",0,1,1,1
"org.jabref.model.metadata.event.MetaDataChangedEvent.MetaDataChangedEvent(MetaData)",0,1,1,1
"org.jabref.model.metadata.event.MetaDataChangedEvent.getMetaData()",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.CitationEntry(String,String)",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.CitationEntry(String,String,Optional<String>)",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.CitationEntry(String,String,String)",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.compareTo(CitationEntry)",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.equals(Object)",2,3,2,3
"org.jabref.model.openoffice.CitationEntry.getContext()",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.getPageInfo()",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.getRefMarkName()",0,1,1,1
"org.jabref.model.openoffice.CitationEntry.hashCode()",0,1,1,1
"org.jabref.model.openoffice.CitationEntryTest.testCitationEntryCompareTo()",0,1,1,1
"org.jabref.model.openoffice.CitationEntryTest.testCitationEntryEquals()",0,1,1,1
"org.jabref.model.openoffice.CitationEntryTest.testCitationEntryInitalPageInfo()",0,1,1,1
"org.jabref.model.openoffice.CitationEntryTest.testCitationEntryInitalPageInfoChanged()",0,1,1,1
"org.jabref.model.openoffice.CitationEntryTest.testCitationEntryNoInitalPageInfo()",0,1,1,1
"org.jabref.model.openoffice.CitationEntryTest.testCitationEntryOptionalInitalPageInfo()",0,1,1,1
"org.jabref.model.openoffice.ootext.OOFormat.OOFormat()",0,1,1,1
"org.jabref.model.openoffice.ootext.OOFormat.formatReferenceToPageNumberOfReferenceMark(String)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOFormat.paragraph(OOText)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOFormat.paragraph(OOText,String)",1,2,2,2
"org.jabref.model.openoffice.ootext.OOFormat.setCharStyle(OOText,String)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOFormat.setLocale(OOText,String)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOFormat.setLocaleNone(OOText)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOText.OOText(String)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOText.equals(Object)",2,3,1,3
"org.jabref.model.openoffice.ootext.OOText.fromString(String)",1,2,1,2
"org.jabref.model.openoffice.ootext.OOText.hashCode()",0,1,1,1
"org.jabref.model.openoffice.ootext.OOText.toString()",0,1,1,1
"org.jabref.model.openoffice.ootext.OOText.toString(OOText)",1,2,1,2
"org.jabref.model.openoffice.ootext.OOTextIntoOO.MyPropertyStack.MyPropertyStack(XTextCursor)",12,4,6,9
"org.jabref.model.openoffice.ootext.OOTextIntoOO.MyPropertyStack.apply(XTextCursor)",7,1,6,6
"org.jabref.model.openoffice.ootext.OOTextIntoOO.MyPropertyStack.getPropertyValue(String)",1,2,2,2
"org.jabref.model.openoffice.ootext.OOTextIntoOO.MyPropertyStack.popLayer()",1,2,2,2
"org.jabref.model.openoffice.ootext.OOTextIntoOO.MyPropertyStack.pushLayer(List<OOPair<String, Object>>)",3,3,3,3
"org.jabref.model.openoffice.ootext.OOTextIntoOO.OOTextIntoOO()",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.insertParagraphBreak(XText,XTextCursor)",1,1,1,2
"org.jabref.model.openoffice.ootext.OOTextIntoOO.isPropertyDefault(XTextCursor,String)",1,2,1,2
"org.jabref.model.openoffice.ootext.OOTextIntoOO.parseAttributes(String)",2,2,2,3
"org.jabref.model.openoffice.ootext.OOTextIntoOO.removeDirectFormatting(XTextCursor)",10,5,3,7
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharCaseMap(short)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharEscapement(Optional<Short>,Optional<Byte>,boolean,MyPropertyStack)",12,1,8,8
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharLocale(Locale)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharLocale(String)",4,2,1,5
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharPosture(FontSlant)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharStrikeout(short)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharStyleName(String)",2,1,2,2
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharUnderline(short)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setCharWeight(float)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setParagraphStyle(XTextCursor,String)",1,1,1,2
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setSubScript(MyPropertyStack)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.setSuperScript(MyPropertyStack)",0,1,1,1
"org.jabref.model.openoffice.ootext.OOTextIntoOO.write(XTextDocument,XTextCursor,OOText)",52,1,13,32
"org.jabref.model.openoffice.rangesort.FunctionalTextViewCursor.FunctionalTextViewCursor(XTextRange,XServiceInfo,XTextViewCursor)",0,1,1,1
"org.jabref.model.openoffice.rangesort.FunctionalTextViewCursor.get(XTextDocument)",7,4,6,7
"org.jabref.model.openoffice.rangesort.FunctionalTextViewCursor.getViewCursor()",0,1,1,1
"org.jabref.model.openoffice.rangesort.FunctionalTextViewCursor.restore(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.rangesort.FunctionalTextViewCursor.restore(XTextDocument,XTextRange,XServiceInfo)",4,3,4,4
"org.jabref.model.openoffice.rangesort.RangeOverlap.RangeOverlap(RangeOverlapKind,List<V>)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeOverlapBetween.RangeOverlapBetween()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeOverlapBetween.findFirst(XTextDocument,List<V>,List<V>,boolean)",26,7,4,15
"org.jabref.model.openoffice.rangesort.RangeOverlapWithin.RangeOverlapWithin()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeOverlapWithin.findOverlappingRanges(RangePartitions<V>,int,boolean)",31,7,9,15
"org.jabref.model.openoffice.rangesort.RangeOverlapWithin.findOverlappingRanges(XTextDocument,List<V>,boolean,int)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSort.HolderComparatorWithinPartition.HolderComparatorWithinPartition(XText)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSort.HolderComparatorWithinPartition.compare(RangeHolder,RangeHolder)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSort.RangePartitions.RangePartitions()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSort.RangePartitions.add(V)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSort.RangePartitions.getPartitions()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSort.RangeSort()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSort.partitionAndSortRanges(List<V>)",1,1,2,2
"org.jabref.model.openoffice.rangesort.RangeSort.partitionRanges(List<V>)",1,1,2,2
"org.jabref.model.openoffice.rangesort.RangeSort.sortWithinPartition(List<V>)",1,2,1,2
"org.jabref.model.openoffice.rangesort.RangeSortEntry.RangeSortEntry(XTextRange,int,T)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortEntry.getContent()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortEntry.getIndexInPosition()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortEntry.getRange()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortEntry.setIndexInPosition(int)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortEntry.setRange(XTextRange)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortVisual.ComparableMark.ComparableMark(Point,int,T)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortVisual.ComparableMark.getContent()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortVisual.RangeSortVisual()",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortVisual.compareTopToBottomLeftToRight(ComparableMark<T>,ComparableMark<T>)",2,3,1,3
"org.jabref.model.openoffice.rangesort.RangeSortVisual.findPositionOfTextRange(XTextRange,XTextViewCursor)",0,1,1,1
"org.jabref.model.openoffice.rangesort.RangeSortVisual.visualSort(List<RangeSortable<T>>,XTextDocument,FunctionalTextViewCursor)",5,3,5,6
"org.jabref.model.openoffice.style.Citation.Citation(String)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.getBibEntry()",1,1,2,2
"org.jabref.model.openoffice.style.Citation.getCitationKey()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.getIsFirstAppearanceOfSource()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.getLookupResult()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.getNumber()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.getNumberOrThrow()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.getPageInfo()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.getUniqueLetter()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.isUnresolved()",0,1,1,1
"org.jabref.model.openoffice.style.Citation.lookup(BibDatabase,String)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.lookup(List<BibDatabase>,String)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.lookupInDatabases(List<BibDatabase>)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.setIsFirstAppearanceOfSource(boolean)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.setLookupResult(OOPair<Citation, Optional<CitationLookupResult>>)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.setLookupResult(Optional<CitationLookupResult>)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.setNumber(OOPair<Citation, Optional<Integer>>)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.setNumber(Optional<Integer>)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.setPageInfo(Optional<OOText>)",1,2,1,2
"org.jabref.model.openoffice.style.Citation.setUniqueLetter(OOPair<Citation, Optional<String>>)",0,1,1,1
"org.jabref.model.openoffice.style.Citation.setUniqueLetter(Optional<String>)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.CitationGroup(OODataModel,CitationGroupId,CitationType,List<Citation>,Optional<String>)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.getCitationMarker()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.getCitationsInLocalOrder()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.getIndexInGlobalOrder()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.getLocalOrder()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.getReferenceMarkNameForLinking()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.imposeLocalOrder(Comparator<BibEntry>)",2,1,3,3
"org.jabref.model.openoffice.style.CitationGroup.numberOfCitations()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.setCitationMarker(Optional<OOText>)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.setIndexInGlobalOrder(Optional<Integer>)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroup.setReferenceMarkNameForLinking(Optional<String>)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroupId.CitationGroupId(String)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroupId.citationGroupIdAsString()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.CitationGroups(Map<CitationGroupId, CitationGroup>)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.afterCreateCitationGroup(CitationGroup)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.afterRemoveCitationGroup(CitationGroup)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.citationGroupsProvideReferenceMarkNameForLinking()",3,3,2,3
"org.jabref.model.openoffice.style.CitationGroups.createNumberedBibliographySortedByComparator(Comparator<BibEntry>)",1,2,1,2
"org.jabref.model.openoffice.style.CitationGroups.createNumberedBibliographySortedInOrderOfAppearance()",1,2,1,2
"org.jabref.model.openoffice.style.CitationGroups.createPlainBibliographySortedByComparator(Comparator<BibEntry>)",1,2,1,2
"org.jabref.model.openoffice.style.CitationGroups.distributeToCitations(List<CitationPath>,Consumer<OOPair<Citation, T>>,T)",3,3,3,3
"org.jabref.model.openoffice.style.CitationGroups.getBibliography()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.getCitationGroup(CitationGroupId)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.getCitationGroupsInGlobalOrder()",1,2,1,2
"org.jabref.model.openoffice.style.CitationGroups.getCitationGroupsUnordered()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.getCitedKeysSortedInOrderOfAppearance()",8,2,4,5
"org.jabref.model.openoffice.style.CitationGroups.getCitedKeysUnordered()",7,1,4,4
"org.jabref.model.openoffice.style.CitationGroups.getUnresolvedKeys()",3,1,3,3
"org.jabref.model.openoffice.style.CitationGroups.hasGlobalOrder()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.imposeLocalOrder(Comparator<BibEntry>)",1,1,2,2
"org.jabref.model.openoffice.style.CitationGroups.lookupCitations(List<BibDatabase>)",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.numberOfCitationGroups()",0,1,1,1
"org.jabref.model.openoffice.style.CitationGroups.setGlobalOrder(List<CitationGroupId>)",2,2,2,3
"org.jabref.model.openoffice.style.CitationLookupResult.CitationLookupResult(BibEntry,BibDatabase)",0,1,1,1
"org.jabref.model.openoffice.style.CitationLookupResult.equals(Object)",3,3,2,4
"org.jabref.model.openoffice.style.CitationLookupResult.hashCode()",0,1,1,1
"org.jabref.model.openoffice.style.CitationPath.CitationPath(CitationGroupId,int)",0,1,1,1
"org.jabref.model.openoffice.style.CitationType.inParenthesis()",1,1,1,3
"org.jabref.model.openoffice.style.CitationType.withText()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.CitedKey(String,CitationPath,Citation)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.addPath(CitationPath,Citation)",3,4,1,4
"org.jabref.model.openoffice.style.CitedKey.distributeLookupResult(CitationGroups)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.distributeNumber(CitationGroups)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.distributeUniqueLetter(CitationGroups)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.getBibEntry()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.getCitationKey()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.getCitationPaths()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.getLookupResult()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.getNormalizedCitationMarker()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.getNumber()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.getUniqueLetter()",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.lookupInDatabases(List<BibDatabase>)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.setNormalizedCitationMarker(Optional<OOText>)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.setNumber(Optional<Integer>)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKey.setUniqueLetter(Optional<String>)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKeys.CitedKeys(LinkedHashMap<String, CitedKey>)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKeys.distributeLookupResults(CitationGroups)",1,1,2,2
"org.jabref.model.openoffice.style.CitedKeys.distributeNumbers(CitationGroups)",1,1,2,2
"org.jabref.model.openoffice.style.CitedKeys.distributeUniqueLetters(CitationGroups)",1,1,2,2
"org.jabref.model.openoffice.style.CitedKeys.get(String)",0,1,1,1
"org.jabref.model.openoffice.style.CitedKeys.lookupInDatabases(List<BibDatabase>)",1,1,2,2
"org.jabref.model.openoffice.style.CitedKeys.numberCitedKeysInCurrentOrder()",4,1,3,3
"org.jabref.model.openoffice.style.CitedKeys.sortByComparator(Comparator<BibEntry>)",1,1,2,2
"org.jabref.model.openoffice.style.CitedKeys.values()",0,1,1,1
"org.jabref.model.openoffice.style.CompareCitation.CompareCitation(Comparator<BibEntry>,boolean)",0,1,1,1
"org.jabref.model.openoffice.style.CompareCitation.compare(ComparableCitation,ComparableCitation)",1,1,2,2
"org.jabref.model.openoffice.style.CompareCitedKey.CompareCitedKey(Comparator<BibEntry>,boolean)",0,1,1,1
"org.jabref.model.openoffice.style.CompareCitedKey.compare(ComparableCitedKey,ComparableCitedKey)",6,4,5,6
"org.jabref.model.openoffice.style.OODataModel.fakePageInfos(String,int)",2,1,3,3
"org.jabref.model.openoffice.style.PageInfo.PageInfo()",0,1,1,1
"org.jabref.model.openoffice.style.PageInfo.comparePageInfo(Optional<OOText>,Optional<OOText>)",4,4,2,5
"org.jabref.model.openoffice.style.PageInfo.normalizePageInfo(Optional<OOText>)",3,3,5,5
"org.jabref.model.openoffice.uno.CreationException.CreationException(String)",0,1,1,1
"org.jabref.model.openoffice.uno.NoDocumentException.NoDocumentException()",0,1,1,1
"org.jabref.model.openoffice.uno.NoDocumentException.NoDocumentException(String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoBookmark.UnoBookmark()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoBookmark.create(XTextDocument,String,XTextRange,boolean)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoBookmark.getAnchor(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoBookmark.getNameAccess(XTextDocument)",1,1,1,2
"org.jabref.model.openoffice.uno.UnoBookmark.removeIfExists(XTextDocument,String)",5,3,2,4
"org.jabref.model.openoffice.uno.UnoCast.UnoCast()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoCast.cast(Class<T>,Object)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoCrossRef.UnoCrossRef()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoCrossRef.insertReferenceToPageNumberOfReferenceMark(XTextDocument,String,XTextRange)",7,1,2,8
"org.jabref.model.openoffice.uno.UnoCrossRef.refresh(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoCursor.UnoCursor()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoCursor.createTextCursorByRange(XTextRange)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoCursor.getTextCursorOfTextContentAnchor(XTextContent)",2,3,3,3
"org.jabref.model.openoffice.uno.UnoCursor.getViewCursor(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoNameAccess.UnoNameAccess()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoNameAccess.getTextContentByName(XNameAccess,String)",1,1,2,2
"org.jabref.model.openoffice.uno.UnoNamed.UnoNamed()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoNamed.insertNamedTextContent(XTextDocument,String,String,XTextRange,boolean)",1,1,2,2
"org.jabref.model.openoffice.uno.UnoProperties.UnoProperties()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.asPropertySet(XPropertyContainer)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.getPropertyNames(Property[])",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.getPropertyNames(XPropertyContainer)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.getPropertyNames(XPropertySet)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.getPropertyNames(XPropertySetInfo)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.getPropertySetInfo(XPropertyContainer)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.getPropertySetInfo(XPropertySet)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoProperties.getValueAsObject(XPropertyContainer,String)",1,2,2,2
"org.jabref.model.openoffice.uno.UnoProperties.getValueAsObject(XPropertySet,String)",1,1,2,2
"org.jabref.model.openoffice.uno.UnoRedlines.countRedlines(XTextDocument)",8,4,3,5
"org.jabref.model.openoffice.uno.UnoRedlines.getRecordChanges(XTextDocument)",1,1,1,2
"org.jabref.model.openoffice.uno.UnoRedlines.getRedlinesSupplier(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoReferenceMark.UnoReferenceMark()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoReferenceMark.create(XTextDocument,String,XTextRange,boolean)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoReferenceMark.getAnchor(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoReferenceMark.getAsTextContent(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoReferenceMark.getListOfNames(XTextDocument)",1,2,1,2
"org.jabref.model.openoffice.uno.UnoReferenceMark.getNameAccess(XTextDocument)",1,1,1,2
"org.jabref.model.openoffice.uno.UnoReferenceMark.removeIfExists(XTextDocument,String)",5,3,2,4
"org.jabref.model.openoffice.uno.UnoScreenRefresh.UnoScreenRefresh()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoScreenRefresh.hasControllersLocked(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoScreenRefresh.lockControllers(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoScreenRefresh.unlockControllers(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoSelection.UnoSelection()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoSelection.getSelectionAsXServiceInfo(XTextDocument)",3,4,4,4
"org.jabref.model.openoffice.uno.UnoSelection.getSelectionSupplier(XTextDocument)",3,4,4,4
"org.jabref.model.openoffice.uno.UnoSelection.select(XTextDocument,Object)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoStyle.UnoStyle()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoStyle.getCharacterStyle(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoStyle.getInternalNameOfCharacterStyle(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoStyle.getInternalNameOfParagraphStyle(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoStyle.getInternalNameOfStyle(XTextDocument,String,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoStyle.getParagraphStyle(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoStyle.getStyleFromFamily(XTextDocument,String,String)",2,1,3,3
"org.jabref.model.openoffice.uno.UnoTextDocument.UnoTextDocument()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoTextDocument.getCurrentController(XTextDocument)",2,3,3,3
"org.jabref.model.openoffice.uno.UnoTextDocument.getDocumentProperties(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoTextDocument.getFrameTitle(XTextDocument)",4,4,5,5
"org.jabref.model.openoffice.uno.UnoTextDocument.isDocumentConnectionMissing(XTextDocument)",6,1,2,5
"org.jabref.model.openoffice.uno.UnoTextRange.UnoTextRange()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoTextRange.comparables(XTextRange,XTextRange)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoTextRange.compareEnds(XTextRange,XTextRange)",1,2,1,2
"org.jabref.model.openoffice.uno.UnoTextRange.compareStarts(XTextRange,XTextRange)",1,2,1,2
"org.jabref.model.openoffice.uno.UnoTextRange.compareStartsThenEnds(XTextRange,XTextRange)",1,2,1,2
"org.jabref.model.openoffice.uno.UnoTextRange.compareStartsThenEndsUnsafe(XTextRangeCompare,XTextRange,XTextRange)",1,2,1,2
"org.jabref.model.openoffice.uno.UnoTextRange.compareStartsUnsafe(XTextRangeCompare,XTextRange,XTextRange)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoTextRange.getFootnoteMarkRange(XTextRange)",1,2,2,2
"org.jabref.model.openoffice.uno.UnoTextSection.create(XTextDocument,String,XTextRange,boolean)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoTextSection.getAnchor(XTextDocument,String)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoTextSection.getByName(XTextDocument,String)",1,1,2,2
"org.jabref.model.openoffice.uno.UnoTextSection.getNameAccess(XTextDocument)",1,1,1,2
"org.jabref.model.openoffice.uno.UnoUndo.UnoUndo()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoUndo.enterUndoContext(XTextDocument,String)",1,1,2,2
"org.jabref.model.openoffice.uno.UnoUndo.getXUndoManager(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoUndo.leaveUndoContext(XTextDocument)",3,2,2,3
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty.UnoUserDefinedProperty()",0,1,1,1
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty.getListOfNames(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty.getPropertyContainer(XTextDocument)",0,1,1,1
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty.getStringValue(XTextDocument,String)",2,2,2,3
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty.remove(XTextDocument,String)",2,2,2,3
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty.removeIfExists(XTextDocument,String)",2,2,1,3
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty.setStringProperty(XTextDocument,String,String)",6,4,2,6
"org.jabref.model.openoffice.util.OOListUtil.makeIndices(int)",0,1,1,1
"org.jabref.model.openoffice.util.OOListUtil.map(List<T>,Function<T, U>)",0,1,1,1
"org.jabref.model.openoffice.util.OOListUtil.order(List<T>,Comparator<U>)",0,1,1,1
"org.jabref.model.openoffice.util.OOPair.OOPair(A,B)",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.OOResult(Optional<R>,Optional<E>)",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.asVoidResult()",2,2,2,2
"org.jabref.model.openoffice.util.OOResult.error(E)",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.get()",1,2,1,2
"org.jabref.model.openoffice.util.OOResult.getError()",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.getOptional()",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.ifError(Consumer<E>)",1,1,2,2
"org.jabref.model.openoffice.util.OOResult.ifPresent(Consumer<R>)",1,1,2,2
"org.jabref.model.openoffice.util.OOResult.isEmpty()",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.isError()",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.isOK()",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.isPresent()",0,1,1,1
"org.jabref.model.openoffice.util.OOResult.map(Function<R, S>)",2,2,2,2
"org.jabref.model.openoffice.util.OOResult.mapError(Function<E, F>)",2,2,2,2
"org.jabref.model.openoffice.util.OOResult.ok(R)",0,1,1,1
"org.jabref.model.openoffice.util.OOTuple3.OOTuple3(A,B,C)",0,1,1,1
"org.jabref.model.openoffice.util.OOVoidResult.OOVoidResult(Optional<E>)",0,1,1,1
"org.jabref.model.openoffice.util.OOVoidResult.error(E)",0,1,1,1
"org.jabref.model.openoffice.util.OOVoidResult.getError()",0,1,1,1
"org.jabref.model.openoffice.util.OOVoidResult.ifError(Consumer<E>)",1,1,2,2
"org.jabref.model.openoffice.util.OOVoidResult.isError()",0,1,1,1
"org.jabref.model.openoffice.util.OOVoidResult.isOK()",0,1,1,1
"org.jabref.model.openoffice.util.OOVoidResult.mapError(Function<E, F>)",2,2,2,2
"org.jabref.model.openoffice.util.OOVoidResult.ok()",0,1,1,1
"org.jabref.model.paging.Page.Page(String,int)",0,1,1,1
"org.jabref.model.paging.Page.Page(String,int,Collection<T>)",0,1,1,1
"org.jabref.model.paging.Page.getContent()",0,1,1,1
"org.jabref.model.paging.Page.getPageNumber()",0,1,1,1
"org.jabref.model.paging.Page.getQuery()",0,1,1,1
"org.jabref.model.paging.Page.getSize()",0,1,1,1
"org.jabref.model.paging.PageTest.getContentTest()",0,1,1,1
"org.jabref.model.paging.PageTest.getPageNumberTest()",0,1,1,1
"org.jabref.model.paging.PageTest.getQueryTest()",0,1,1,1
"org.jabref.model.paging.PageTest.getSizeTest()",0,1,1,1
"org.jabref.model.paging.PageTest.setup()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.FileAnnotation(PDAnnotation,int)",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.FileAnnotation(PDAnnotation,int,FileAnnotation)",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.FileAnnotation(String,LocalDateTime,int,String,FileAnnotationType,Optional<FileAnnotation>)",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.abbreviateAnnotationName(String)",1,2,2,2
"org.jabref.model.pdf.FileAnnotation.equals(Object)",4,3,7,9
"org.jabref.model.pdf.FileAnnotation.extractModifiedTime(String)",4,2,5,5
"org.jabref.model.pdf.FileAnnotation.getAnnotationType()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.getAuthor()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.getContent()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.getLinkedFileAnnotation()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.getPage()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.getTimeModified()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.hasLinkedAnnotation()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.hashCode()",0,1,1,1
"org.jabref.model.pdf.FileAnnotation.parseContent(String)",2,3,1,3
"org.jabref.model.pdf.FileAnnotation.toString()",0,1,1,1
"org.jabref.model.pdf.FileAnnotationTest.testAbbreviateAnnotationName()",0,1,1,1
"org.jabref.model.pdf.FileAnnotationTest.testParseDateMinusBeforeTimezone()",0,1,1,1
"org.jabref.model.pdf.FileAnnotationTest.testParseDateNoTimezone()",0,1,1,1
"org.jabref.model.pdf.FileAnnotationTest.testParseDatePlusBeforeTimezone()",0,1,1,1
"org.jabref.model.pdf.FileAnnotationTest.testParseNotADate()",0,1,1,1
"org.jabref.model.pdf.FileAnnotationType.FileAnnotationType(String,boolean)",0,1,1,1
"org.jabref.model.pdf.FileAnnotationType.isLinkedFileAnnotationType()",0,1,1,1
"org.jabref.model.pdf.FileAnnotationType.isMarkedFileAnnotationType(String)",1,1,1,2
"org.jabref.model.pdf.FileAnnotationType.parse(PDAnnotation)",1,1,2,2
"org.jabref.model.pdf.FileAnnotationType.toString()",0,1,1,1
"org.jabref.model.pdf.search.EnglishStemAnalyzer.createComponents(String)",0,1,1,1
"org.jabref.model.pdf.search.PdfSearchResults.PdfSearchResults()",0,1,1,1
"org.jabref.model.pdf.search.PdfSearchResults.PdfSearchResults(List<SearchResult>)",0,1,1,1
"org.jabref.model.pdf.search.PdfSearchResults.getSearchResults()",0,1,1,1
"org.jabref.model.pdf.search.PdfSearchResults.getSearchResultsByPath()",4,1,3,3
"org.jabref.model.pdf.search.PdfSearchResults.getSortedByScore()",0,1,1,1
"org.jabref.model.pdf.search.PdfSearchResults.numSearchResults()",0,1,1,1
"org.jabref.model.pdf.search.SearchResult.SearchResult(IndexSearcher,Query,ScoreDoc)",2,1,3,3
"org.jabref.model.pdf.search.SearchResult.getAnnotationsResultStringsHtml()",0,1,1,1
"org.jabref.model.pdf.search.SearchResult.getContentResultStringsHtml()",0,1,1,1
"org.jabref.model.pdf.search.SearchResult.getFieldContents(IndexSearcher,ScoreDoc,String)",1,2,1,2
"org.jabref.model.pdf.search.SearchResult.getLuceneScore()",0,1,1,1
"org.jabref.model.pdf.search.SearchResult.getModified()",0,1,1,1
"org.jabref.model.pdf.search.SearchResult.getPageNumber()",0,1,1,1
"org.jabref.model.pdf.search.SearchResult.getPath()",0,1,1,1
"org.jabref.model.pdf.search.SearchResult.isResultFor(BibEntry)",0,1,1,1
"org.jabref.model.push.PushToApplicationConstants.PushToApplicationConstants()",0,1,1,1
"org.jabref.model.search.GroupSearchQuery.GroupSearchQuery(String,EnumSet<SearchFlags>)",0,1,1,1
"org.jabref.model.search.GroupSearchQuery.getCaseSensitiveDescription()",2,2,1,2
"org.jabref.model.search.GroupSearchQuery.getRegularExpressionDescription()",2,2,1,2
"org.jabref.model.search.GroupSearchQuery.getRule()",0,1,1,1
"org.jabref.model.search.GroupSearchQuery.getSearchExpression()",0,1,1,1
"org.jabref.model.search.GroupSearchQuery.getSearchFlags()",0,1,1,1
"org.jabref.model.search.GroupSearchQuery.getSearchRule()",0,1,1,1
"org.jabref.model.search.GroupSearchQuery.isMatch(BibEntry)",0,1,1,1
"org.jabref.model.search.GroupSearchQuery.toString()",0,1,1,1
"org.jabref.model.search.matchers.AndMatcher.isMatch(BibEntry)",0,1,1,1
"org.jabref.model.search.matchers.MatcherSet.addRule(SearchMatcher)",0,1,1,1
"org.jabref.model.search.matchers.MatcherSet.equals(Object)",3,3,2,4
"org.jabref.model.search.matchers.MatcherSet.hashCode()",0,1,1,1
"org.jabref.model.search.matchers.MatcherSet.toString()",0,1,1,1
"org.jabref.model.search.matchers.MatcherSets.build(MatcherType)",2,2,1,2
"org.jabref.model.search.matchers.MatcherSetsTest.testBuildAnd()",0,1,1,1
"org.jabref.model.search.matchers.MatcherSetsTest.testBuildNotWithFalse()",0,1,1,1
"org.jabref.model.search.matchers.MatcherSetsTest.testBuildNotWithTrue()",0,1,1,1
"org.jabref.model.search.matchers.MatcherSetsTest.testBuildOr()",0,1,1,1
"org.jabref.model.search.matchers.NotMatcher.NotMatcher(SearchMatcher)",0,1,1,1
"org.jabref.model.search.matchers.NotMatcher.isMatch(BibEntry)",0,1,1,1
"org.jabref.model.search.matchers.OrMatcher.isMatch(BibEntry)",0,1,1,1
"org.jabref.model.search.rules.ContainBasedSearchRule.ContainBasedSearchRule(EnumSet<SearchFlags>)",0,1,1,1
"org.jabref.model.search.rules.ContainBasedSearchRule.applyRule(String,BibEntry)",11,3,6,7
"org.jabref.model.search.rules.ContainBasedSearchRule.getFulltextResults(String,BibEntry)",5,2,5,5
"org.jabref.model.search.rules.ContainBasedSearchRule.getSearchFlags()",0,1,1,1
"org.jabref.model.search.rules.ContainBasedSearchRule.validateSearchStrings(String)",0,1,1,1
"org.jabref.model.search.rules.ContainBasedSearchRuleTest.makeBibtexEntry()",0,1,1,1
"org.jabref.model.search.rules.ContainBasedSearchRuleTest.testBasicSearchParsing()",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor.BibtexSearchVisitor(EnumSet<SearchFlags>,BibEntry)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor.comparison(String,ComparisonOperator,String)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor.visitBinaryExpression(BinaryExpressionContext)",4,2,4,4
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor.visitComparison(ComparisonContext)",4,2,4,4
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor.visitParenExpression(ParenExpressionContext)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor.visitStart(StartContext)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor.visitUnaryExpression(UnaryExpressionContext)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.Comparator.Comparator(String,String,ComparisonOperator,EnumSet<SearchFlags>)",3,1,1,4
"org.jabref.model.search.rules.GrammarBasedSearchRule.Comparator.compare(BibEntry)",10,6,7,8
"org.jabref.model.search.rules.GrammarBasedSearchRule.Comparator.matchFieldKey()",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.Comparator.matchFieldValue(String)",4,4,4,4
"org.jabref.model.search.rules.GrammarBasedSearchRule.ComparisonOperator.build(String)",5,3,4,5
"org.jabref.model.search.rules.GrammarBasedSearchRule.GrammarBasedSearchRule(EnumSet<SearchFlags>)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.ThrowingErrorListener.syntaxError(Recognizer<?, ?>,Object,int,int,String,RecognitionException)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.applyRule(String,BibEntry)",1,1,2,2
"org.jabref.model.search.rules.GrammarBasedSearchRule.getFulltextResults(String,BibEntry)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.getQuery()",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.getSearchFlags()",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.getTree()",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.init(String)",4,3,3,5
"org.jabref.model.search.rules.GrammarBasedSearchRule.isValid(EnumSet<SearchFlags>,String)",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRule.validateSearchStrings(String)",1,1,2,2
"org.jabref.model.search.rules.GrammarBasedSearchRuleTest.applyRuleDoesNotMatchSingleTermWithRegex()",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRuleTest.applyRuleMatchesSingleTermWithRegex()",0,1,1,1
"org.jabref.model.search.rules.GrammarBasedSearchRuleTest.makeBibtexEntry()",0,1,1,1
"org.jabref.model.search.rules.MockSearchMatcher.MockSearchMatcher(boolean)",0,1,1,1
"org.jabref.model.search.rules.MockSearchMatcher.isMatch(BibEntry)",0,1,1,1
"org.jabref.model.search.rules.RegexBasedSearchRule.RegexBasedSearchRule(EnumSet<SearchFlags>)",0,1,1,1
"org.jabref.model.search.rules.RegexBasedSearchRule.applyRule(String,BibEntry)",8,4,3,6
"org.jabref.model.search.rules.RegexBasedSearchRule.getFulltextResults(String,BibEntry)",5,2,5,5
"org.jabref.model.search.rules.RegexBasedSearchRule.getSearchFlags()",0,1,1,1
"org.jabref.model.search.rules.RegexBasedSearchRule.validateSearchStrings(String)",3,1,2,4
"org.jabref.model.search.rules.SearchRules.SearchRules()",0,1,1,1
"org.jabref.model.search.rules.SearchRules.getSearchRule(EnumSet<SearchFlags>)",2,2,1,2
"org.jabref.model.search.rules.SearchRules.getSearchRuleByQuery(String,EnumSet<SearchFlags>)",3,3,2,3
"org.jabref.model.search.rules.SearchRules.isSimpleQuery(String)",0,1,1,1
"org.jabref.model.search.rules.SentenceAnalyzer.SentenceAnalyzer(String)",0,1,1,1
"org.jabref.model.search.rules.SentenceAnalyzer.getWords()",20,1,10,11
"org.jabref.model.search.rules.SentenceAnalyzerTest.getParameters()",0,1,1,1
"org.jabref.model.search.rules.SentenceAnalyzerTest.testGetWords(List<String>,String)",0,1,1,1
"org.jabref.model.strings.LatexToUnicodeAdapter.format(String)",0,1,1,1
"org.jabref.model.strings.LatexToUnicodeAdapter.parse(String)",1,2,2,2
"org.jabref.model.strings.StringUtil.addWrappedLine(StringBuilder,String,int,String)",4,3,3,4
"org.jabref.model.strings.StringUtil.boldHTML(String)",0,1,1,1
"org.jabref.model.strings.StringUtil.boldHTML(String,String)",1,2,1,2
"org.jabref.model.strings.StringUtil.booleanToBinaryString(boolean)",1,1,1,2
"org.jabref.model.strings.StringUtil.capitalizeFirst(String)",2,2,2,2
"org.jabref.model.strings.StringUtil.containsIgnoreCase(String,String)",0,1,1,1
"org.jabref.model.strings.StringUtil.decodeStringDoubleArray(String)",14,3,9,12
"org.jabref.model.strings.StringUtil.getCorrectFileName(String,String)",3,4,1,4
"org.jabref.model.strings.StringUtil.getPart(String,int,boolean)",10,4,5,10
"org.jabref.model.strings.StringUtil.getStringAsSentences(String)",0,1,1,1
"org.jabref.model.strings.StringUtil.getStringAsWords(String)",0,1,1,1
"org.jabref.model.strings.StringUtil.ignoreCurlyBracket(String)",1,1,2,2
"org.jabref.model.strings.StringUtil.intValueOf(String)",14,5,10,14
"org.jabref.model.strings.StringUtil.intValueOfOptional(String)",14,5,13,14
"org.jabref.model.strings.StringUtil.isBlank(Optional<String>)",0,1,1,1
"org.jabref.model.strings.StringUtil.isBlank(String)",0,1,1,1
"org.jabref.model.strings.StringUtil.isInCitationMarks(String)",4,2,4,4
"org.jabref.model.strings.StringUtil.isInCurlyBrackets(String)",19,3,5,9
"org.jabref.model.strings.StringUtil.isInSquareBrackets(String)",4,2,4,4
"org.jabref.model.strings.StringUtil.isNotBlank(Optional<String>)",1,1,2,2
"org.jabref.model.strings.StringUtil.isNotBlank(String)",0,1,1,1
"org.jabref.model.strings.StringUtil.isNullOrEmpty(String)",1,1,2,2
"org.jabref.model.strings.StringUtil.join(String[],String,int,int)",3,2,2,4
"org.jabref.model.strings.StringUtil.limitStringLength(String,int)",2,3,1,3
"org.jabref.model.strings.StringUtil.putBracesAroundCapitals(String)",15,1,11,16
"org.jabref.model.strings.StringUtil.quote(String,String,char)",5,2,4,5
"org.jabref.model.strings.StringUtil.quoteForHTML(String)",1,1,2,2
"org.jabref.model.strings.StringUtil.quoteStringIfSpaceIsContained(String)",2,2,1,2
"org.jabref.model.strings.StringUtil.removeBracesAroundCapitals(String)",1,1,1,2
"org.jabref.model.strings.StringUtil.removeSingleBracesAroundCapitals(String)",1,1,2,2
"org.jabref.model.strings.StringUtil.repeat(int,char)",1,1,2,2
"org.jabref.model.strings.StringUtil.repeatSpaces(int)",0,1,1,1
"org.jabref.model.strings.StringUtil.replaceSpecialCharacters(String)",1,1,2,2
"org.jabref.model.strings.StringUtil.shaveString(String)",4,3,4,5
"org.jabref.model.strings.StringUtil.stripAccents(String)",0,1,1,1
"org.jabref.model.strings.StringUtil.stripBrackets(String)",1,2,2,2
"org.jabref.model.strings.StringUtil.stripNonValidXMLCharacters(String)",8,2,4,11
"org.jabref.model.strings.StringUtil.substringBetween(String,String,String)",0,1,1,1
"org.jabref.model.strings.StringUtil.tokenizeToList(String,String)",1,1,2,2
"org.jabref.model.strings.StringUtil.unifyLineBreaks(String,String)",0,1,1,1
"org.jabref.model.strings.StringUtil.unquote(String,char)",8,1,5,5
"org.jabref.model.strings.StringUtil.wrap(String,int,String)",4,1,3,3
"org.jabref.model.strings.StringUtilTest.StringUtilClassIsSmall()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.getQuoteStringIfSpaceIsContainedData()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.replaceSpecialCharactersWithNonNormalizedUnicode()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testBoldHTML()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testBoldHTMLReturnsAlternativeTextIfNull()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testBoldHTMLReturnsOriginalTextIfNonNull()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testBooleanToBinaryString()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testCapitalizeFirst()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testDecodeStringDoubleArray()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testFindEncodingsForString()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testGetCorrectFileName()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testGetPart()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testGuoteStringIfSpaceIsContained(String,String)",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfExceptionIfStringContainsLetter()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfExceptionIfStringNull()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfExceptionfIfStringEmpty()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfLongString()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfSingleDigit()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfStartWithZeros()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfWithNullExceptionIfStringContainsLetter()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfWithNullExceptionIfStringNull()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfWithNullExceptionfIfStringEmpty()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfWithNullLongString()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfWithNullSingleDigit()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIntValueOfWithNullStartWithZeros()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIsInCitationMarks()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIsInCurlyBrackets()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testIsInSquareBrackets()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testJoin()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testLimitStringLengthLimiting()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testLimitStringLengthNullInput()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testLimitStringLengthShort()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testPutBracesAroundCapitals()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testQuoteForHTML()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testQuoteMoreComplicated()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testQuoteNullQuotation()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testQuoteNullString()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testQuoteQuotationCharacter()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testQuoteSimple()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testRemoveBracesAroundCapitals()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testRepeat()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testRepeatSpaces()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testReplaceSpecialCharacters()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testShaveString()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testStripBrackets()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testUnifyLineBreaks()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testUnquote()",0,1,1,1
"org.jabref.model.strings.StringUtilTest.testWrap()",0,1,1,1
"org.jabref.model.strings.UnicodeToReadableCharMap.UnicodeToReadableCharMap()",0,1,1,1
"org.jabref.model.study.FetchResult.FetchResult(String,BibDatabase)",0,1,1,1
"org.jabref.model.study.FetchResult.getFetchResult()",0,1,1,1
"org.jabref.model.study.FetchResult.getFetcherName()",0,1,1,1
"org.jabref.model.study.QueryResult.QueryResult(String,List<FetchResult>)",0,1,1,1
"org.jabref.model.study.QueryResult.getQuery()",0,1,1,1
"org.jabref.model.study.QueryResult.getResultsPerFetcher()",0,1,1,1
"org.jabref.model.study.Study.Study()",0,1,1,1
"org.jabref.model.study.Study.Study(List<String>,String,List<String>,List<StudyQuery>,List<StudyDatabase>)",0,1,1,1
"org.jabref.model.study.Study.equals(Object)",19,8,8,15
"org.jabref.model.study.Study.equalsBesideLastSearchDate(Object)",16,7,7,13
"org.jabref.model.study.Study.getAuthors()",0,1,1,1
"org.jabref.model.study.Study.getDatabases()",0,1,1,1
"org.jabref.model.study.Study.getLastSearchDate()",0,1,1,1
"org.jabref.model.study.Study.getQueries()",0,1,1,1
"org.jabref.model.study.Study.getResearchQuestions()",0,1,1,1
"org.jabref.model.study.Study.getTitle()",0,1,1,1
"org.jabref.model.study.Study.hashCode()",0,1,1,1
"org.jabref.model.study.Study.setAuthors(List<String>)",0,1,1,1
"org.jabref.model.study.Study.setDatabases(List<StudyDatabase>)",0,1,1,1
"org.jabref.model.study.Study.setLastSearchDate(LocalDate)",0,1,1,1
"org.jabref.model.study.Study.setQueries(List<StudyQuery>)",0,1,1,1
"org.jabref.model.study.Study.setResearchQuestions(List<String>)",0,1,1,1
"org.jabref.model.study.Study.setTitle(String)",0,1,1,1
"org.jabref.model.study.Study.toString()",0,1,1,1
"org.jabref.model.study.StudyDatabase.StudyDatabase()",0,1,1,1
"org.jabref.model.study.StudyDatabase.StudyDatabase(String,boolean)",0,1,1,1
"org.jabref.model.study.StudyDatabase.equals(Object)",5,4,3,6
"org.jabref.model.study.StudyDatabase.getName()",0,1,1,1
"org.jabref.model.study.StudyDatabase.hashCode()",2,1,2,3
"org.jabref.model.study.StudyDatabase.isEnabled()",0,1,1,1
"org.jabref.model.study.StudyDatabase.setEnabled(boolean)",0,1,1,1
"org.jabref.model.study.StudyDatabase.setName(String)",0,1,1,1
"org.jabref.model.study.StudyDatabase.toString()",0,1,1,1
"org.jabref.model.study.StudyQuery.StudyQuery()",0,1,1,1
"org.jabref.model.study.StudyQuery.StudyQuery(String)",0,1,1,1
"org.jabref.model.study.StudyQuery.equals(Object)",4,3,3,5
"org.jabref.model.study.StudyQuery.getQuery()",0,1,1,1
"org.jabref.model.study.StudyQuery.hashCode()",1,1,2,2
"org.jabref.model.study.StudyQuery.setQuery(String)",0,1,1,1
"org.jabref.model.study.StudyQuery.toString()",0,1,1,1
"org.jabref.model.texparser.Citation.Citation(Path,int,int,int,String)",3,3,2,4
"org.jabref.model.texparser.Citation.equals(Object)",4,3,6,8
"org.jabref.model.texparser.Citation.getColEnd()",0,1,1,1
"org.jabref.model.texparser.Citation.getColStart()",0,1,1,1
"org.jabref.model.texparser.Citation.getContext()",3,1,1,4
"org.jabref.model.texparser.Citation.getLine()",0,1,1,1
"org.jabref.model.texparser.Citation.getLineText()",0,1,1,1
"org.jabref.model.texparser.Citation.getPath()",0,1,1,1
"org.jabref.model.texparser.Citation.hashCode()",0,1,1,1
"org.jabref.model.texparser.Citation.toString()",0,1,1,1
"org.jabref.model.texparser.CitationTest.colStartColEndInBounds()",0,1,1,1
"org.jabref.model.texparser.CitationTest.colStartColEndNotInBounds()",0,1,1,1
"org.jabref.model.texparser.CitationTest.constructorColStartColEndInBoundsTest(int,int)",0,1,1,1
"org.jabref.model.texparser.CitationTest.constructorColStartColEndNotInBoundsTest(int,int)",0,1,1,1
"org.jabref.model.texparser.CitationTest.constructorLineLargerZeroTest(int)",0,1,1,1
"org.jabref.model.texparser.CitationTest.constructorLineSmallerEqualZeroTest(int)",0,1,1,1
"org.jabref.model.texparser.CitationTest.equalsTest()",0,1,1,1
"org.jabref.model.texparser.CitationTest.getColEndTest()",0,1,1,1
"org.jabref.model.texparser.CitationTest.getColStartTest()",0,1,1,1
"org.jabref.model.texparser.CitationTest.getContextTest()",0,1,1,1
"org.jabref.model.texparser.CitationTest.getLineTest()",0,1,1,1
"org.jabref.model.texparser.CitationTest.getLineTextTest()",0,1,1,1
"org.jabref.model.texparser.CitationTest.getPathTest()",0,1,1,1
"org.jabref.model.texparser.CitationTest.init()",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.LatexBibEntriesResolverResult(LatexParserResult)",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.addEntry(BibEntry)",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.equals(Object)",4,3,3,5
"org.jabref.model.texparser.LatexBibEntriesResolverResult.getBibFiles()",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.getCitations()",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.getLatexParserResult()",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.getNewEntries()",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.hashCode()",0,1,1,1
"org.jabref.model.texparser.LatexBibEntriesResolverResult.toString()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.LatexParserResult()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.addBibFile(Path,Path)",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.addFiles(List<Path>)",2,1,2,2
"org.jabref.model.texparser.LatexParserResult.addKey(String,Path,int,int,int,String)",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.equals(Object)",4,3,5,7
"org.jabref.model.texparser.LatexParserResult.getBibFiles()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.getCitations()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.getCitationsByKey(BibEntry)",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.getCitationsByKey(String)",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.getCitationsKeySet()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.getFileList()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.getNestedFiles()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.hashCode()",0,1,1,1
"org.jabref.model.texparser.LatexParserResult.toString()",0,1,1,1
"org.jabref.model.util.DummyFileUpdateMonitor.addListenerForFile(Path,FileUpdateListener)",0,1,1,1
"org.jabref.model.util.DummyFileUpdateMonitor.isActive()",0,1,1,1
"org.jabref.model.util.DummyFileUpdateMonitor.removeListener(Path,FileUpdateListener)",0,1,1,1
"org.jabref.model.util.DummyFileUpdateMonitor.shutdown()",0,1,1,1
"org.jabref.model.util.FileHelper.detectExtension(InputStream,Metadata)",1,2,2,2
"org.jabref.model.util.FileHelper.find(BibDatabaseContext,String,FilePreferences)",0,1,1,1
"org.jabref.model.util.FileHelper.find(String,List<Path>)",0,1,1,1
"org.jabref.model.util.FileHelper.find(String,Path)",3,3,3,3
"org.jabref.model.util.FileHelper.getFileExtension(Path)",0,1,1,1
"org.jabref.model.util.FileHelper.getFileExtension(String)",5,3,5,5
"org.jabref.model.util.FileHelper.isUrl(String)",1,1,1,2
"org.jabref.model.util.FileHelper.relativize(Path,List<Path>)",4,4,3,4
"org.jabref.model.util.FileHelperTest.extractFileExtension()",0,1,1,1
"org.jabref.model.util.FileHelperTest.fileExtensionFromUrl()",0,1,1,1
"org.jabref.model.util.FileHelperTest.testFileNameEmpty()",0,1,1,1
"org.jabref.model.util.ListUtil.allMatch(Iterable<T>,Predicate<T>)",3,3,2,3
"org.jabref.model.util.ListUtil.anyMatch(Iterable<T>,Predicate<T>)",3,3,2,3
"org.jabref.model.util.MultiKeyMap.MultiKeyMap(Class<K1>)",0,1,1,1
"org.jabref.model.util.MultiKeyMap.get(K1,K2)",2,2,2,2
"org.jabref.model.util.MultiKeyMap.put(K1,K2,V)",2,1,2,2
"org.jabref.model.util.MultiKeyMap.remove(K1)",0,1,1,1
"org.jabref.model.util.OptionalUtil.combine(Optional<T>,Optional<S>,BiFunction<T, S, R>)",3,2,3,3
"org.jabref.model.util.OptionalUtil.equals(Optional<T>,Optional<U>,BiPredicate<T, U>)",5,3,3,3
"org.jabref.model.util.OptionalUtil.flatMap(Optional<T>,Function<? super T, ? extends Collection<? extends R>>)",0,1,1,1
"org.jabref.model.util.OptionalUtil.flatMapFromStream(Optional<T>,Function<? super T, ? extends Stream<? extends R>>)",0,1,1,1
"org.jabref.model.util.OptionalUtil.isPresentAnd(Optional<T>,Predicate<T>)",1,1,2,2
"org.jabref.model.util.OptionalUtil.isPresentAndTrue(Optional<Boolean>)",1,1,2,2
"org.jabref.model.util.OptionalUtil.orElse(Optional<? extends T>,Optional<? extends T>)",2,2,2,2
"org.jabref.model.util.OptionalUtil.orElse(Optional<T>,S)",2,2,2,2
"org.jabref.model.util.OptionalUtil.toList(Optional<T>)",2,2,2,2
"org.jabref.model.util.OptionalUtil.toList(Optional<T>...)",0,1,1,1
"org.jabref.model.util.OptionalUtil.toStream(Optional<T>)",2,2,2,2
"org.jabref.model.util.ResultingStringState.ResultingStringState(int,String)",0,1,1,1
"org.jabref.model.util.TreeCollector.TreeCollector(Function<T, List<T>>,BiConsumer<T, T>,BiPredicate<T, T>)",0,1,1,1
"org.jabref.model.util.TreeCollector.accumulator()",6,1,3,3
"org.jabref.model.util.TreeCollector.characteristics()",0,1,1,1
"org.jabref.model.util.TreeCollector.combiner()",2,1,2,2
"org.jabref.model.util.TreeCollector.finisher()",0,1,1,1
"org.jabref.model.util.TreeCollector.merge(T,T)",5,1,3,3
"org.jabref.model.util.TreeCollector.mergeIntoTree(BiPredicate<T, T>)",0,1,1,1
"org.jabref.model.util.TreeCollector.supplier()",0,1,1,1
"org.jabref.performance.BibtexEntryGenerator.generateBibtexEntries(int)",1,1,2,2
"org.jabref.performance.BibtexEntryGenerator.generateBibtexEntry(int)",0,1,1,1
"org.jabref.preferences.AppearancePreferences.AppearancePreferences(boolean,int,Theme)",0,1,1,1
"org.jabref.preferences.AppearancePreferences.getMainFontSize()",0,1,1,1
"org.jabref.preferences.AppearancePreferences.getTheme()",0,1,1,1
"org.jabref.preferences.AppearancePreferences.mainFontSizeProperty()",0,1,1,1
"org.jabref.preferences.AppearancePreferences.setMainFontSize(int)",0,1,1,1
"org.jabref.preferences.AppearancePreferences.setShouldOverrideDefaultFontSize(boolean)",0,1,1,1
"org.jabref.preferences.AppearancePreferences.setTheme(Theme)",0,1,1,1
"org.jabref.preferences.AppearancePreferences.shouldOverrideDefaultFontSize()",0,1,1,1
"org.jabref.preferences.AppearancePreferences.shouldOverrideDefaultFontSizeProperty()",0,1,1,1
"org.jabref.preferences.AppearancePreferences.themeProperty()",0,1,1,1
"org.jabref.preferences.ExportComparator.compare(List<String>,List<String>)",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.ExternalApplicationsPreferences(String,boolean,String,String,boolean,String,boolean,String)",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.getCiteCommand()",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.getCustomFileBrowserCommand()",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.getCustomTerminalCommand()",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.getEmailSubject()",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.getPushToApplicationName()",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.shouldAutoOpenEmailAttachmentsFolder()",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.useCustomFileBrowser()",0,1,1,1
"org.jabref.preferences.ExternalApplicationsPreferences.useCustomTerminal()",0,1,1,1
"org.jabref.preferences.FilePreferences.FilePreferences(String,String,boolean,String,String,boolean)",0,1,1,1
"org.jabref.preferences.FilePreferences.downloadLinkedFilesProperty()",0,1,1,1
"org.jabref.preferences.FilePreferences.fileDirectoryPatternProperty()",0,1,1,1
"org.jabref.preferences.FilePreferences.fileNamePatternProperty()",0,1,1,1
"org.jabref.preferences.FilePreferences.getFileDirectory()",2,2,2,2
"org.jabref.preferences.FilePreferences.getFileDirectoryPattern()",0,1,1,1
"org.jabref.preferences.FilePreferences.getFileNamePattern()",0,1,1,1
"org.jabref.preferences.FilePreferences.getUser()",0,1,1,1
"org.jabref.preferences.FilePreferences.mainFileDirectoryProperty()",0,1,1,1
"org.jabref.preferences.FilePreferences.setDownloadLinkedFiles(boolean)",0,1,1,1
"org.jabref.preferences.FilePreferences.setFileDirectoryPattern(String)",0,1,1,1
"org.jabref.preferences.FilePreferences.setFileNamePattern(String)",0,1,1,1
"org.jabref.preferences.FilePreferences.setMainFileDirectory(String)",0,1,1,1
"org.jabref.preferences.FilePreferences.setStoreFilesRelativeToBibFile(boolean)",0,1,1,1
"org.jabref.preferences.FilePreferences.shouldDownloadLinkedFiles()",0,1,1,1
"org.jabref.preferences.FilePreferences.shouldStoreFilesRelativeToBibFile()",0,1,1,1
"org.jabref.preferences.FilePreferences.storeFilesRelativeToBibFileProperty()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.GeneralPreferences(Charset,BibDatabaseMode,boolean,boolean,boolean,boolean)",0,1,1,1
"org.jabref.preferences.GeneralPreferences.confirmDeleteProperty()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.defaultBibDatabaseModeProperty()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.defaultEncodingProperty()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.getDefaultBibDatabaseMode()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.getDefaultEncoding()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.isMemoryStickMode()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.isWarnAboutDuplicatesInInspectionProperty()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.memoryStickModeProperty()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.setConfirmDelete(boolean)",0,1,1,1
"org.jabref.preferences.GeneralPreferences.setDefaultBibDatabaseMode(BibDatabaseMode)",0,1,1,1
"org.jabref.preferences.GeneralPreferences.setDefaultEncoding(Charset)",0,1,1,1
"org.jabref.preferences.GeneralPreferences.setMemoryStickMode(boolean)",0,1,1,1
"org.jabref.preferences.GeneralPreferences.setShowAdvancedHints(boolean)",0,1,1,1
"org.jabref.preferences.GeneralPreferences.setWarnAboutDuplicatesInInspection(boolean)",0,1,1,1
"org.jabref.preferences.GeneralPreferences.shouldConfirmDelete()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.shouldShowAdvancedHints()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.showAdvancedHintsProperty()",0,1,1,1
"org.jabref.preferences.GeneralPreferences.warnAboutDuplicatesInInspection()",0,1,1,1
"org.jabref.preferences.GuiPreferences.GuiPreferences(double,double,double,double,boolean,boolean,List<String>,Path,double)",0,1,1,1
"org.jabref.preferences.GuiPreferences.getLastFilesOpened()",0,1,1,1
"org.jabref.preferences.GuiPreferences.getLastFocusedFile()",0,1,1,1
"org.jabref.preferences.GuiPreferences.getPositionX()",0,1,1,1
"org.jabref.preferences.GuiPreferences.getPositionY()",0,1,1,1
"org.jabref.preferences.GuiPreferences.getSidePaneWidth()",0,1,1,1
"org.jabref.preferences.GuiPreferences.getSizeX()",0,1,1,1
"org.jabref.preferences.GuiPreferences.getSizeY()",0,1,1,1
"org.jabref.preferences.GuiPreferences.isWindowMaximised()",0,1,1,1
"org.jabref.preferences.GuiPreferences.lastFocusedFileProperty()",0,1,1,1
"org.jabref.preferences.GuiPreferences.openLastEditedProperty()",0,1,1,1
"org.jabref.preferences.GuiPreferences.positionXProperty()",0,1,1,1
"org.jabref.preferences.GuiPreferences.positionYProperty()",0,1,1,1
"org.jabref.preferences.GuiPreferences.setLastFilesOpened(List<String>)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setLastFocusedFile(Path)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setOpenLastEdited(boolean)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setPositionX(double)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setPositionY(double)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setSidePaneWidth(double)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setSizeX(double)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setSizeY(double)",0,1,1,1
"org.jabref.preferences.GuiPreferences.setWindowMaximised(boolean)",0,1,1,1
"org.jabref.preferences.GuiPreferences.shouldOpenLastEdited()",0,1,1,1
"org.jabref.preferences.GuiPreferences.sidePaneWidthProperty()",0,1,1,1
"org.jabref.preferences.GuiPreferences.sizeXProperty()",0,1,1,1
"org.jabref.preferences.GuiPreferences.sizeYProperty()",0,1,1,1
"org.jabref.preferences.GuiPreferences.windowMaximisedProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.ImportExportPreferences(String,boolean,boolean,String,boolean,Path,String,Path)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.alwaysReformatOnSaveProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.exportWorkingDirectoryProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.getExportWorkingDirectory()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.getImportWorkingDirectory()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.getLastExportExtension()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.getNonResolvableFields()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.getNonWrappableFields()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.importWorkingDirectoryProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.lastExportExtensionProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.nonResolvableFieldsProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.nonWrappableFieldsProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.resolveStringsForAllStringsProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.resolveStringsForStandardBibtexFieldsProperty()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setAlwaysReformatOnSave(boolean)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setExportWorkingDirectory(Path)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setImportWorkingDirectory(Path)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setLastExportExtension(String)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setNonResolvableFields(String)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setNonWrappableFields(String)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setResolveStringsForAllStrings(boolean)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.setResolveStringsForStandardBibtexFields(boolean)",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.shouldAlwaysReformatOnSave()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.shouldResolveStringsForAllStrings()",0,1,1,1
"org.jabref.preferences.ImportExportPreferences.shouldResolveStringsForStandardBibtexFields()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.JabRefPreferences()",10,1,8,8
"org.jabref.preferences.JabRefPreferences.addPrefsRecursively(Preferences,Map<String, Object>)",3,1,3,3
"org.jabref.preferences.JabRefPreferences.clear()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.clearAllBibEntryTypes()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.clearBibEntryTypes(BibDatabaseMode)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.clearCitationKeyPatterns()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.clearEditedFiles()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.convertListToString(List<String>)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.createMainTableColumnSortOrder()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.createMainTableColumns()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.deleteKey(String)",2,2,2,2
"org.jabref.preferences.JabRefPreferences.exportPreferences(Path)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.exportPreferences(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.flush()",4,1,4,4
"org.jabref.preferences.JabRefPreferences.get(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.get(String,String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getAllDefaultTabFieldNames()",3,3,2,3
"org.jabref.preferences.JabRefPreferences.getAppearancePreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getAsOptional(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getAutoCompletePreferences()",2,1,2,3
"org.jabref.preferences.JabRefPreferences.getAutoLinkPreferences()",5,2,5,7
"org.jabref.preferences.JabRefPreferences.getBibEntryTypes(BibDatabaseMode)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getBoolean(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getBoolean(String,boolean)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getBooleanDefault(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getCitationKeyPatternPreferences()",2,1,2,3
"org.jabref.preferences.JabRefPreferences.getCleanupPreferences(JournalAbbreviationRepository)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getCleanupPreset()",3,1,3,3
"org.jabref.preferences.JabRefPreferences.getColumnPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getCustomExportFormats(JournalAbbreviationRepository)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getCustomImportFormats()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getDOIPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getDefaultTabNamesAndFields()",4,3,3,4
"org.jabref.preferences.JabRefPreferences.getDefaults()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getDefaultsDefaultCitationKeyPattern()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getDisplayGroupCount()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getDouble(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getDoubleDefault(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getEntryEditorPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getEntryEditorTabList()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getExportSaveOrder()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getExternalApplicationsPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getExternalFileTypes()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getFieldContentParserPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getFieldWriterPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getFileHistory()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getFileLinkPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getFilePreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getGeneralPreferences()",2,2,1,3
"org.jabref.preferences.JabRefPreferences.getGlobalCitationKeyPattern()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getGroupViewMode()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getGroupsPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getGuiPreferences()",4,2,2,3
"org.jabref.preferences.JabRefPreferences.getIdBasedFetcherForEntryGenerator()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getImportExportPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getImportFormatPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getImporterPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getInstance()",1,1,1,2
"org.jabref.preferences.JabRefPreferences.getInt(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getIntDefault(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getJournalAbbreviationPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getKeyBindingRepository()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getKeywordDelimiter()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getLanguage()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getLastPreferencesExportPath()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getLayoutFormatterPreferences(JournalAbbreviationRepository)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getMainTableNameFormatPreferences()",5,1,4,6
"org.jabref.preferences.JabRefPreferences.getMainTablePreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getMergeDiffMode()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getMrDlibPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getNameFormatterPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getNextUnit(Reader)",21,3,9,9
"org.jabref.preferences.JabRefPreferences.getObject(Preferences,String)",6,1,4,4
"org.jabref.preferences.JabRefPreferences.getOpenOfficePreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getOrCreateUserId()",2,2,2,2
"org.jabref.preferences.JabRefPreferences.getOwnerPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getPreferences()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getPrefsNodeForCustomizedEntryTypes(BibDatabaseMode)",1,1,3,3
"org.jabref.preferences.JabRefPreferences.getPreviewPreferences()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getPreviewStyle()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getProtectedTermsPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getProxyPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getPushToApplicationPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getRemotePreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getSavePreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getSavePreferencesForExport()",4,1,3,3
"org.jabref.preferences.JabRefPreferences.getSearchPreferences()",2,2,2,3
"org.jabref.preferences.JabRefPreferences.getSidePanePreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getSidePanePreferredPositions()",5,1,4,4
"org.jabref.preferences.JabRefPreferences.getSpecialFieldsPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getStringList(String)",3,2,3,4
"org.jabref.preferences.JabRefPreferences.getTelemetryPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getTheme()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.getTimestampPreferences()",1,2,1,2
"org.jabref.preferences.JabRefPreferences.getUser()",2,2,2,3
"org.jabref.preferences.JabRefPreferences.getVersionPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getVisiblePanes()",3,1,4,4
"org.jabref.preferences.JabRefPreferences.getWorkingDir()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.getXmpPreferences()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.hasKey(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.importPreferences(Path)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.insertDefaultCleanupPreset(Map<String, Object>)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.loadTableSaveOrder()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.purgeCustomExportFormats(int)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.purgeCustomImportFormats()",1,1,2,2
"org.jabref.preferences.JabRefPreferences.purgeSeries(String,int)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.put(String,String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.putBoolean(String,boolean)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.putDouble(String,double)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.putInt(String,Number)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.putInt(String,int)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.putStringList(String,List<String>)",1,2,2,2
"org.jabref.preferences.JabRefPreferences.remove(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.setCleanupPreset(CleanupPreset)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.setGroupViewMode(GroupViewMode)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.setLanguage(Language)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.setLanguageDependentDefaultValues()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.setOpenOfficePreferences(OpenOfficePreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.setPreviewStyle(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.setShouldWarnAboutDuplicatesForImport(boolean)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.setWorkingDirectory(Path)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.shouldAutosave()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.shouldOpenLastFilesOnStartup()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.shouldWarnAboutDuplicatesForImport()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeAutoCompletePreferences(AutoCompletePreferences)",3,1,3,3
"org.jabref.preferences.JabRefPreferences.storeBibEntryTypes(BibDatabaseMode,BibEntryTypesManager)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeBibEntryTypes(Collection<BibEntryType>,BibDatabaseMode)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.storeCitationKeyPatternPreferences(CitationKeyPatternPreferences)",1,1,4,4
"org.jabref.preferences.JabRefPreferences.storeColumnPreferences(ColumnPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeCustomEntryTypes(BibEntryTypesManager)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeCustomExportFormats(List<TemplateExporter>)",4,1,3,3
"org.jabref.preferences.JabRefPreferences.storeCustomImportFormats(Set<CustomImporter>)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.storeEntryEditorTabList(Map<String, Set<Field>>)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.storeExportSaveOrder(SaveOrderConfig)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeExternalApplicationsPreferences(ExternalApplicationsPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeExternalFileTypes(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeFileDirforDatabase(List<Path>)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeFileHistory(FileHistory)",1,1,2,2
"org.jabref.preferences.JabRefPreferences.storeGlobalCitationKeyPattern(GlobalCitationKeyPattern)",7,1,6,6
"org.jabref.preferences.JabRefPreferences.storeGroupsPreferences(GroupsPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeIdBasedFetcherForEntryGenerator(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeJournalAbbreviationPreferences(JournalAbbreviationPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeKeyBindingRepository(KeyBindingRepository)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeLastPreferencesExportPath(Path)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeMainTableNameFormatPreferences(MainTableNameFormatPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeMainTablePreferences(MainTablePreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeMergeDiffMode(String)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeNameFormatterPreferences(NameFormatterPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeOpenLastFilesOnStartup(boolean)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storePreviewPreferences(PreviewPreferences)",3,2,2,2
"org.jabref.preferences.JabRefPreferences.storePushToApplicationPreferences(PushToApplicationPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeShouldAutosave(boolean)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeSidePanePreferredPositions(Map<SidePaneType, Integer>)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeSpecialFieldsPreferences(SpecialFieldsPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeVersionPreferences(VersionPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeVisiblePanes(Set<SidePaneType>)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.storeXmpPreferences(XmpPreferences)",0,1,1,1
"org.jabref.preferences.JabRefPreferences.updateColumnSortOrder()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.updateCustomImportFormats()",6,1,4,4
"org.jabref.preferences.JabRefPreferences.updateEntryEditorTabList()",6,1,4,4
"org.jabref.preferences.JabRefPreferences.updateGlobalCitationKeyPattern()",4,1,4,4
"org.jabref.preferences.JabRefPreferences.updateLanguage()",0,1,1,1
"org.jabref.preferences.JabRefPreferences.updateMainTableColumns()",7,1,5,5
"org.jabref.preferences.JabRefPreferences.updatePreviewPreferences()",6,2,3,4
"org.jabref.preferences.JabRefPreferences.updateTheme()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.MrDlibPreferences(boolean,boolean,boolean,boolean)",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.acceptRecommendationsProperty()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.sendLanguageProperty()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.sendOsProperty()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.sendTimezoneProperty()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.setAcceptRecommendations(boolean)",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.setSendLanguage(boolean)",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.setSendOs(boolean)",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.setSendTimezone(boolean)",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.shouldAcceptRecommendations()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.shouldSendLanguage()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.shouldSendOs()",0,1,1,1
"org.jabref.preferences.MrDlibPreferences.shouldSendTimezone()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.PreferenceOption(String,Object,Object)",2,2,2,3
"org.jabref.preferences.PreferencesFilter.PreferenceOption.compareTo(PreferenceOption)",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.getDefaultValue()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.getKey()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.getType()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.getType(Object)",3,3,1,3
"org.jabref.preferences.PreferencesFilter.PreferenceOption.getValue()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.isChanged()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.isUnchanged()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferenceOption.toString()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.PreferencesFilter(PreferencesService)",0,1,1,1
"org.jabref.preferences.PreferencesFilter.getDeviatingPreferences()",0,1,1,1
"org.jabref.preferences.PreferencesFilter.getPreferenceOptions()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.Builder.Builder(PreviewPreferences)",0,1,1,1
"org.jabref.preferences.PreviewPreferences.Builder.build()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.Builder.withPreviewCycle(List<PreviewLayout>)",0,1,1,1
"org.jabref.preferences.PreviewPreferences.Builder.withPreviewCyclePosition(int)",4,1,3,3
"org.jabref.preferences.PreviewPreferences.Builder.withPreviewPanelDividerPosition(Number)",0,1,1,1
"org.jabref.preferences.PreviewPreferences.Builder.withPreviewStyle(String)",0,1,1,1
"org.jabref.preferences.PreviewPreferences.Builder.withShowAsExtraTab(boolean)",0,1,1,1
"org.jabref.preferences.PreviewPreferences.PreviewPreferences(List<PreviewLayout>,int,Number,String,String,boolean)",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getBuilder()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getCurrentPreviewStyle()",1,2,2,2
"org.jabref.preferences.PreviewPreferences.getDefaultPreviewStyle()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getLayoutFormatterPreferences()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getPreviewCycle()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getPreviewCyclePosition()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getPreviewPanelDividerPosition()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getPreviewStyle()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.getTextBasedPreviewLayout()",0,1,1,1
"org.jabref.preferences.PreviewPreferences.showPreviewAsExtraTab()",0,1,1,1
"org.jabref.preferences.PushToApplicationPreferences.PushToApplicationPreferences(Map<String, String>,String,String)",0,1,1,1
"org.jabref.preferences.PushToApplicationPreferences.getEmacsArguments()",0,1,1,1
"org.jabref.preferences.PushToApplicationPreferences.getPushToApplicationCommandPaths()",0,1,1,1
"org.jabref.preferences.PushToApplicationPreferences.getVimServer()",0,1,1,1
"org.jabref.preferences.PushToApplicationPreferences.withEmacsArguments(String)",0,1,1,1
"org.jabref.preferences.PushToApplicationPreferences.withPushToApplicationCommandPaths(Map<String, String>)",0,1,1,1
"org.jabref.preferences.PushToApplicationPreferences.withVimServer(String)",0,1,1,1
"org.jabref.preferences.SearchPreferences.SearchPreferences(SearchDisplayMode,EnumSet<SearchFlags>,boolean)",0,1,1,1
"org.jabref.preferences.SearchPreferences.SearchPreferences(SearchDisplayMode,boolean,boolean,boolean,boolean,boolean)",4,1,5,5
"org.jabref.preferences.SearchPreferences.getObservableSearchFlags()",0,1,1,1
"org.jabref.preferences.SearchPreferences.getSearchDisplayMode()",0,1,1,1
"org.jabref.preferences.SearchPreferences.getSearchFlags()",1,2,2,2
"org.jabref.preferences.SearchPreferences.isCaseSensitive()",0,1,1,1
"org.jabref.preferences.SearchPreferences.isFulltext()",0,1,1,1
"org.jabref.preferences.SearchPreferences.isRegularExpression()",0,1,1,1
"org.jabref.preferences.SearchPreferences.keepWindowOnTopProperty()",0,1,1,1
"org.jabref.preferences.SearchPreferences.searchDisplayModeProperty()",0,1,1,1
"org.jabref.preferences.SearchPreferences.setKeepWindowOnTop(boolean)",0,1,1,1
"org.jabref.preferences.SearchPreferences.setSearchDisplayMode(SearchDisplayMode)",0,1,1,1
"org.jabref.preferences.SearchPreferences.setSearchFlag(SearchFlags,boolean)",4,1,5,5
"org.jabref.preferences.SearchPreferences.shouldKeepSearchString()",0,1,1,1
"org.jabref.preferences.SearchPreferences.shouldKeepWindowOnTop()",0,1,1,1
"org.jabref.preferences.SidePanePreferences.SidePanePreferences(Set<SidePaneType>,Map<SidePaneType, Integer>,int)",0,1,1,1
"org.jabref.preferences.SidePanePreferences.getPreferredPositions()",0,1,1,1
"org.jabref.preferences.SidePanePreferences.getWebSearchFetcherSelected()",0,1,1,1
"org.jabref.preferences.SidePanePreferences.setPreferredPositions(Map<SidePaneType, Integer>)",0,1,1,1
"org.jabref.preferences.SidePanePreferences.setWebSearchFetcherSelected(int)",0,1,1,1
"org.jabref.preferences.SidePanePreferences.visiblePanes()",0,1,1,1
"org.jabref.preferences.SidePanePreferences.webSearchFetcherSelectedProperty()",0,1,1,1
"org.jabref.preferences.TelemetryPreferences.TelemetryPreferences(boolean,boolean)",0,1,1,1
"org.jabref.preferences.TelemetryPreferences.askToCollectTelemetryProperty()",0,1,1,1
"org.jabref.preferences.TelemetryPreferences.collectTelemetryProperty()",0,1,1,1
"org.jabref.preferences.TelemetryPreferences.setAskToCollectTelemetry(boolean)",0,1,1,1
"org.jabref.preferences.TelemetryPreferences.setCollectTelemetry(boolean)",0,1,1,1
"org.jabref.preferences.TelemetryPreferences.shouldAskToCollectTelemetry()",0,1,1,1
"org.jabref.preferences.TelemetryPreferences.shouldCollectTelemetry()",0,1,1,1
"org.jabref.preferences.VersionPreferences.VersionPreferences(Version)",0,1,1,1
"org.jabref.preferences.VersionPreferences.getIgnoredVersion()",0,1,1,1
"org.jabref.styletester.StyleTesterMain.main(String[])",0,1,1,1
"org.jabref.styletester.StyleTesterMain.start(Stage)",0,1,1,1
"org.jabref.styletester.StyleTesterMain.stop()",0,1,1,1
"org.jabref.styletester.StyleTesterView.StyleTesterView()",0,1,1,1
"org.jabref.styletester.StyleTesterView.getContent()",0,1,1,1
"org.jabref.styletester.StyleTesterView.setStates()",0,1,1,1
"org.jabref.support.CIServerCondition.evaluateExecutionCondition(ExtensionContext)",2,3,2,3
"org.jabref.support.CIServerCondition.isCIServer()",0,1,1,1
"org.jabref.testutils.TestUtils.closeJabRef()",1,1,1,2
"org.jabref.testutils.TestUtils.initJabRef()",0,1,1,1

Class,OCavg,OCmax,WMC
"org.jabref.JabRefPreferencesTest","1,00",1,2
"org.jabref.TestIconsProperties","3,00",3,3
"org.jabref.architecture.MainArchitectureTests","1,00",1,12
"org.jabref.architecture.TestArchitectureTests","1,00",1,3
"org.jabref.benchmarks.Benchmarks","1,08",2,13
"org.jabref.cli.ArgumentProcessor","3,88",1,97
"org.jabref.cli.ArgumentProcessor.Mode",n/a,n/a,0
"org.jabref.cli.AuxCommandLine","1,50",2,3
"org.jabref.cli.AuxCommandLineTest","1,00",1,2
"org.jabref.cli.CrossrefFetcherEvaluator","2,67",6,8
"org.jabref.cli.GenerateCharacterTable","2,00",3,4
"org.jabref.cli.JabRefCLI","1,08",4,42
"org.jabref.cli.JabRefCLITest","1,00",1,17
"org.jabref.cli.SystemOutputPrinter","1,00",1,3
"org.jabref.gui.AbstractViewModel",n/a,n/a,0
"org.jabref.gui.BasePanelMode",n/a,n/a,0
"org.jabref.gui.ClipBoardManager","1,62",4,26
"org.jabref.gui.DefaultInjector","4,67",12,14
"org.jabref.gui.DragAndDropDataFormats",n/a,n/a,0
"org.jabref.gui.DragAndDropHelper","1,50",2,3
"org.jabref.gui.EntryTypeView","2,25",6,18
"org.jabref.gui.EntryTypeViewModel","1,92",11,23
"org.jabref.gui.EntryTypeViewModel.FetcherWorker","2,00",2,2
"org.jabref.gui.FXDialog","1,25",3,10
"org.jabref.gui.FallbackExceptionHandler","1,00",1,2
"org.jabref.gui.Globals","1,40",2,14
"org.jabref.gui.JabRefDialogService","1,15",2,39
"org.jabref.gui.JabRefExecutorService","1,31",3,17
"org.jabref.gui.JabRefExecutorService.NamedRunnable","1,00",1,2
"org.jabref.gui.JabRefFrame","2,61",1,115
"org.jabref.gui.JabRefFrame.CloseAction","1,00",1,1
"org.jabref.gui.JabRefFrame.CloseAllDatabaseAction","2,00",2,2
"org.jabref.gui.JabRefFrame.CloseDatabaseAction","1,00",1,3
"org.jabref.gui.JabRefFrame.CloseOthersDatabaseAction","2,00",3,4
"org.jabref.gui.JabRefFrame.OpenDatabaseFolder","1,00",1,2
"org.jabref.gui.JabRefFrame.UndoRedoEventManager","1,00",1,3
"org.jabref.gui.JabRefGUI","3,11",10,28
"org.jabref.gui.JabRefLauncher","1,00",1,1
"org.jabref.gui.JabRefMain","2,00",4,14
"org.jabref.gui.LibraryTab","1,46",1,99
"org.jabref.gui.LibraryTab.EntriesRemovedListener","1,00",1,1
"org.jabref.gui.LibraryTab.Factory","1,00",1,1
"org.jabref.gui.LibraryTab.GroupTreeListener","3,00",3,3
"org.jabref.gui.LibraryTab.IndexUpdateListener","1,75",2,7
"org.jabref.gui.LibraryTab.SearchListener","1,00",1,3
"org.jabref.gui.OpenConsoleAction","1,00",1,3
"org.jabref.gui.SendAsEMailAction","3,00",7,9
"org.jabref.gui.StateManager","1,04",2,26
"org.jabref.gui.UpdateTimestampListener","1,50",2,3
"org.jabref.gui.UpdateTimestampListenerTest","1,00",1,3
"org.jabref.gui.WaitForSaveFinishedDialog","2,00",4,6
"org.jabref.gui.actions.ActionFactory","1,40",4,14
"org.jabref.gui.actions.ActionHelper","1,22",3,11
"org.jabref.gui.actions.JabRefAction","1,67",3,10
"org.jabref.gui.actions.SimpleCommand","1,00",1,5
"org.jabref.gui.actions.Sources",n/a,n/a,0
"org.jabref.gui.actions.StandardActions","1,00",1,12
"org.jabref.gui.autocompleter.AppendPersonNamesStrategy","1,33",2,4
"org.jabref.gui.autocompleter.AppendPersonNamesStrategyTest","1,00",1,2
"org.jabref.gui.autocompleter.AppendWordsStrategy","1,33",2,4
"org.jabref.gui.autocompleter.AutoCompleteFirstNameMode","1,00",1,1
"org.jabref.gui.autocompleter.AutoCompletePreferences","1,00",1,7
"org.jabref.gui.autocompleter.AutoCompletePreferences.NameFormat",n/a,n/a,0
"org.jabref.gui.autocompleter.AutoCompleterUtil","1,00",1,3
"org.jabref.gui.autocompleter.AutoCompletionInput","1,00",1,3
"org.jabref.gui.autocompleter.AutoCompletionTextInputBinding","1,40",2,21
"org.jabref.gui.autocompleter.BibEntrySuggestionProvider","1,00",1,5
"org.jabref.gui.autocompleter.BibEntrySuggestionProviderTest","1,00",1,10
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProvider","1,33",2,4
"org.jabref.gui.autocompleter.ContentSelectorSuggestionProviderTest","1,00",1,9
"org.jabref.gui.autocompleter.DefaultAutoCompleterTest","1,00",1,14
"org.jabref.gui.autocompleter.EmptySuggestionProvider","1,00",1,4
"org.jabref.gui.autocompleter.FieldValueSuggestionProvider","1,00",1,2
"org.jabref.gui.autocompleter.FieldValueSuggestionProviderTest","1,00",1,16
"org.jabref.gui.autocompleter.JournalsSuggestionProvider","1,00",1,2
"org.jabref.gui.autocompleter.PersonNameStringConverter","4,25",11,17
"org.jabref.gui.autocompleter.PersonNameStringConverterTest","1,00",1,3
"org.jabref.gui.autocompleter.PersonNameSuggestionProvider","1,00",1,7
"org.jabref.gui.autocompleter.PersonNameSuggestionProviderTest","1,00",1,18
"org.jabref.gui.autocompleter.ReplaceStrategy","1,00",1,1
"org.jabref.gui.autocompleter.StringSuggestionProvider","1,00",1,3
"org.jabref.gui.autocompleter.SuggestionProvider","1,50",2,3
"org.jabref.gui.autocompleter.SuggestionProviders","2,33",5,7
"org.jabref.gui.autocompleter.SuggestionProvidersTest","1,00",1,4
"org.jabref.gui.autocompleter.WordSuggestionProvider","1,00",1,2
"org.jabref.gui.auximport.AuxParserResultViewModel","2,50",4,5
"org.jabref.gui.auximport.FromAuxDialog","2,00",3,6
"org.jabref.gui.auximport.NewSubLibraryAction","1,00",1,2
"org.jabref.gui.bibtexextractor.BibtexExtractor","2,40",8,24
"org.jabref.gui.bibtexextractor.BibtexExtractorViewModel","1,50",3,9
"org.jabref.gui.bibtexextractor.ExtractBibtexAction","1,00",1,2
"org.jabref.gui.bibtexextractor.ExtractBibtexDialog","1,00",1,2
"org.jabref.gui.citationkeypattern.CitationKeyPatternAction","1,00",1,2
"org.jabref.gui.citationkeypattern.CitationKeyPatternDialog","1,50",2,3
"org.jabref.gui.citationkeypattern.CitationKeyPatternPanel","2,43",5,17
"org.jabref.gui.citationkeypattern.GenerateCitationKeyAction","2,25",4,18
"org.jabref.gui.citationkeypattern.GenerateCitationKeySingleAction","2,00",2,4
"org.jabref.gui.cleanup.CleanupAction","3,20",5,16
"org.jabref.gui.cleanup.CleanupDialog","2,00",2,2
"org.jabref.gui.cleanup.CleanupPresetPanel","5,50",13,22
"org.jabref.gui.collab.ChangeDisplayDialog","5,00",7,10
"org.jabref.gui.collab.ChangeScanner","2,50",4,10
"org.jabref.gui.collab.DatabaseChangeMonitor","1,25",2,5
"org.jabref.gui.collab.DatabaseChangePane","1,00",1,2
"org.jabref.gui.collab.DatabaseChangeViewModel","1,00",1,6
"org.jabref.gui.collab.EntryAddChangeViewModel","1,00",1,3
"org.jabref.gui.collab.EntryChangeViewModel","1,25",2,5
"org.jabref.gui.collab.EntryDeleteChangeViewModel","1,00",1,3
"org.jabref.gui.collab.GroupChangeViewModel","2,33",3,7
"org.jabref.gui.collab.MetaDataChangeViewModel","1,33",2,4
"org.jabref.gui.collab.PreambleChangeViewModel","1,67",3,5
"org.jabref.gui.collab.StringAddChangeViewModel","1,00",1,3
"org.jabref.gui.collab.StringChangeViewModel","1,00",1,3
"org.jabref.gui.collab.StringNameChangeViewModel","1,33",2,4
"org.jabref.gui.collab.StringRemoveChangeViewModel","1,00",1,3
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel","1,29",3,9
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanel.HighlightTableRow","4,00",4,4
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelItemModel","1,00",1,7
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel","1,83",1,11
"org.jabref.gui.commonfxcontrols.CitationKeyPatternPanelViewModel.DefaultEntryType","1,00",1,2
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanel","1,30",3,13
"org.jabref.gui.commonfxcontrols.FieldFormatterCleanupsPanelViewModel","1,25",3,15
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanel","1,53",7,23
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModel","1,40",3,14
"org.jabref.gui.commonfxcontrols.SaveOrderConfigPanelViewModelTest","1,00",1,5
"org.jabref.gui.commonfxcontrols.SortCriterionViewModel","1,00",1,4
"org.jabref.gui.contentselector.ContentSelectorDialogView","1,08",2,13
"org.jabref.gui.contentselector.ContentSelectorDialogViewModel","1,42",3,34
"org.jabref.gui.contentselector.ContentSelectorDialogViewModelTest","1,00",1,13
"org.jabref.gui.contentselector.ManageContentSelectorAction","1,00",1,2
"org.jabref.gui.copyfiles.CopyFilesAction","1,33",2,4
"org.jabref.gui.copyfiles.CopyFilesDialogView","1,67",3,5
"org.jabref.gui.copyfiles.CopyFilesDialogViewModel","1,00",1,2
"org.jabref.gui.copyfiles.CopyFilesResultItemViewModel","1,20",2,6
"org.jabref.gui.copyfiles.CopyFilesResultListDependency","1,00",1,4
"org.jabref.gui.copyfiles.CopyFilesTask","2,75",8,11
"org.jabref.gui.copyfiles.CopySingleFileAction","1,67",3,5
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel","1,33",3,24
"org.jabref.gui.customentrytypes.CustomEntryTypeDialogViewModel.FieldType","1,00",1,3
"org.jabref.gui.customentrytypes.CustomEntryTypeViewModel","1,00",1,1
"org.jabref.gui.customentrytypes.CustomizeEntryAction","1,00",1,2
"org.jabref.gui.customentrytypes.CustomizeEntryTypeDialogView","2,00",5,20
"org.jabref.gui.customentrytypes.EntryTypeViewModel","1,25",3,10
"org.jabref.gui.customentrytypes.FieldViewModel","1,11",2,10
"org.jabref.gui.desktop.JabRefDesktop","2,92",11,35
"org.jabref.gui.desktop.os.DefaultDesktop","1,00",1,6
"org.jabref.gui.desktop.os.Linux","2,29",5,16
"org.jabref.gui.desktop.os.OSX","1,33",2,8
"org.jabref.gui.desktop.os.Windows","2,00",4,14
"org.jabref.gui.dialogs.AutosaveUiManager","1,00",1,2
"org.jabref.gui.dialogs.BackupUIManager","1,50",2,3
"org.jabref.gui.documentviewer.DocumentPageViewModel",n/a,n/a,0
"org.jabref.gui.documentviewer.DocumentViewModel","1,00",1,2
"org.jabref.gui.documentviewer.DocumentViewerControl","1,50",1,18
"org.jabref.gui.documentviewer.DocumentViewerControl.DocumentViewerPage","1,00",1,9
"org.jabref.gui.documentviewer.DocumentViewerView","1,07",2,16
"org.jabref.gui.documentviewer.DocumentViewerViewModel","1,27",3,19
"org.jabref.gui.documentviewer.PageDimension","1,00",1,4
"org.jabref.gui.documentviewer.PageDimension.FixedHeightPageDimension","1,00",1,3
"org.jabref.gui.documentviewer.PageDimension.FixedWidthPageDimension","1,00",1,3
"org.jabref.gui.documentviewer.PdfDocumentPageViewModel","1,00",1,5
"org.jabref.gui.documentviewer.PdfDocumentViewModel","1,50",2,3
"org.jabref.gui.documentviewer.PdfDocumentViewModelTest","1,00",1,1
"org.jabref.gui.documentviewer.ShowDocumentViewerAction","1,00",1,2
"org.jabref.gui.duplicationFinder.DuplicateResolverDialog","4,67",12,14
"org.jabref.gui.duplicationFinder.DuplicateResolverDialog.DuplicateResolverResult",n/a,n/a,0
"org.jabref.gui.duplicationFinder.DuplicateResolverDialog.DuplicateResolverType",n/a,n/a,0
"org.jabref.gui.duplicationFinder.DuplicateSearch","4,17",4,25
"org.jabref.gui.duplicationFinder.DuplicateSearch.DuplicateSearchResult","1,00",1,6
"org.jabref.gui.edit.CopyDoiUrlAction","1,50",2,3
"org.jabref.gui.edit.CopyMoreAction","3,25",6,26
"org.jabref.gui.edit.CopyMoreActionTest","1,00",1,11
"org.jabref.gui.edit.EditAction","2,00",3,6
"org.jabref.gui.edit.ManageKeywordsAction","1,00",1,2
"org.jabref.gui.edit.ManageKeywordsDialog","2,00",2,4
"org.jabref.gui.edit.ManageKeywordsDisplayType",n/a,n/a,0
"org.jabref.gui.edit.ManageKeywordsViewModel","2,38",6,19
"org.jabref.gui.edit.ManageKeywordsViewModelTest","1,00",1,3
"org.jabref.gui.edit.MassSetFieldsAction","1,00",1,2
"org.jabref.gui.edit.MassSetFieldsDialog","3,17",5,19
"org.jabref.gui.edit.OpenBrowserAction","1,00",1,2
"org.jabref.gui.edit.ReplaceStringAction","1,00",1,2
"org.jabref.gui.edit.ReplaceStringView","1,33",2,4
"org.jabref.gui.edit.ReplaceStringViewModel","1,89",4,17
"org.jabref.gui.edit.ReplaceStringViewModelTest","1,00",1,2
"org.jabref.gui.entryeditor.DeprecatedFieldsTab","1,50",2,3
"org.jabref.gui.entryeditor.EntryEditor","2,24",9,38
"org.jabref.gui.entryeditor.EntryEditorPreferences","1,00",1,28
"org.jabref.gui.entryeditor.EntryEditorTab","1,25",2,5
"org.jabref.gui.entryeditor.FieldsEditorTab","1,92",4,25
"org.jabref.gui.entryeditor.LatexCitationsTab","1,50",5,12
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel","1,42",3,17
"org.jabref.gui.entryeditor.LatexCitationsTabViewModel.Status",n/a,n/a,0
"org.jabref.gui.entryeditor.MathSciNetTab","1,20",2,6
"org.jabref.gui.entryeditor.OpenEntryEditorAction","1,50",2,3
"org.jabref.gui.entryeditor.OptionalFields2Tab","1,00",1,1
"org.jabref.gui.entryeditor.OptionalFieldsTab","1,00",1,1
"org.jabref.gui.entryeditor.OptionalFieldsTabBase","2,00",3,4
"org.jabref.gui.entryeditor.OtherFieldsTab","1,50",2,3
"org.jabref.gui.entryeditor.PreviewSwitchAction","1,50",2,3
"org.jabref.gui.entryeditor.PreviewSwitchAction.Direction",n/a,n/a,0
"org.jabref.gui.entryeditor.PreviewTab","1,60",2,8
"org.jabref.gui.entryeditor.RelatedArticlesTab","1,43",3,10
"org.jabref.gui.entryeditor.RequiredFieldsTab","2,00",3,4
"org.jabref.gui.entryeditor.SourceTab","3,11",12,28
"org.jabref.gui.entryeditor.SourceTab.EditAction","1,00",1,2
"org.jabref.gui.entryeditor.SourceTab.InputMethodRequestsObject","1,00",1,4
"org.jabref.gui.entryeditor.SourceTabTest","1,00",1,2
"org.jabref.gui.entryeditor.UserDefinedFieldsTab","1,00",1,2
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTab","1,00",1,3
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabView","1,00",1,4
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationTabViewModel","1,10",2,11
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModel","1,54",6,20
"org.jabref.gui.entryeditor.fileannotationtab.FileAnnotationViewModelTest","1,00",1,6
"org.jabref.gui.entryeditor.fileannotationtab.FulltextSearchResultsTab","2,25",9,18
"org.jabref.gui.errorconsole.ErrorConsoleView","1,38",2,11
"org.jabref.gui.errorconsole.ErrorConsoleViewModel","1,14",2,8
"org.jabref.gui.errorconsole.LogEventViewModel","2,00",4,12
"org.jabref.gui.exporter.CreateModifyExporterDialogView","1,33",2,4
"org.jabref.gui.exporter.CreateModifyExporterDialogViewModel","1,50",3,9
"org.jabref.gui.exporter.ExportCommand","1,50",3,6
"org.jabref.gui.exporter.ExportToClipboardAction","2,00",1,12
"org.jabref.gui.exporter.ExportToClipboardAction.ExportResult","1,00",1,1
"org.jabref.gui.exporter.ExportToClipboardActionTest","1,00",1,4
"org.jabref.gui.exporter.ExporterViewModel","1,00",1,5
"org.jabref.gui.exporter.SaveAction","1,50",2,3
"org.jabref.gui.exporter.SaveAction.SaveMethod",n/a,n/a,0
"org.jabref.gui.exporter.SaveAllAction","2,00",3,4
"org.jabref.gui.exporter.SaveDatabaseAction","2,21",6,31
"org.jabref.gui.exporter.SaveDatabaseAction.SaveDatabaseMode",n/a,n/a,0
"org.jabref.gui.exporter.SaveDatabaseActionTest","1,00",1,7
"org.jabref.gui.exporter.WriteMetadataToPdfAction","3,40",1,17
"org.jabref.gui.exporter.WriteMetadataToPdfAction.OptionsDialog","1,17",2,7
"org.jabref.gui.externalfiles.AutoLinkFilesAction","1,75",4,7
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil","2,75",5,11
"org.jabref.gui.externalfiles.AutoSetFileLinksUtil.LinkFilesResult","1,00",1,4
"org.jabref.gui.externalfiles.AutoSetFileLinksUtilTest","1,00",1,3
"org.jabref.gui.externalfiles.DateRange","1,00",1,2
"org.jabref.gui.externalfiles.DownloadFullTextAction","2,80",4,14
"org.jabref.gui.externalfiles.ExternalFileSorter","1,00",1,2
"org.jabref.gui.externalfiles.ExternalFilesEntryLinker","1,57",3,11
"org.jabref.gui.externalfiles.FileDownloadTask","1,00",1,2
"org.jabref.gui.externalfiles.FileExtensionViewModel","1,00",1,4
"org.jabref.gui.externalfiles.FileFilterUtils","1,00",1,9
"org.jabref.gui.externalfiles.FileFilterUtilsTest","1,00",1,8
"org.jabref.gui.externalfiles.FileFilterUtilsTest.SortingTests","1,00",1,5
"org.jabref.gui.externalfiles.FindUnlinkedFilesAction","1,00",1,2
"org.jabref.gui.externalfiles.ImportFilesResultItemViewModel","1,20",2,6
"org.jabref.gui.externalfiles.ImportHandler","2,22",8,20
"org.jabref.gui.externalfiles.UnlinkedFilesCrawler","2,67",6,8
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView","1,33",1,16
"org.jabref.gui.externalfiles.UnlinkedFilesDialogView.SearchContextAction","1,00",1,2
"org.jabref.gui.externalfiles.UnlinkedFilesDialogViewModel","1,38",4,29
"org.jabref.gui.externalfiles.UnlinkedPDFFileFilter","1,50",2,3
"org.jabref.gui.externalfiletype.CustomExternalFileType","1,47",5,28
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesDialog","1,25",2,5
"org.jabref.gui.externalfiletype.CustomizeExternalFileTypesViewModel","1,12",2,9
"org.jabref.gui.externalfiletype.EditExternalFileTypeEntryDialog","1,33",2,4
"org.jabref.gui.externalfiletype.EditExternalFileTypeViewModel","1,33",3,12
"org.jabref.gui.externalfiletype.EditExternalFileTypesAction","1,00",1,1
"org.jabref.gui.externalfiletype.ExternalFileTypes","2,93",10,41
"org.jabref.gui.externalfiletype.StandardExternalFileType","1,00",1,6
"org.jabref.gui.externalfiletype.UnknownExternalFileType","1,00",1,7
"org.jabref.gui.fieldeditors.AbstractEditorViewModel","1,60",3,8
"org.jabref.gui.fieldeditors.CitationKeyEditor","1,00",1,4
"org.jabref.gui.fieldeditors.CitationKeyEditorViewModel","1,00",1,2
"org.jabref.gui.fieldeditors.DateEditor","1,00",1,4
"org.jabref.gui.fieldeditors.DateEditorViewModel","1,50",2,6
"org.jabref.gui.fieldeditors.EditorTextArea","1,00",1,6
"org.jabref.gui.fieldeditors.EditorTextField","1,00",1,4
"org.jabref.gui.fieldeditors.EditorTypeEditorViewModel","1,00",1,3
"org.jabref.gui.fieldeditors.EditorValidator","1,50",2,3
"org.jabref.gui.fieldeditors.FieldEditors","11,00",20,22
"org.jabref.gui.fieldeditors.FieldNameLabel","49,00",96,98
"org.jabref.gui.fieldeditors.GenderEditorViewModel","1,00",1,3
"org.jabref.gui.fieldeditors.IdentifierEditor","1,14",2,8
"org.jabref.gui.fieldeditors.IdentifierEditorViewModel","1,18",2,13
"org.jabref.gui.fieldeditors.IdentifierEditorViewModelTest","1,00",1,2
"org.jabref.gui.fieldeditors.JournalEditor","1,00",1,5
"org.jabref.gui.fieldeditors.JournalEditorViewModel","2,50",4,5
"org.jabref.gui.fieldeditors.KeywordsEditor","1,00",1,2
"org.jabref.gui.fieldeditors.LinkedEntriesEditor","1,00",1,4
"org.jabref.gui.fieldeditors.LinkedEntriesEditorViewModel","1,17",2,7
"org.jabref.gui.fieldeditors.LinkedFileViewModel","1,74",6,68
"org.jabref.gui.fieldeditors.LinkedFileViewModelTest","1,36",3,19
"org.jabref.gui.fieldeditors.LinkedFilesEditor","1,67",1,25
"org.jabref.gui.fieldeditors.LinkedFilesEditor.ContextAction","1,00",1,2
"org.jabref.gui.fieldeditors.LinkedFilesEditorViewModel","1,38",3,22
"org.jabref.gui.fieldeditors.MapBasedEditorViewModel","1,33",2,8
"org.jabref.gui.fieldeditors.MonthEditorViewModel","1,50",3,9
"org.jabref.gui.fieldeditors.OptionEditor","1,00",1,4
"org.jabref.gui.fieldeditors.OptionEditorViewModel","1,00",1,1
"org.jabref.gui.fieldeditors.OwnerEditor","1,00",1,5
"org.jabref.gui.fieldeditors.OwnerEditorViewModel","1,00",1,2
"org.jabref.gui.fieldeditors.PaginationEditorViewModel","1,00",1,3
"org.jabref.gui.fieldeditors.PatentTypeEditorViewModel","1,00",1,3
"org.jabref.gui.fieldeditors.PersonsEditor","1,25",2,5
"org.jabref.gui.fieldeditors.PersonsEditorViewModel","1,00",1,4
"org.jabref.gui.fieldeditors.SimpleEditor","1,60",4,8
"org.jabref.gui.fieldeditors.SimpleEditorViewModel","1,00",1,2
"org.jabref.gui.fieldeditors.TextInputControlBehavior","8,00",8,16
"org.jabref.gui.fieldeditors.TypeEditorViewModel","1,00",1,3
"org.jabref.gui.fieldeditors.URLUtil","3,75",7,15
"org.jabref.gui.fieldeditors.UrlEditor","1,00",1,5
"org.jabref.gui.fieldeditors.UrlEditorViewModel","1,25",2,5
"org.jabref.gui.fieldeditors.YesNoEditorViewModel","1,00",1,3
"org.jabref.gui.fieldeditors.contextmenu.DefaultMenu","1,40",2,7
"org.jabref.gui.fieldeditors.contextmenu.EditorContextAction","1,67",2,5
"org.jabref.gui.fieldeditors.contextmenu.EditorMenus","1,00",1,3
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu","1,20",2,6
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.AddToProtectedTermsAction","1,00",1,2
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.FormatFieldAction","1,00",1,2
"org.jabref.gui.fieldeditors.contextmenu.ProtectedTermsMenu.ProtectSelectionAction","1,00",1,2
"org.jabref.gui.groups.GroupDescriptions","3,20",5,16
"org.jabref.gui.groups.GroupDialogHeader",n/a,n/a,0
"org.jabref.gui.groups.GroupDialogView","2,40",3,12
"org.jabref.gui.groups.GroupDialogView.IkonliCell","2,00",2,2
"org.jabref.gui.groups.GroupDialogViewModel","1,74",12,75
"org.jabref.gui.groups.GroupDialogViewModelTest","1,00",1,4
"org.jabref.gui.groups.GroupModeViewModel","2,33",3,7
"org.jabref.gui.groups.GroupNodeViewModel","1,56",11,56
"org.jabref.gui.groups.GroupNodeViewModelTest","1,00",1,12
"org.jabref.gui.groups.GroupSidePane","1,20",3,12
"org.jabref.gui.groups.GroupTreeNodeViewModel","1,57",8,36
"org.jabref.gui.groups.GroupTreeView","2,67",2,32
"org.jabref.gui.groups.GroupTreeView.DragExpansionHandler","3,00",3,3
"org.jabref.gui.groups.GroupTreeViewModel","1,79",5,34
"org.jabref.gui.groups.GroupTreeViewModelTest","1,00",1,5
"org.jabref.gui.groups.GroupViewMode",n/a,n/a,0
"org.jabref.gui.groups.GroupsPreferences","1,00",1,5
"org.jabref.gui.groups.MoveGroupChange","1,00",1,5
"org.jabref.gui.groups.UndoableAddOrRemoveGroup","4,40",13,22
"org.jabref.gui.groups.UndoableChangeEntriesOfGroup","2,00",3,4
"org.jabref.gui.groups.UndoableModifySubtree","1,50",2,6
"org.jabref.gui.groups.UndoableMoveGroup","1,00",1,4
"org.jabref.gui.help.AboutAction","1,00",1,3
"org.jabref.gui.help.AboutDialogView","1,00",1,11
"org.jabref.gui.help.AboutDialogViewModel","1,05",2,23
"org.jabref.gui.help.ErrorConsoleAction","1,00",1,1
"org.jabref.gui.help.HelpAction","1,00",1,5
"org.jabref.gui.help.NewVersionDialog","3,00",3,3
"org.jabref.gui.help.SearchForUpdateAction","1,00",1,2
"org.jabref.gui.help.VersionWorker","1,50",3,9
"org.jabref.gui.icon.IconTheme","1,62",1,13
"org.jabref.gui.icon.IconTheme.JabRefIcons","1,00",1,8
"org.jabref.gui.icon.InternalMaterialDesignIcon","1,00",1,10
"org.jabref.gui.icon.JabRefIconView","1,00",1,10
"org.jabref.gui.icon.JabRefIkonHandler","1,00",1,5
"org.jabref.gui.icon.JabRefMaterialDesignIcon","1,50",3,6
"org.jabref.gui.icon.JabrefIconProvider","1,00",1,1
"org.jabref.gui.importer.GenerateEntryFromIdAction","2,00",4,8
"org.jabref.gui.importer.GenerateEntryFromIdDialog","1,25",2,5
"org.jabref.gui.importer.GrobidOptInDialogHelper","3,00",3,3
"org.jabref.gui.importer.ImportAction","3,00",5,15
"org.jabref.gui.importer.ImportCommand","1,67",2,5
"org.jabref.gui.importer.ImportCustomEntryTypesDialog","1,67",2,5
"org.jabref.gui.importer.ImportCustomEntryTypesDialogViewModel","2,25",4,9
"org.jabref.gui.importer.ImportEntriesDialog","2,14",4,15
"org.jabref.gui.importer.ImportEntriesViewModel","3,00",11,27
"org.jabref.gui.importer.ImporterViewModel","1,00",1,5
"org.jabref.gui.importer.NewDatabaseAction","1,00",1,2
"org.jabref.gui.importer.NewEntryAction","1,75",4,7
"org.jabref.gui.importer.NewEntryActionTest","1,00",1,3
"org.jabref.gui.importer.ParserResultWarningDialog","2,33",5,7
"org.jabref.gui.importer.actions.CheckForNewEntryTypesAction","1,00",1,4
"org.jabref.gui.importer.actions.MergeReviewIntoCommentAction","1,50",2,3
"org.jabref.gui.importer.actions.MergeReviewIntoCommentConfirmationDialog","1,00",1,2
"org.jabref.gui.importer.actions.OpenDatabaseAction","2,56",9,23
"org.jabref.gui.importer.fetcher.LookupIdentifierAction","1,50",5,12
"org.jabref.gui.importer.fetcher.WebSearchPane","1,43",4,10
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModel","1,56",4,14
"org.jabref.gui.importer.fetcher.WebSearchPaneViewModelTest","1,00",1,6
"org.jabref.gui.integrity.IntegrityCheckAction","2,00",4,6
"org.jabref.gui.integrity.IntegrityCheckDialog","3,20",10,16
"org.jabref.gui.integrity.IntegrityCheckDialogViewModel","1,00",1,2
"org.jabref.gui.journals.AbbreviateAction","2,00",3,8
"org.jabref.gui.journals.AbbreviationType",n/a,n/a,0
"org.jabref.gui.journals.UndoableAbbreviator","3,67",5,11
"org.jabref.gui.journals.UndoableUnabbreviator","3,00",5,6
"org.jabref.gui.keyboard.CodeAreaKeyBindings","1,00",1,1
"org.jabref.gui.keyboard.KeyBinding","1,00",1,5
"org.jabref.gui.keyboard.KeyBindingCategory","1,00",1,2
"org.jabref.gui.keyboard.KeyBindingRepository","1,60",4,32
"org.jabref.gui.keyboard.KeyBindingsTabModelTest","1,00",1,11
"org.jabref.gui.keyboard.TextInputKeyBindings","2,00",2,2
"org.jabref.gui.libraryproperties.LibraryPropertiesAction","1,00",1,2
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogView","1,20",2,6
"org.jabref.gui.libraryproperties.LibraryPropertiesDialogViewModel","1,35",9,31
"org.jabref.gui.linkedfile.AttachFileAction","2,00",3,4
"org.jabref.gui.linkedfile.LinkedFileEditDialogView","1,33",2,4
"org.jabref.gui.linkedfile.LinkedFilesEditDialogViewModel","1,60",4,16
"org.jabref.gui.logging.ApplicationInsightsAppender","1,33",2,4
"org.jabref.gui.logging.ApplicationInsightsAppender.Builder","1,00",1,1
"org.jabref.gui.logging.ApplicationInsightsLogEvent","3,17",7,19
"org.jabref.gui.logging.GuiAppender","1,00",1,3
"org.jabref.gui.logging.GuiAppender.Builder","1,00",1,1
"org.jabref.gui.maintable.BibEntryTableViewModel","1,18",2,13
"org.jabref.gui.maintable.CellFactory","2,00",2,4
"org.jabref.gui.maintable.ColumnPreferences","1,00",1,3
"org.jabref.gui.maintable.MainTable","2,00",11,44
"org.jabref.gui.maintable.MainTableColumnFactory","2,09",12,23
"org.jabref.gui.maintable.MainTableColumnModel","1,53",4,23
"org.jabref.gui.maintable.MainTableColumnModel.Type","1,40",3,7
"org.jabref.gui.maintable.MainTableColumnModelTest","1,00",1,6
"org.jabref.gui.maintable.MainTableDataModel","1,43",4,10
"org.jabref.gui.maintable.MainTableFieldValueFormatter","3,00",5,9
"org.jabref.gui.maintable.MainTableNameFormatPreferences","1,00",1,3
"org.jabref.gui.maintable.MainTableNameFormatPreferences.AbbreviationStyle",n/a,n/a,0
"org.jabref.gui.maintable.MainTableNameFormatPreferences.DisplayStyle",n/a,n/a,0
"org.jabref.gui.maintable.MainTablePreferences","1,00",1,4
"org.jabref.gui.maintable.OpenExternalFileAction","3,00",6,9
"org.jabref.gui.maintable.OpenFolderAction","1,67",2,5
"org.jabref.gui.maintable.OpenUrlAction","4,00",7,8
"org.jabref.gui.maintable.PersistenceVisualStateTable","1,00",1,3
"org.jabref.gui.maintable.RightClickMenu","2,00",2,4
"org.jabref.gui.maintable.SearchShortScienceAction","1,50",2,3
"org.jabref.gui.maintable.SmartConstrainedResizePolicy","1,83",5,11
"org.jabref.gui.maintable.columns.FieldColumn","2,00",3,6
"org.jabref.gui.maintable.columns.FileColumn","2,00",3,12
"org.jabref.gui.maintable.columns.LinkedIdentifierColumn","2,00",3,8
"org.jabref.gui.maintable.columns.MainTableColumn","1,00",1,3
"org.jabref.gui.maintable.columns.SpecialFieldColumn","2,25",5,9
"org.jabref.gui.menus.ChangeEntryTypeMenu","1,50",2,12
"org.jabref.gui.menus.FileHistoryMenu","1,71",3,12
"org.jabref.gui.mergeentries.DiffHighlighting","3,00",8,21
"org.jabref.gui.mergeentries.DiffHighlightingEllipsingTextFlow","2,15",5,28
"org.jabref.gui.mergeentries.DiffHighlightingTest","1,00",1,14
"org.jabref.gui.mergeentries.FetchAndMergeEntry","3,00",8,18
"org.jabref.gui.mergeentries.MergeEntries","3,17",1,57
"org.jabref.gui.mergeentries.MergeEntries.DefaultRadioButtonSelectionMode",n/a,n/a,0
"org.jabref.gui.mergeentries.MergeEntries.DiffMode","1,00",1,3
"org.jabref.gui.mergeentries.MergeEntriesAction","3,00",5,6
"org.jabref.gui.mergeentries.MergeEntriesDialog","1,25",2,5
"org.jabref.gui.mergeentries.MergeWithFetchedEntryAction","1,50",2,3
"org.jabref.gui.mergeentries.MultiMergeEntriesView","2,30",1,23
"org.jabref.gui.mergeentries.MultiMergeEntriesView.Cell","2,00",3,4
"org.jabref.gui.mergeentries.MultiMergeEntriesView.FieldRow","3,00",3,6
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel","2,17",1,13
"org.jabref.gui.mergeentries.MultiMergeEntriesViewModel.EntrySource","1,00",1,5
"org.jabref.gui.metadata.BibtexStringEditorAction","1,00",1,2
"org.jabref.gui.metadata.BibtexStringEditorDialogView","1,50",2,6
"org.jabref.gui.metadata.BibtexStringEditorDialogViewModel","1,18",3,13
"org.jabref.gui.metadata.BibtexStringEditorItemModel","1,70",6,17
"org.jabref.gui.metadata.PreambleEditor","2,00",3,4
"org.jabref.gui.openoffice.AdvancedCiteDialogView","1,50",2,3
"org.jabref.gui.openoffice.AdvancedCiteDialogViewModel","1,00",1,3
"org.jabref.gui.openoffice.BibEntryNotFoundException","1,00",1,2
"org.jabref.gui.openoffice.Bootstrap","2,08",6,26
"org.jabref.gui.openoffice.CitationEntryViewModel","1,00",1,6
"org.jabref.gui.openoffice.ConnectionLostException","1,00",1,1
"org.jabref.gui.openoffice.DetectOpenOfficeInstallation","2,17",5,13
"org.jabref.gui.openoffice.ManageCitationsDialogView","1,33",2,4
"org.jabref.gui.openoffice.ManageCitationsDialogViewModel","2,00",3,6
"org.jabref.gui.openoffice.OOBibBase","4,51",5,176
"org.jabref.gui.openoffice.OOBibBase.ComparableMark","1,60",3,8
"org.jabref.gui.openoffice.OOBibBase.DocumentTitleViewModel","1,00",1,3
"org.jabref.gui.openoffice.OpenOfficePanel","2,65",8,45
"org.jabref.gui.openoffice.OpenOfficeSidePanel","1,00",1,7
"org.jabref.gui.openoffice.StyleSelectDialogView","2,00",4,8
"org.jabref.gui.openoffice.StyleSelectDialogViewModel","1,25",2,15
"org.jabref.gui.openoffice.StyleSelectItemViewModel","1,00",1,8
"org.jabref.gui.openoffice.UndefinedCharacterFormatException","1,00",1,2
"org.jabref.gui.preferences.AbstractPreferenceTabView","1,00",1,5
"org.jabref.gui.preferences.PreferencesDialogView","1,22",2,11
"org.jabref.gui.preferences.PreferencesDialogViewModel","1,70",4,17
"org.jabref.gui.preferences.PreferencesFilterDialog","1,67",2,5
"org.jabref.gui.preferences.PreferencesSearchHandler","2,11",6,19
"org.jabref.gui.preferences.ShowPreferencesAction","1,00",1,2
"org.jabref.gui.preferences.appearance.AppearanceTab","1,25",1,5
"org.jabref.gui.preferences.appearance.AppearanceTabViewModel","1,71",6,24
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTab","1,00",1,6
"org.jabref.gui.preferences.citationkeypattern.CitationKeyPatternTabViewModel","1,50",6,21
"org.jabref.gui.preferences.customexporter.CustomExporterTab","1,00",1,6
"org.jabref.gui.preferences.customexporter.CustomExporterTabViewModel","1,50",3,12
"org.jabref.gui.preferences.customimporter.CustomImporterTab","1,00",1,5
"org.jabref.gui.preferences.customimporter.CustomImporterTabViewModel","1,75",4,14
"org.jabref.gui.preferences.entryeditor.EntryEditorTab","1,00",1,3
"org.jabref.gui.preferences.entryeditor.EntryEditorTabViewModel","1,42",7,27
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTab","1,00",1,4
"org.jabref.gui.preferences.entryeditortabs.CustomEditorFieldsTabViewModel","1,67",4,10
"org.jabref.gui.preferences.external.ExternalTab","1,00",1,7
"org.jabref.gui.preferences.external.ExternalTabViewModel","1,21",4,23
"org.jabref.gui.preferences.file.FileTab","1,00",1,3
"org.jabref.gui.preferences.file.FileTabViewModel","1,00",1,10
"org.jabref.gui.preferences.general.GeneralTab","1,00",1,3
"org.jabref.gui.preferences.general.GeneralTabViewModel","1,10",3,22
"org.jabref.gui.preferences.groups.GroupsTab","1,00",1,3
"org.jabref.gui.preferences.groups.GroupsTabViewModel","1,12",2,9
"org.jabref.gui.preferences.importexport.ImportExportTab","1,00",1,3
"org.jabref.gui.preferences.importexport.ImportExportTabViewModel","1,00",1,13
"org.jabref.gui.preferences.journals.AbbreviationViewModel","1,19",3,19
"org.jabref.gui.preferences.journals.AbbreviationViewModelTest","1,00",1,4
"org.jabref.gui.preferences.journals.AbbreviationsFileViewModel","1,27",2,14
"org.jabref.gui.preferences.journals.JournalAbbreviationsTab","1,07",2,16
"org.jabref.gui.preferences.journals.JournalAbbreviationsTabViewModel","1,82",8,51
"org.jabref.gui.preferences.journals.JournalAbbreviationsViewModelTabTest","1,07",2,31
"org.jabref.gui.preferences.keybindings.KeyBindingViewModel","1,80",7,27
"org.jabref.gui.preferences.keybindings.KeyBindingViewModelTest","1,00",1,1
"org.jabref.gui.preferences.keybindings.KeyBindingsTab","1,00",1,5
"org.jabref.gui.preferences.keybindings.KeyBindingsTabViewModel","1,80",4,18
"org.jabref.gui.preferences.keybindings.presets.BashKeyBindingPreset","1,00",1,2
"org.jabref.gui.preferences.keybindings.presets.NewEntryBindingPreset","1,00",1,2
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTab","1,00",1,4
"org.jabref.gui.preferences.linkedfiles.LinkedFilesTabViewModel","1,25",4,20
"org.jabref.gui.preferences.nameformatter.NameFormatterItemModel","1,00",1,10
"org.jabref.gui.preferences.nameformatter.NameFormatterTab","1,75",4,7
"org.jabref.gui.preferences.nameformatter.NameFormatterTabViewModel","1,50",3,12
"org.jabref.gui.preferences.network.NetworkTab","1,17",2,7
"org.jabref.gui.preferences.network.NetworkTabViewModel","1,35",5,31
"org.jabref.gui.preferences.preview.PreviewTab","1,36",3,19
"org.jabref.gui.preferences.preview.PreviewTab.EditAction","1,50",2,3
"org.jabref.gui.preferences.preview.PreviewTabViewModel","2,14",7,62
"org.jabref.gui.preferences.protectedterms.NewProtectedTermsFileDialog","2,00",2,2
"org.jabref.gui.preferences.protectedterms.ProtectedTermsListItemModel","1,00",1,6
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab","1,17",1,7
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTab.ContextAction","1,00",1,2
"org.jabref.gui.preferences.protectedterms.ProtectedTermsTabViewModel","1,70",5,17
"org.jabref.gui.preferences.table.TableTab","1,22",3,11
"org.jabref.gui.preferences.table.TableTabViewModel","1,56",8,50
"org.jabref.gui.preferences.xmp.XmpPrivacyTab","1,50",3,6
"org.jabref.gui.preferences.xmp.XmpPrivacyTabViewModel","1,27",3,14
"org.jabref.gui.preview.CopyCitationAction","1,56",5,14
"org.jabref.gui.preview.CopyCitationActionTest","1,00",1,6
"org.jabref.gui.preview.PreviewPanel","1,82",6,20
"org.jabref.gui.preview.PreviewViewer","1,50",3,21
"org.jabref.gui.push.AbstractPushToApplication","1,67",4,15
"org.jabref.gui.push.PushToApplicationAction","1,60",4,16
"org.jabref.gui.push.PushToApplicationSettings","1,33",2,4
"org.jabref.gui.push.PushToApplicationsManager","1,33",3,8
"org.jabref.gui.push.PushToEmacs","1,86",5,13
"org.jabref.gui.push.PushToEmacsSettings","1,00",1,2
"org.jabref.gui.push.PushToLyx","2,00",5,12
"org.jabref.gui.push.PushToLyxSettings","1,00",1,1
"org.jabref.gui.push.PushToTeXstudio","1,00",1,4
"org.jabref.gui.push.PushToTexmaker","1,00",1,4
"org.jabref.gui.push.PushToVim","1,83",4,11
"org.jabref.gui.push.PushToVimSettings","1,00",1,2
"org.jabref.gui.push.PushToWinEdt","1,00",1,4
"org.jabref.gui.remote.JabRefMessageHandler","2,00",2,2
"org.jabref.gui.search.ContainsAndRegexBasedSearchRuleDescriberTest","1,00",1,6
"org.jabref.gui.search.GlobalSearchBar","1,86",2,26
"org.jabref.gui.search.GlobalSearchBar.SearchPopupSkin","2,00",6,12
"org.jabref.gui.search.GlobalSearchResultDialog","2,00",3,4
"org.jabref.gui.search.GlobalSearchResultDialogViewModel","1,00",1,3
"org.jabref.gui.search.GrammarBasedSearchRuleDescriberTest","1,00",1,10
"org.jabref.gui.search.RebuildFulltextSearchIndexAction","1,75",3,7
"org.jabref.gui.search.SearchDisplayMode","1,00",1,3
"org.jabref.gui.search.SearchResultsTable","2,00",2,2
"org.jabref.gui.search.SearchResultsTableDataModel","1,25",2,5
"org.jabref.gui.search.SearchTextField","1,00",1,1
"org.jabref.gui.search.TextFlowEqualityHelper","4,00",4,8
"org.jabref.gui.search.rules.describer.ContainsAndRegexBasedSearchRuleDescriber","2,67",5,8
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber","1,50",2,3
"org.jabref.gui.search.rules.describer.GrammarBasedSearchRuleDescriber.DescriptionSearchBaseVisitor","2,80",9,14
"org.jabref.gui.search.rules.describer.SearchDescribers","2,50",4,5
"org.jabref.gui.shared.ConnectToSharedDatabaseCommand","1,00",1,2
"org.jabref.gui.shared.PullChangesFromSharedAction","1,00",1,2
"org.jabref.gui.shared.SharedDatabaseLoginDialogView","1,40",2,7
"org.jabref.gui.shared.SharedDatabaseLoginDialogViewModel","1,27",6,38
"org.jabref.gui.shared.SharedDatabaseUIManager","2,00",4,12
"org.jabref.gui.sidepane.SidePane","1,91",2,21
"org.jabref.gui.sidepane.SidePane.PreferredIndexSort","1,00",1,2
"org.jabref.gui.sidepane.SidePaneComponent","1,09",1,12
"org.jabref.gui.sidepane.SidePaneComponent.ToggleCommand","1,00",1,2
"org.jabref.gui.sidepane.SidePaneType",n/a,n/a,0
"org.jabref.gui.slr.ExistingStudySearchAction","1,50",3,6
"org.jabref.gui.slr.ManageStudyDefinitionView","1,29",3,18
"org.jabref.gui.slr.ManageStudyDefinitionViewModel","1,50",3,30
"org.jabref.gui.slr.SlrStudyAndDirectory","1,00",1,3
"org.jabref.gui.slr.StartNewStudyAction","1,67",3,5
"org.jabref.gui.slr.StudyDatabaseItem","1,67",5,15
"org.jabref.gui.specialfields.SpecialFieldAction","3,33",5,10
"org.jabref.gui.specialfields.SpecialFieldDatabaseChangeListener","1,00",1,1
"org.jabref.gui.specialfields.SpecialFieldMenuItemFactory","1,33",2,4
"org.jabref.gui.specialfields.SpecialFieldValueViewModel","1,00",1,6
"org.jabref.gui.specialfields.SpecialFieldViewModel","1,00",1,10
"org.jabref.gui.specialfields.SpecialFieldsPreferences","1,00",1,5
"org.jabref.gui.texparser.CitationsDisplay","1,75",3,7
"org.jabref.gui.texparser.ParseLatexAction","1,00",1,2
"org.jabref.gui.texparser.ParseLatexDialogView","1,00",1,6
"org.jabref.gui.texparser.ParseLatexDialogViewModel","1,38",4,18
"org.jabref.gui.texparser.ParseLatexResultView","1,50",2,3
"org.jabref.gui.texparser.ParseLatexResultViewModel","1,33",2,8
"org.jabref.gui.texparser.ReferenceViewModel","1,00",1,5
"org.jabref.gui.undo.AbstractUndoableJabRefEdit","1,00",1,2
"org.jabref.gui.undo.CountingUndoManager","1,44",3,13
"org.jabref.gui.undo.NamedCompound","1,17",2,7
"org.jabref.gui.undo.UndoRedoAction","2,00",3,4
"org.jabref.gui.undo.UndoableChangeType","1,00",1,5
"org.jabref.gui.undo.UndoableFieldChange","1,40",2,7
"org.jabref.gui.undo.UndoableInsertEntries","1,83",6,11
"org.jabref.gui.undo.UndoableInsertString","1,00",1,4
"org.jabref.gui.undo.UndoableKeyChange","1,00",1,5
"org.jabref.gui.undo.UndoablePreambleChange","1,00",1,4
"org.jabref.gui.undo.UndoableRemoveEntries","1,83",6,11
"org.jabref.gui.undo.UndoableRemoveString","1,00",1,4
"org.jabref.gui.undo.UndoableStringChange","1,75",2,7
"org.jabref.gui.util.BackgroundTask","1,05",1,39
"org.jabref.gui.util.BackgroundTask.BackgroundProgress","1,25",2,5
"org.jabref.gui.util.BaseDialog","2,00",5,8
"org.jabref.gui.util.BindingsHelper","1,05",1,22
"org.jabref.gui.util.BindingsHelper.BidirectionalBinding","1,17",2,7
"org.jabref.gui.util.BindingsHelper.BidirectionalListBinding","1,67",2,5
"org.jabref.gui.util.BindingsHelper.BidirectionalMapBinding","1,67",2,5
"org.jabref.gui.util.ColorUtil","1,00",1,3
"org.jabref.gui.util.ColorUtilTest","1,00",1,4
"org.jabref.gui.util.ControlHelper","2,67",8,24
"org.jabref.gui.util.ControlHelper.EllipsisPosition",n/a,n/a,0
"org.jabref.gui.util.CurrentThreadTaskExecutor","1,60",1,8
"org.jabref.gui.util.CurrentThreadTaskExecutor.FailedFuture","1,00",1,6
"org.jabref.gui.util.CustomLocalDragboard","1,20",2,12
"org.jabref.gui.util.CustomTitledPaneSkin","1,50",1,15
"org.jabref.gui.util.CustomTitledPaneSkin.ArrowSide",n/a,n/a,0
"org.jabref.gui.util.CustomTitledPaneSkin.StyleableProperties","1,50",2,3
"org.jabref.gui.util.DefaultFileUpdateMonitor","2,00",5,12
"org.jabref.gui.util.DefaultTaskExecutor","1,67",4,20
"org.jabref.gui.util.DialogWindowState","1,00",1,5
"org.jabref.gui.util.DirectoryDialogConfiguration","1,00",1,2
"org.jabref.gui.util.DirectoryDialogConfiguration.Builder","1,67",3,5
"org.jabref.gui.util.DroppingMouseLocation",n/a,n/a,0
"org.jabref.gui.util.FieldsUtil","2,67",5,8
"org.jabref.gui.util.FileDialogConfiguration","1,00",1,7
"org.jabref.gui.util.FileDialogConfiguration.Builder","1,33",4,16
"org.jabref.gui.util.FileDialogConfigurationTest","1,00",1,7
"org.jabref.gui.util.FileFilterConverter","1,09",2,12
"org.jabref.gui.util.FileNodeViewModel","1,44",3,13
"org.jabref.gui.util.IconValidationDecorator","1,43",3,10
"org.jabref.gui.util.JabRefResourceLocator","1,00",1,1
"org.jabref.gui.util.NoSelectionModel","1,00",1,15
"org.jabref.gui.util.OnlyIntegerFormatter","1,00",1,2
"org.jabref.gui.util.OnlyIntegerFormatter.IntegerFilter","2,00",2,2
"org.jabref.gui.util.OpenHyperlinksInExternalBrowser","1,67",3,5
"org.jabref.gui.util.OptionalObjectProperty","1,00",1,6
"org.jabref.gui.util.OptionalValueTableCellFactory","1,33",2,4
"org.jabref.gui.util.RadioButtonCell","2,50",4,5
"org.jabref.gui.util.RecursiveTreeItem","1,86",4,13
"org.jabref.gui.util.RecursiveTreeItemTest","1,00",1,4
"org.jabref.gui.util.StreamGobbler","1,00",1,2
"org.jabref.gui.util.TextFlowLimited","1,60",3,8
"org.jabref.gui.util.Theme","2,00",5,20
"org.jabref.gui.util.Theme.Type",n/a,n/a,0
"org.jabref.gui.util.ThemeTest","1,33",3,12
"org.jabref.gui.util.TooltipTextUtil","3,57",5,25
"org.jabref.gui.util.TooltipTextUtil.TextReplacement","1,00",1,1
"org.jabref.gui.util.TooltipTextUtil.TextType",n/a,n/a,0
"org.jabref.gui.util.TooltipTextUtilTest","1,00",1,18
"org.jabref.gui.util.UiThreadList","1,17",2,7
"org.jabref.gui.util.ValueTableCellFactory","1,93",14,27
"org.jabref.gui.util.ViewModelListCellFactory","1,80",15,36
"org.jabref.gui.util.ViewModelTableRowFactory","2,25",21,36
"org.jabref.gui.util.ViewModelTextFieldTableCellVisualizationFactory","1,83",4,11
"org.jabref.gui.util.ViewModelTreeCellFactory","1,22",2,11
"org.jabref.gui.util.ViewModelTreeTableCellFactory","1,75",7,14
"org.jabref.gui.util.ZipFileChooser","1,50",2,3
"org.jabref.gui.util.comparator.NumericFieldComparator","4,33",6,13
"org.jabref.gui.util.comparator.NumericFieldComparatorTest","1,00",1,11
"org.jabref.gui.util.comparator.RankingFieldComparator","5,00",5,5
"org.jabref.gui.util.comparator.RankingFieldComparatorTest","1,00",1,7
"org.jabref.gui.util.comparator.SpecialFieldComparator","4,00",4,4
"org.jabref.gui.util.comparator.SpecialFieldComparatorTest","1,00",1,8
"org.jabref.gui.util.component.DiffHighlightingTextPane","1,00",1,1
"org.jabref.gui.util.component.Tag","1,14",2,8
"org.jabref.gui.util.component.TagBar","1,64",5,18
"org.jabref.gui.util.component.TemporalAccessorPicker","1,25",1,15
"org.jabref.gui.util.component.TemporalAccessorPicker.InternalConverter","2,00",2,4
"org.jabref.gui.util.uithreadaware.UiThreadBinding","1,00",1,10
"org.jabref.gui.util.uithreadaware.UiThreadChangeListener","1,00",1,4
"org.jabref.gui.util.uithreadaware.UiThreadHelper","2,00",2,2
"org.jabref.gui.util.uithreadaware.UiThreadInvalidationListener","1,00",1,4
"org.jabref.gui.util.uithreadaware.UiThreadListChangeListener","1,00",1,4
"org.jabref.gui.util.uithreadaware.UiThreadObservableList","1,00",1,34
"org.jabref.gui.util.uithreadaware.UiThreadStringProperty","1,00",1,12
"org.jabref.logic.JabRefException","1,17",2,7
"org.jabref.logic.TypedBibEntry","1,25",2,5
"org.jabref.logic.TypedBibEntryTest","1,00",1,6
"org.jabref.logic.WatchServiceUnavailableException","1,00",1,1
"org.jabref.logic.autosaveandbackup.AutosaveManager","1,12",2,9
"org.jabref.logic.autosaveandbackup.BackupManager","1,38",3,18
"org.jabref.logic.autosaveandbackup.BackupManagerTest","1,00",1,4
"org.jabref.logic.auxparser.AuxParserResult","1,07",2,15
"org.jabref.logic.auxparser.AuxParserTest","1,00",1,8
"org.jabref.logic.auxparser.DefaultAuxParser","3,00",5,24
"org.jabref.logic.auxparser.DefaultAuxParserTest",n/a,n/a,0
"org.jabref.logic.bibtex.BibEntryAssert","1,00",1,10
"org.jabref.logic.bibtex.BibEntryWriter","1,80",5,18
"org.jabref.logic.bibtex.BibEntryWriterTest","1,00",1,28
"org.jabref.logic.bibtex.FieldContentFormatter","1,33",2,4
"org.jabref.logic.bibtex.FieldContentFormatterPreferences","1,00",1,3
"org.jabref.logic.bibtex.FieldContentFormatterTest","1,00",1,4
"org.jabref.logic.bibtex.FieldWriter","3,10",10,31
"org.jabref.logic.bibtex.FieldWriterPreferences","1,00",1,6
"org.jabref.logic.bibtex.FieldWriterTests","1,00",1,12
"org.jabref.logic.bibtex.FileFieldWriter","1,67",4,10
"org.jabref.logic.bibtex.FileFieldWriterTest","1,00",1,7
"org.jabref.logic.bibtex.InvalidFieldValueException","1,00",1,1
"org.jabref.logic.bibtex.comparator.BibDatabaseDiff","2,75",15,22
"org.jabref.logic.bibtex.comparator.BibDatabaseDiffTest","1,00",1,8
"org.jabref.logic.bibtex.comparator.BibEntryDiff","1,00",1,3
"org.jabref.logic.bibtex.comparator.BibStringDiff","2,50",8,15
"org.jabref.logic.bibtex.comparator.BibStringDiffTest","1,00",1,2
"org.jabref.logic.bibtex.comparator.BibtexStringComparator","3,00",5,6
"org.jabref.logic.bibtex.comparator.BibtexStringComparatorTest","1,00",1,1
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparator","3,00",3,3
"org.jabref.logic.bibtex.comparator.CrossRefEntryComparatorTest","1,00",1,6
"org.jabref.logic.bibtex.comparator.EntryComparator","6,75",24,27
"org.jabref.logic.bibtex.comparator.EntryComparatorTest","1,00",1,12
"org.jabref.logic.bibtex.comparator.FieldComparator","3,57",12,25
"org.jabref.logic.bibtex.comparator.FieldComparator.FieldType",n/a,n/a,0
"org.jabref.logic.bibtex.comparator.FieldComparatorStack","2,00",3,4
"org.jabref.logic.bibtex.comparator.FieldComparatorTest","1,00",1,20
"org.jabref.logic.bibtex.comparator.GroupDiff","1,25",2,5
"org.jabref.logic.bibtex.comparator.GroupDiffTest","1,00",1,4
"org.jabref.logic.bibtex.comparator.IdComparator","1,00",1,1
"org.jabref.logic.bibtex.comparator.MetaDataDiff","3,60",13,18
"org.jabref.logic.bibtex.comparator.MetaDataDiffTest","1,00",1,1
"org.jabref.logic.bibtex.comparator.PreambleDiff","1,50",3,9
"org.jabref.logic.bibtex.comparator.PreambleDiffTest","1,00",1,3
"org.jabref.logic.bst.BibtexCaseChanger","5,88",10,47
"org.jabref.logic.bst.BibtexCaseChanger.FORMAT_MODE","1,67",3,5
"org.jabref.logic.bst.BibtexCaseChangersTest","1,00",1,9
"org.jabref.logic.bst.BibtexNameFormatter","10,17",40,61
"org.jabref.logic.bst.BibtexNameFormatterTest","1,00",1,13
"org.jabref.logic.bst.BibtexPurify","8,50",16,17
"org.jabref.logic.bst.BibtexPurifyTest","1,00",1,2
"org.jabref.logic.bst.BibtexTextPrefix","6,00",11,12
"org.jabref.logic.bst.BibtexWidth","6,75",15,27
"org.jabref.logic.bst.BibtexWidthTest","1,00",1,4
"org.jabref.logic.bst.BstPreviewLayout","1,50",2,6
"org.jabref.logic.bst.BstPreviewLayoutTest","1,00",1,5
"org.jabref.logic.bst.ChangeCaseFunction","2,50",4,5
"org.jabref.logic.bst.FormatNameFunction","3,00",5,6
"org.jabref.logic.bst.PurifyFunction","2,00",3,4
"org.jabref.logic.bst.TestVM","1,03",2,38
"org.jabref.logic.bst.TextPrefixFunction","2,50",4,5
"org.jabref.logic.bst.TextPrefixFunctionTest","1,00",1,2
"org.jabref.logic.bst.VM","4,17",2,150
"org.jabref.logic.bst.VM.BstEntry","1,00",1,1
"org.jabref.logic.bst.VM.Identifier","1,00",1,2
"org.jabref.logic.bst.VM.MacroFunction","1,00",1,2
"org.jabref.logic.bst.VM.StackFunction","3,33",8,10
"org.jabref.logic.bst.VM.Variable","1,00",1,2
"org.jabref.logic.bst.VMException","1,00",1,1
"org.jabref.logic.bst.WidthFunction","2,00",3,4
"org.jabref.logic.citationkeypattern.AbstractCitationKeyPattern","1,45",3,16
"org.jabref.logic.citationkeypattern.BracketedPattern","3,83",53,176
"org.jabref.logic.citationkeypattern.BracketedPattern.Institution","7,00",7,7
"org.jabref.logic.citationkeypattern.BracketedPatternTest","1,00",1,44
"org.jabref.logic.citationkeypattern.CitationKeyGenerator","1,64",6,23
"org.jabref.logic.citationkeypattern.CitationKeyGeneratorTest","1,00",1,81
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences","1,00",1,11
"org.jabref.logic.citationkeypattern.CitationKeyPatternPreferences.KeySuffix",n/a,n/a,0
"org.jabref.logic.citationkeypattern.DatabaseCitationKeyPattern","1,00",1,2
"org.jabref.logic.citationkeypattern.GlobalCitationKeyPattern","1,00",1,3
"org.jabref.logic.citationkeypattern.MakeLabelWithDatabaseTest","1,00",1,51
"org.jabref.logic.citationkeypattern.MakeLabelWithoutDatabaseTest","1,00",1,3
"org.jabref.logic.citationstyle.CSLAdapter","2,00",3,4
"org.jabref.logic.citationstyle.CSLAdapter.JabRefItemDataProvider","1,50",3,6
"org.jabref.logic.citationstyle.CitationStyle","1,57",4,22
"org.jabref.logic.citationstyle.CitationStyleCache","1,50",2,6
"org.jabref.logic.citationstyle.CitationStyleCache.BibDatabaseEntryListener","1,50",2,3
"org.jabref.logic.citationstyle.CitationStyleCacheTest","1,00",1,1
"org.jabref.logic.citationstyle.CitationStyleGenerator","1,00",1,5
"org.jabref.logic.citationstyle.CitationStyleGeneratorTest","1,00",1,10
"org.jabref.logic.citationstyle.CitationStyleOutputFormat","1,00",1,4
"org.jabref.logic.citationstyle.CitationStylePreviewLayout","1,00",1,6
"org.jabref.logic.citationstyle.CitationStyleTest","1,00",1,2
"org.jabref.logic.citationstyle.JabRefLocaleProvider","2,00",2,2
"org.jabref.logic.cleanup.BibtexBiblatexRoundtripTest","1,00",1,3
"org.jabref.logic.cleanup.CleanupPreferences","1,00",1,3
"org.jabref.logic.cleanup.CleanupPreset","1,00",1,8
"org.jabref.logic.cleanup.CleanupPreset.CleanupStep",n/a,n/a,0
"org.jabref.logic.cleanup.CleanupWorker","5,25",15,21
"org.jabref.logic.cleanup.CleanupWorkerTest","1,00",1,24
"org.jabref.logic.cleanup.Cleanups","2,60",6,13
"org.jabref.logic.cleanup.ConvertToBiblatexCleanup","5,00",5,5
"org.jabref.logic.cleanup.ConvertToBiblatexCleanupTest","1,00",1,7
"org.jabref.logic.cleanup.ConvertToBibtexCleanup","6,00",6,6
"org.jabref.logic.cleanup.ConvertToBibtexCleanupTest","1,00",1,5
"org.jabref.logic.cleanup.DoiCleanup","4,00",7,8
"org.jabref.logic.cleanup.DoiCleanupTest","1,00",1,2
"org.jabref.logic.cleanup.EprintCleanup","4,00",4,4
"org.jabref.logic.cleanup.EprintCleanupTest","1,00",1,1
"org.jabref.logic.cleanup.FieldFormatterCleanup","2,20",5,22
"org.jabref.logic.cleanup.FieldFormatterCleanupTest","1,00",1,6
"org.jabref.logic.cleanup.FieldFormatterCleanups","2,11",5,19
"org.jabref.logic.cleanup.FileLinksCleanup","3,00",3,3
"org.jabref.logic.cleanup.Formatter","1,50",2,3
"org.jabref.logic.cleanup.ISSNCleanup","3,00",3,3
"org.jabref.logic.cleanup.ISSNCleanupTest","1,00",1,4
"org.jabref.logic.cleanup.MoveFieldCleanup","1,00",1,2
"org.jabref.logic.cleanup.MoveFilesCleanup","2,50",4,5
"org.jabref.logic.cleanup.MoveFilesCleanupTest","1,00",1,7
"org.jabref.logic.cleanup.NormalizeNewlinesFormatter","1,20",2,6
"org.jabref.logic.cleanup.RelativePathsCleanup","3,50",6,7
"org.jabref.logic.cleanup.RenamePdfCleanup","3,00",5,6
"org.jabref.logic.cleanup.RenamePdfCleanupTest","1,00",1,5
"org.jabref.logic.cleanup.TimeStampToCreationDate","2,00",3,8
"org.jabref.logic.cleanup.TimeStampToCreationDateTest","1,00",1,8
"org.jabref.logic.cleanup.TimeStampToModificationDate","2,00",3,8
"org.jabref.logic.cleanup.TimeStampToModificationDateTest","1,00",1,6
"org.jabref.logic.cleanup.UpgradePdfPsToFileCleanup","2,50",4,5
"org.jabref.logic.crawler.Crawler","1,00",1,2
"org.jabref.logic.crawler.CrawlerTest","1,00",1,5
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverter","1,00",1,4
"org.jabref.logic.crawler.StudyDatabaseToFetcherConverterTest","1,00",1,3
"org.jabref.logic.crawler.StudyFetcher","1,40",3,7
"org.jabref.logic.crawler.StudyRepository","1,50",4,42
"org.jabref.logic.crawler.StudyRepositoryTest","1,00",1,17
"org.jabref.logic.crawler.StudyYamlParser","1,00",1,2
"org.jabref.logic.crawler.StudyYamlParserTest","1,00",1,3
"org.jabref.logic.database.DatabaseMerger","1,75",5,14
"org.jabref.logic.database.DatabaseMergerTest","1,00",1,6
"org.jabref.logic.database.DatabaseMergerTest.TestGroup","1,00",1,4
"org.jabref.logic.database.DuplicateCheck","2,76",8,58
"org.jabref.logic.database.DuplicateCheckTest","1,00",1,24
"org.jabref.logic.exporter.AtomicFileOutputStream","1,64",6,18
"org.jabref.logic.exporter.AtomicFileWriter","1,60",4,8
"org.jabref.logic.exporter.BibDatabaseWriter","2,64",7,37
"org.jabref.logic.exporter.BibTeXMLExporter","6,17",17,37
"org.jabref.logic.exporter.BibTeXMLExporterTestFiles","1,00",1,3
"org.jabref.logic.exporter.BibWriter","1,80",3,9
"org.jabref.logic.exporter.BibtexDatabaseWriter","1,60",4,16
"org.jabref.logic.exporter.BibtexDatabaseWriterTest","1,02",2,47
"org.jabref.logic.exporter.BlankLineBehaviour",n/a,n/a,0
"org.jabref.logic.exporter.CsvExportFormatTest","1,00",1,6
"org.jabref.logic.exporter.DocBook5ExporterTest","1,00",1,2
"org.jabref.logic.exporter.DocbookExporterTest","1,00",1,3
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporter","2,00",4,8
"org.jabref.logic.exporter.EmbeddedBibFilePdfExporterTest","1,00",1,11
"org.jabref.logic.exporter.Exporter","2,14",6,15
"org.jabref.logic.exporter.ExporterFactory","1,60",4,8
"org.jabref.logic.exporter.ExporterTest","1,20",2,6
"org.jabref.logic.exporter.FieldFormatterCleanupsTest","1,00",1,9
"org.jabref.logic.exporter.GroupSerializer","1,73",8,19
"org.jabref.logic.exporter.GroupSerializerTest","1,00",1,14
"org.jabref.logic.exporter.HtmlExportFormatTest","1,00",1,3
"org.jabref.logic.exporter.MSBibExportFormatTestFiles","1,00",1,3
"org.jabref.logic.exporter.MSBibExporter","1,50",2,3
"org.jabref.logic.exporter.MetaDataSerializer","3,40",5,17
"org.jabref.logic.exporter.MetaDataSerializerTest","1,00",1,4
"org.jabref.logic.exporter.ModsExportFormatTest","1,00",1,2
"org.jabref.logic.exporter.ModsExportFormatTestFiles","1,00",1,5
"org.jabref.logic.exporter.ModsExporter","3,10",22,65
"org.jabref.logic.exporter.MsBibExportFormatTest","1,00",1,2
"org.jabref.logic.exporter.OOCalcDatabase","1,50",2,12
"org.jabref.logic.exporter.OpenDocumentRepresentation","1,50",2,6
"org.jabref.logic.exporter.OpenDocumentSpreadsheetCreator","1,86",3,13
"org.jabref.logic.exporter.OpenOfficeDocumentCreator","1,71",3,12
"org.jabref.logic.exporter.OpenOfficeDocumentCreatorTest","2,25",5,9
"org.jabref.logic.exporter.SaveException","1,08",2,13
"org.jabref.logic.exporter.SavePreferences","1,00",1,15
"org.jabref.logic.exporter.SavePreferences.DatabaseSaveType",n/a,n/a,0
"org.jabref.logic.exporter.TemplateExporter","3,27",16,36
"org.jabref.logic.exporter.XmpExporter","2,33",5,7
"org.jabref.logic.exporter.XmpExporterTest","1,00",1,5
"org.jabref.logic.exporter.XmpPdfExporter","1,50",2,3
"org.jabref.logic.exporter.XmpPdfExporterTest","1,00",1,11
"org.jabref.logic.exporter.YamlExporterTest","1,00",1,7
"org.jabref.logic.externalfiles.ExternalFilesContentImporter","1,00",1,3
"org.jabref.logic.externalfiles.LinkedFileHandler","1,88",5,15
"org.jabref.logic.formatter.FormatterTest","1,00",1,12
"org.jabref.logic.formatter.Formatters","2,17",8,13
"org.jabref.logic.formatter.IdentityFormatter","1,00",1,5
"org.jabref.logic.formatter.IdentityFormatterTest","1,00",1,2
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatter","1,20",2,6
"org.jabref.logic.formatter.bibtexfields.AddBracesFormatterTest","1,00",1,13
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatter","1,20",2,6
"org.jabref.logic.formatter.bibtexfields.CleanupUrlFormatterTest","1,00",1,7
"org.jabref.logic.formatter.bibtexfields.ClearFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.ClearFormatterTest","1,00",1,4
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatter","3,40",13,17
"org.jabref.logic.formatter.bibtexfields.EscapeAmpersandsFormatterTest","1,00",1,6
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.EscapeUnderscoresFormatterTest","1,00",1,4
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatter","3,17",13,19
"org.jabref.logic.formatter.bibtexfields.HtmlToLatexFormatterTest","1,00",1,9
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.HtmlToUnicodeFormatterTest","1,00",1,9
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.LatexCleanupFormatterTest","1,00",1,6
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.NormalizeDateFormatterTest","1,00",1,25
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.NormalizeEnDashesFormatterTest","1,00",1,8
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.NormalizeMonthFormatterTest","1,00",1,3
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.NormalizeNamesFormatterTest","1,00",1,28
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatter","1,60",4,8
"org.jabref.logic.formatter.bibtexfields.NormalizePagesFormatterTest","1,00",1,3
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatter","1,20",2,6
"org.jabref.logic.formatter.bibtexfields.OrdinalsToSuperscriptFormatterTest","1,00",1,8
"org.jabref.logic.formatter.bibtexfields.RegexFormatter","1,57",3,11
"org.jabref.logic.formatter.bibtexfields.RegexFormatterTest","1,00",1,12
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatter","2,00",5,12
"org.jabref.logic.formatter.bibtexfields.RemoveBracesFormatterTest","1,00",1,13
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.RemoveDigitsFormatterTest","1,00",1,4
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.RemoveHyphenatedNewlinesFormatterTest","1,00",1,4
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.RemoveNewlinesFormatterTest","1,00",1,6
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.RemoveRedundantSpacesFormatterTest","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormater","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.ReplaceTabsBySpaceFormaterTest","1,00",1,4
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.ShortenDOIFormatterTest","1,00",1,3
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatter","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatterTest","1,00",1,7
"org.jabref.logic.formatter.bibtexfields.UnicodeConverterTest","1,00",1,5
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter","2,80",10,14
"org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatterTest","1,00",1,3
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatter","1,67",3,10
"org.jabref.logic.formatter.bibtexfields.UnitsToLatexFormatterTest","1,00",1,3
"org.jabref.logic.formatter.casechanger.CapitalizeFormatter","1,00",1,5
"org.jabref.logic.formatter.casechanger.CapitalizeFormatterTest","1,00",1,3
"org.jabref.logic.formatter.casechanger.LowerCaseFormatter","1,00",1,5
"org.jabref.logic.formatter.casechanger.LowerCaseFormatterTest","1,00",1,4
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatter","1,29",2,9
"org.jabref.logic.formatter.casechanger.ProtectTermsFormatterTest","1,00",1,7
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatter","1,00",1,5
"org.jabref.logic.formatter.casechanger.SentenceCaseFormatterTest","1,00",1,3
"org.jabref.logic.formatter.casechanger.Title","1,40",2,7
"org.jabref.logic.formatter.casechanger.TitleCaseFormatter","1,40",3,7
"org.jabref.logic.formatter.casechanger.TitleCaseFormatterTest","1,00",1,3
"org.jabref.logic.formatter.casechanger.TitleParser","2,75",4,11
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatter","2,00",6,10
"org.jabref.logic.formatter.casechanger.UnprotectTermsFormatterTest","1,00",1,3
"org.jabref.logic.formatter.casechanger.UpperCaseFormatter","1,00",1,5
"org.jabref.logic.formatter.casechanger.UpperCaseFormatterTest","1,00",1,3
"org.jabref.logic.formatter.casechanger.Word","1,89",4,17
"org.jabref.logic.formatter.minifier.MinifyNameListFormatter","1,83",5,11
"org.jabref.logic.formatter.minifier.MinifyNameListFormatterTest","1,00",1,3
"org.jabref.logic.formatter.minifier.TruncateFormatter","1,17",2,7
"org.jabref.logic.formatter.minifier.TruncateFormatterTest","1,00",1,7
"org.jabref.logic.git.GitHandler","1,50",3,15
"org.jabref.logic.git.GitHandlerTest","1,00",1,4
"org.jabref.logic.git.SlrGitHandler","3,40",9,17
"org.jabref.logic.git.SlrGitHandlerTest","1,00",1,4
"org.jabref.logic.groups.DefaultGroupsFactory","1,00",1,2
"org.jabref.logic.help.HelpFile","1,00",1,2
"org.jabref.logic.help.HelpFileTest","1,00",1,2
"org.jabref.logic.importer.AuthorListParser","14,40",20,72
"org.jabref.logic.importer.AuthorListParser.Token",n/a,n/a,0
"org.jabref.logic.importer.AuthorListParserTest","1,00",1,3
"org.jabref.logic.importer.BibDatabaseTestsWithFiles","1,00",1,2
"org.jabref.logic.importer.CompositeIdFetcher","2,33",5,7
"org.jabref.logic.importer.DatabaseFileLookupTest","1,00",1,2
"org.jabref.logic.importer.FetcherException","1,00",1,3
"org.jabref.logic.importer.FetcherResult","1,00",1,3
"org.jabref.logic.importer.FulltextFetchers","1,14",2,8
"org.jabref.logic.importer.FulltextFetchersTest","1,00",1,4
"org.jabref.logic.importer.ImportCleanup","1,67",3,5
"org.jabref.logic.importer.ImportDataTest","1,00",1,1
"org.jabref.logic.importer.ImportException","1,00",1,3
"org.jabref.logic.importer.ImportFormatPreferences","1,00",1,8
"org.jabref.logic.importer.ImportFormatReader","2,25",5,18
"org.jabref.logic.importer.ImportFormatReader.UnknownFormatImport","1,00",1,1
"org.jabref.logic.importer.ImportFormatReaderIntegrationTest","1,00",1,5
"org.jabref.logic.importer.ImportFormatReaderTestParameterless","1,00",1,5
"org.jabref.logic.importer.Importer","1,42",3,17
"org.jabref.logic.importer.ImporterPreferences","1,00",1,13
"org.jabref.logic.importer.ImporterTest","1,00",1,11
"org.jabref.logic.importer.OpenDatabase","1,33",2,4
"org.jabref.logic.importer.OpenDatabaseTest","1,00",1,10
"org.jabref.logic.importer.ParseException","1,00",1,3
"org.jabref.logic.importer.ParserResult","1,07",2,29
"org.jabref.logic.importer.ParserResultTest","1,00",1,2
"org.jabref.logic.importer.QueryParser","1,00",1,1
"org.jabref.logic.importer.QueryParserTest","1,00",1,9
"org.jabref.logic.importer.WebFetchers","1,56",4,14
"org.jabref.logic.importer.WebFetchersTest","1,00",1,7
"org.jabref.logic.importer.fetcher.ACMPortalFetcher","1,00",1,6
"org.jabref.logic.importer.fetcher.ACMPortalFetcherTest","1,25",2,5
"org.jabref.logic.importer.fetcher.ACS","2,00",3,4
"org.jabref.logic.importer.fetcher.ACSTest","1,00",1,5
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcher","1,25",2,5
"org.jabref.logic.importer.fetcher.AbstractIsbnFetcherTest","1,00",1,5
"org.jabref.logic.importer.fetcher.ApsFetcher","2,33",4,7
"org.jabref.logic.importer.fetcher.ApsFetcherTest","1,00",1,5
"org.jabref.logic.importer.fetcher.ArXiv","1,71",1,29
"org.jabref.logic.importer.fetcher.ArXiv.ArXivEntry","1,71",5,12
"org.jabref.logic.importer.fetcher.ArXivTest","1,00",1,41
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystem","1,47",4,25
"org.jabref.logic.importer.fetcher.AstrophysicsDataSystemTest","1,00",1,14
"org.jabref.logic.importer.fetcher.BibsonomyScraper","1,00",1,2
"org.jabref.logic.importer.fetcher.CiteSeer","1,14",2,8
"org.jabref.logic.importer.fetcher.CiteSeerTest","1,00",1,2
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcher","1,60",4,8
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesFetcherTest","1,00",1,5
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParser","1,25",2,5
"org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParserTest","1,25",2,5
"org.jabref.logic.importer.fetcher.ComplexSearchQuery","2,00",1,30
"org.jabref.logic.importer.fetcher.ComplexSearchQuery.ComplexSearchQueryBuilder","1,67",2,25
"org.jabref.logic.importer.fetcher.CompositeIdFetcherTest","1,00",1,4
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcher","1,25",2,5
"org.jabref.logic.importer.fetcher.CompositeSearchBasedFetcherTest","1,80",4,9
"org.jabref.logic.importer.fetcher.CrossRef","1,91",5,21
"org.jabref.logic.importer.fetcher.CrossRefTest","1,00",1,16
"org.jabref.logic.importer.fetcher.DBLPFetcher","1,00",1,6
"org.jabref.logic.importer.fetcher.DBLPFetcherTest","1,00",1,4
"org.jabref.logic.importer.fetcher.DOAJFetcher","4,50",24,36
"org.jabref.logic.importer.fetcher.DOAJFetcherTest","1,00",1,8
"org.jabref.logic.importer.fetcher.DiVA","1,00",1,6
"org.jabref.logic.importer.fetcher.DiVATest","1,00",1,6
"org.jabref.logic.importer.fetcher.DoiFetcher","1,78",5,16
"org.jabref.logic.importer.fetcher.DoiFetcherTest","1,00",1,9
"org.jabref.logic.importer.fetcher.DoiResolution","3,33",11,20
"org.jabref.logic.importer.fetcher.DoiResolutionTest","1,00",1,9
"org.jabref.logic.importer.fetcher.FulltextFetcherTest","1,00",1,3
"org.jabref.logic.importer.fetcher.GoogleScholar","2,09",5,23
"org.jabref.logic.importer.fetcher.GoogleScholarTest","1,00",1,9
"org.jabref.logic.importer.fetcher.GrobidCitationFetcher","1,00",1,6
"org.jabref.logic.importer.fetcher.GrobidCitationFetcherTest","1,00",1,7
"org.jabref.logic.importer.fetcher.GvkFetcher","1,00",1,4
"org.jabref.logic.importer.fetcher.GvkFetcherTest","1,00",1,8
"org.jabref.logic.importer.fetcher.GvkParserTest","1,20",2,6
"org.jabref.logic.importer.fetcher.IEEE","3,50",9,28
"org.jabref.logic.importer.fetcher.IEEETest","1,00",1,15
"org.jabref.logic.importer.fetcher.INSPIREFetcher","1,00",1,7
"org.jabref.logic.importer.fetcher.INSPIREFetcherTest","1,00",1,3
"org.jabref.logic.importer.fetcher.IacrEprintFetcher","2,00",5,24
"org.jabref.logic.importer.fetcher.IacrEprintFetcherTest","1,07",2,16
"org.jabref.logic.importer.fetcher.IsbnFetcher","1,60",3,8
"org.jabref.logic.importer.fetcher.IsbnFetcherTest","1,00",1,10
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcher","1,00",1,4
"org.jabref.logic.importer.fetcher.IsbnViaEbookDeFetcherTest","1,00",1,6
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcher","1,50",3,6
"org.jabref.logic.importer.fetcher.IsbnViaOttoBibFetcherTest","1,00",1,6
"org.jabref.logic.importer.fetcher.JstorFetcher","1,75",3,14
"org.jabref.logic.importer.fetcher.JstorFetcherTest","1,00",1,9
"org.jabref.logic.importer.fetcher.LibraryOfCongress","1,00",1,4
"org.jabref.logic.importer.fetcher.LibraryOfCongressTest","1,00",1,4
"org.jabref.logic.importer.fetcher.MathSciNet","1,29",2,9
"org.jabref.logic.importer.fetcher.MathSciNetTest","1,00",1,5
"org.jabref.logic.importer.fetcher.MedlineFetcher","2,30",10,23
"org.jabref.logic.importer.fetcher.MedlineFetcherTest","1,00",1,10
"org.jabref.logic.importer.fetcher.Medra","1,50",3,12
"org.jabref.logic.importer.fetcher.MedraTest","1,00",1,4
"org.jabref.logic.importer.fetcher.MrDLibFetcher","1,71",4,12
"org.jabref.logic.importer.fetcher.MrDLibFetcherTest","1,00",1,4
"org.jabref.logic.importer.fetcher.OpenAccessDoi","1,33",2,4
"org.jabref.logic.importer.fetcher.OpenAccessDoiTest","1,00",1,5
"org.jabref.logic.importer.fetcher.RfcFetcher","1,40",3,7
"org.jabref.logic.importer.fetcher.RfcFetcherTest","1,00",1,9
"org.jabref.logic.importer.fetcher.ScienceDirect","3,67",7,11
"org.jabref.logic.importer.fetcher.ScienceDirectTest","1,00",1,5
"org.jabref.logic.importer.fetcher.SpringerFetcher","3,83",16,23
"org.jabref.logic.importer.fetcher.SpringerFetcherTest","1,00",1,12
"org.jabref.logic.importer.fetcher.SpringerLink","2,50",4,5
"org.jabref.logic.importer.fetcher.SpringerLinkTest","1,00",1,7
"org.jabref.logic.importer.fetcher.TitleFetcher","1,50",3,6
"org.jabref.logic.importer.fetcher.TitleFetcherTest","1,00",1,5
"org.jabref.logic.importer.fetcher.TrustLevel","1,00",1,2
"org.jabref.logic.importer.fetcher.ZbMATH","1,71",6,12
"org.jabref.logic.importer.fetcher.ZbMATHTest","1,00",1,6
"org.jabref.logic.importer.fetcher.transformers.AbstractQueryTransformer","2,15",5,28
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformer","1,00",1,8
"org.jabref.logic.importer.fetcher.transformers.ArXivQueryTransformerTest","1,00",1,6
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformer","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.CollectionOfComputerScienceBibliographiesQueryTransformerTest","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformer","1,00",1,6
"org.jabref.logic.importer.fetcher.transformers.DBLPQueryTransformerTest","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.DefaultLuceneQueryTransformer","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformer","1,00",1,6
"org.jabref.logic.importer.fetcher.transformers.DefaultQueryTransformerTest","1,00",1,5
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformer","1,00",1,9
"org.jabref.logic.importer.fetcher.transformers.GVKQueryTransformerTest","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformer","1,25",2,15
"org.jabref.logic.importer.fetcher.transformers.IEEEQueryTransformerTest","1,00",1,10
"org.jabref.logic.importer.fetcher.transformers.InfixTransformerTest","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformer","1,12",2,9
"org.jabref.logic.importer.fetcher.transformers.JstorQueryTransformerTest","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformer","1,00",1,6
"org.jabref.logic.importer.fetcher.transformers.ScholarQueryTransformerTest","1,00",1,5
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformer","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.SpringerQueryTransformerTest","1,00",1,7
"org.jabref.logic.importer.fetcher.transformers.YearAndYearRangeByFilteringQueryTransformer","1,00",1,1
"org.jabref.logic.importer.fetcher.transformers.YearAndYearRangeByFilteringQueryTransformerTest","1,00",1,1
"org.jabref.logic.importer.fetcher.transformers.YearRangeByFilteringQueryTransformer","1,67",2,5
"org.jabref.logic.importer.fetcher.transformers.YearRangeByFilteringQueryTransformerTest","1,00",1,1
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformer","1,00",1,9
"org.jabref.logic.importer.fetcher.transformers.ZbMathQueryTransformerTest","1,00",1,7
"org.jabref.logic.importer.fileformat.ACMPortalParser","5,50",20,33
"org.jabref.logic.importer.fileformat.ACMPortalParserTest","1,29",2,9
"org.jabref.logic.importer.fileformat.BibTeXMLImporter","4,08",18,49
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTest","1,00",1,5
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestFiles","1,00",1,5
"org.jabref.logic.importer.fileformat.BibTeXMLImporterTestTypes","1,00",1,2
"org.jabref.logic.importer.fileformat.BiblioscapeImporter","14,60",69,73
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTest","1,00",1,6
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTestFiles","1,00",1,3
"org.jabref.logic.importer.fileformat.BiblioscapeImporterTestTypes","1,00",1,2
"org.jabref.logic.importer.fileformat.BibtexImporter","1,88",6,15
"org.jabref.logic.importer.fileformat.BibtexImporterTest","1,71",6,12
"org.jabref.logic.importer.fileformat.BibtexParser","3,36",11,151
"org.jabref.logic.importer.fileformat.BibtexParserTest","1,03",3,134
"org.jabref.logic.importer.fileformat.CffImporter","2,50",13,20
"org.jabref.logic.importer.fileformat.CffImporter.CffAuthor","1,00",1,2
"org.jabref.logic.importer.fileformat.CffImporter.CffFormat","1,00",1,2
"org.jabref.logic.importer.fileformat.CffImporter.CffIdentifier","1,00",1,1
"org.jabref.logic.importer.fileformat.CffImporterTest","1,07",2,16
"org.jabref.logic.importer.fileformat.CoinsParser","3,50",5,7
"org.jabref.logic.importer.fileformat.CopacImporter","4,14",20,29
"org.jabref.logic.importer.fileformat.CopacImporterTest","1,00",1,4
"org.jabref.logic.importer.fileformat.CopacImporterTestFiles","1,00",1,5
"org.jabref.logic.importer.fileformat.CustomImporter","1,14",3,16
"org.jabref.logic.importer.fileformat.CustomImporterTest","1,00",1,14
"org.jabref.logic.importer.fileformat.EndnoteImporter","7,62",50,61
"org.jabref.logic.importer.fileformat.EndnoteImporterTest","1,20",2,12
"org.jabref.logic.importer.fileformat.EndnoteXmlImporter","1,50",5,30
"org.jabref.logic.importer.fileformat.EndnoteXmlImporterTestFiles","1,00",1,6
"org.jabref.logic.importer.fileformat.GvkParser","12,71",70,89
"org.jabref.logic.importer.fileformat.ImporterTestEngine","1,17",2,7
"org.jabref.logic.importer.fileformat.InspecImporter","5,00",19,25
"org.jabref.logic.importer.fileformat.InspecImporterTest","1,00",1,12
"org.jabref.logic.importer.fileformat.IsiImporter","6,00",45,78
"org.jabref.logic.importer.fileformat.IsiImporterTest","1,05",2,22
"org.jabref.logic.importer.fileformat.MedlineImporter","4,37",19,153
"org.jabref.logic.importer.fileformat.MedlineImporterTest","1,00",1,5
"org.jabref.logic.importer.fileformat.MedlineImporterTestFiles","1,00",1,7
"org.jabref.logic.importer.fileformat.MedlinePlainImporter","5,12",23,82
"org.jabref.logic.importer.fileformat.MedlinePlainImporterTest","1,05",2,21
"org.jabref.logic.importer.fileformat.ModsImporter","3,20",11,80
"org.jabref.logic.importer.fileformat.ModsImporterTestFiles","1,00",1,4
"org.jabref.logic.importer.fileformat.MrDLibImporter","1,69",7,22
"org.jabref.logic.importer.fileformat.MrDLibImporter.RankedBibEntry","1,00",1,1
"org.jabref.logic.importer.fileformat.MrDLibImporterTest","1,00",1,7
"org.jabref.logic.importer.fileformat.MsBibImporter","1,00",1,9
"org.jabref.logic.importer.fileformat.MsBibImporterTest","1,14",2,8
"org.jabref.logic.importer.fileformat.MsBibImporterTestFiles","1,00",1,5
"org.jabref.logic.importer.fileformat.OvidImporter","7,00",31,42
"org.jabref.logic.importer.fileformat.OvidImporterTest","1,08",2,14
"org.jabref.logic.importer.fileformat.PdfContentImporter","5,24",45,89
"org.jabref.logic.importer.fileformat.PdfContentImporterTest","1,00",1,7
"org.jabref.logic.importer.fileformat.PdfContentImporterTestFiles","1,00",1,3
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporter","2,17",8,26
"org.jabref.logic.importer.fileformat.PdfEmbeddedBibFileImporterTest","1,00",1,5
"org.jabref.logic.importer.fileformat.PdfGrobidImporter","1,10",2,11
"org.jabref.logic.importer.fileformat.PdfGrobidImporterTest","1,00",1,6
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter","2,50",1,20
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporter.EntryBasedFetcherWrapper","2,50",4,5
"org.jabref.logic.importer.fileformat.PdfMergeMetadataImporterTest","1,00",1,5
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporter","1,00",1,9
"org.jabref.logic.importer.fileformat.PdfVerbatimBibTextImporterTest","1,00",1,5
"org.jabref.logic.importer.fileformat.PdfXmpImporter","1,00",1,10
"org.jabref.logic.importer.fileformat.PdfXmpImporterTest","1,00",1,10
"org.jabref.logic.importer.fileformat.RISImporterTest","1,00",1,6
"org.jabref.logic.importer.fileformat.RISImporterTestFiles","1,00",1,3
"org.jabref.logic.importer.fileformat.RepecNepImporter","3,00",11,45
"org.jabref.logic.importer.fileformat.RepecNepImporterTest","1,00",1,10
"org.jabref.logic.importer.fileformat.RisImporter","12,83",72,77
"org.jabref.logic.importer.fileformat.SilverPlatterImporter","7,00",28,35
"org.jabref.logic.importer.fileformat.SilverPlatterImporterTest","1,00",1,8
"org.jabref.logic.importer.util.FileFieldParser","9,50",12,19
"org.jabref.logic.importer.util.FileFieldParserTest","1,00",1,4
"org.jabref.logic.importer.util.GrobidService","2,00",2,6
"org.jabref.logic.importer.util.GrobidService.ConsolidateCitations","1,00",1,2
"org.jabref.logic.importer.util.GrobidServiceTest","1,00",1,6
"org.jabref.logic.importer.util.GroupsParser","2,92",9,38
"org.jabref.logic.importer.util.GroupsParserTest","1,00",1,12
"org.jabref.logic.importer.util.INSPIREBibtexFilterReader","3,50",6,14
"org.jabref.logic.importer.util.IdentifierParser","3,50",5,7
"org.jabref.logic.importer.util.JsonReader","2,00",2,2
"org.jabref.logic.importer.util.JsonReaderTest","1,00",1,5
"org.jabref.logic.importer.util.MediaTypes",n/a,n/a,0
"org.jabref.logic.importer.util.MetaDataParser","4,29",15,30
"org.jabref.logic.importer.util.ShortDOIService","1,50",2,3
"org.jabref.logic.importer.util.ShortDOIServiceException","1,00",1,5
"org.jabref.logic.importer.util.ShortDOIServiceTest","1,00",1,3
"org.jabref.logic.integrity.ASCIICharacterChecker","3,00",3,3
"org.jabref.logic.integrity.ASCIICharacterCheckerTest","1,20",2,6
"org.jabref.logic.integrity.AbbreviationChecker","2,00",3,4
"org.jabref.logic.integrity.AbbreviationCheckerTest","1,00",1,5
"org.jabref.logic.integrity.BibStringChecker","5,00",5,5
"org.jabref.logic.integrity.BibStringCheckerTest","1,00",1,4
"org.jabref.logic.integrity.BibTeXEntryTypeChecker","2,00",2,2
"org.jabref.logic.integrity.BooktitleChecker","3,00",3,3
"org.jabref.logic.integrity.BooktitleCheckerTest","1,00",1,3
"org.jabref.logic.integrity.BracesCorrector","4,00",4,4
"org.jabref.logic.integrity.BracesCorrectorTest","1,00",1,8
"org.jabref.logic.integrity.BracketChecker","7,00",7,7
"org.jabref.logic.integrity.BracketCheckerTest","1,00",1,10
"org.jabref.logic.integrity.CitationKeyChecker","3,00",3,3
"org.jabref.logic.integrity.CitationKeyCheckerTest","1,00",1,4
"org.jabref.logic.integrity.CitationKeyDeviationChecker","2,00",3,4
"org.jabref.logic.integrity.CitationKeyDeviationCheckerTest","1,00",1,2
"org.jabref.logic.integrity.CitationKeyDuplicationChecker","2,00",3,4
"org.jabref.logic.integrity.CitationKeyDuplicationCheckerTest","1,00",1,2
"org.jabref.logic.integrity.DateChecker","3,00",3,3
"org.jabref.logic.integrity.DateCheckerTest","1,00",1,3
"org.jabref.logic.integrity.DoiDuplicationChecker","2,00",2,2
"org.jabref.logic.integrity.DoiDuplicationCheckerTest","1,00",1,3
"org.jabref.logic.integrity.DoiValidityChecker","3,00",3,3
"org.jabref.logic.integrity.DoiValidityCheckerTest","1,00",1,7
"org.jabref.logic.integrity.EditionChecker","3,00",7,9
"org.jabref.logic.integrity.EditionCheckerTest","1,00",1,19
"org.jabref.logic.integrity.EntryLinkChecker","4,00",7,8
"org.jabref.logic.integrity.EntryLinkCheckerTest","1,00",1,8
"org.jabref.logic.integrity.FieldChecker","1,50",2,3
"org.jabref.logic.integrity.FieldCheckers","1,75",4,7
"org.jabref.logic.integrity.FileChecker","2,50",4,5
"org.jabref.logic.integrity.HTMLCharacterChecker","4,00",4,4
"org.jabref.logic.integrity.HTMLCharacterCheckerTest","1,00",1,7
"org.jabref.logic.integrity.HowPublishedChecker","2,00",3,4
"org.jabref.logic.integrity.HowPublishedCheckerTest","1,00",1,7
"org.jabref.logic.integrity.ISBNChecker","4,00",4,4
"org.jabref.logic.integrity.ISBNCheckerTest","1,00",1,6
"org.jabref.logic.integrity.ISSNChecker","4,00",4,4
"org.jabref.logic.integrity.ISSNCheckerTest","1,00",1,7
"org.jabref.logic.integrity.IntegrityCheck","2,25",4,9
"org.jabref.logic.integrity.IntegrityCheckTest","1,16",2,22
"org.jabref.logic.integrity.IntegrityMessage","1,25",3,10
"org.jabref.logic.integrity.JournalInAbbreviationListChecker","2,00",3,4
"org.jabref.logic.integrity.JournalInAbbreviationListCheckerTest","1,00",1,5
"org.jabref.logic.integrity.MonthChecker","2,50",4,5
"org.jabref.logic.integrity.MonthCheckerTest","1,00",1,12
"org.jabref.logic.integrity.NoBibTexFieldCheckerTest","1,00",1,3
"org.jabref.logic.integrity.NoBibtexFieldChecker","1,00",1,2
"org.jabref.logic.integrity.NoteChecker","2,00",3,4
"org.jabref.logic.integrity.NoteCheckerTest","1,00",1,7
"org.jabref.logic.integrity.PagesChecker","2,50",3,5
"org.jabref.logic.integrity.PagesCheckerBibLatexTest","1,00",1,19
"org.jabref.logic.integrity.PagesCheckerTest","1,00",1,9
"org.jabref.logic.integrity.PersonNamesChecker","3,00",5,6
"org.jabref.logic.integrity.PersonNamesCheckerTest","1,00",1,13
"org.jabref.logic.integrity.TitleChecker","4,50",8,9
"org.jabref.logic.integrity.TitleCheckerTest","1,00",1,40
"org.jabref.logic.integrity.TypeChecker","3,00",3,3
"org.jabref.logic.integrity.TypeCheckerTest","1,00",1,2
"org.jabref.logic.integrity.UTF8Checker","2,00",3,4
"org.jabref.logic.integrity.UTF8CheckerTest","1,00",1,4
"org.jabref.logic.integrity.UrlChecker","3,00",3,3
"org.jabref.logic.integrity.UrlCheckerTest","1,00",1,6
"org.jabref.logic.integrity.ValidCitationKeyChecker","3,00",3,3
"org.jabref.logic.integrity.ValidCitationKeyCheckerTest","1,00",1,2
"org.jabref.logic.integrity.YearChecker","4,00",4,4
"org.jabref.logic.integrity.YearCheckerTest","1,00",1,16
"org.jabref.logic.journals.Abbreviation","1,64",5,18
"org.jabref.logic.journals.AbbreviationFormat","1,00",1,2
"org.jabref.logic.journals.AbbreviationParser","2,00",6,10
"org.jabref.logic.journals.AbbreviationTest","1,00",1,12
"org.jabref.logic.journals.AbbreviationWriter","2,00",3,4
"org.jabref.logic.journals.AbbreviationsTest","1,00",1,3
"org.jabref.logic.journals.JournalAbbreviationLoader","1,67",3,5
"org.jabref.logic.journals.JournalAbbreviationPreferences","1,00",1,4
"org.jabref.logic.journals.JournalAbbreviationRepository","1,13",2,17
"org.jabref.logic.journals.JournalAbbreviationRepositoryTest","1,00",1,12
"org.jabref.logic.l10n.Encodings","1,00",1,2
"org.jabref.logic.l10n.EncodingsTest","1,00",1,4
"org.jabref.logic.l10n.JavaLocalizationEntryParser","6,00",7,18
"org.jabref.logic.l10n.JavaLocalizationEntryParserTest","1,00",1,8
"org.jabref.logic.l10n.Language","1,50",3,6
"org.jabref.logic.l10n.LanguageTest","1,00",1,3
"org.jabref.logic.l10n.Localization","1,86",3,13
"org.jabref.logic.l10n.Localization.LocalizationBundle","1,00",1,5
"org.jabref.logic.l10n.LocalizationBundleForTest",n/a,n/a,0
"org.jabref.logic.l10n.LocalizationConsistencyTest","1,55",1,17
"org.jabref.logic.l10n.LocalizationConsistencyTest.DuplicationDetectionProperties","1,33",2,4
"org.jabref.logic.l10n.LocalizationEntry","1,33",4,12
"org.jabref.logic.l10n.LocalizationKey","1,00",1,6
"org.jabref.logic.l10n.LocalizationKeyParams","2,00",2,4
"org.jabref.logic.l10n.LocalizationKeyParamsTest","1,00",1,3
"org.jabref.logic.l10n.LocalizationKeyTest","1,00",1,2
"org.jabref.logic.l10n.LocalizationLocator","1,00",1,1
"org.jabref.logic.l10n.LocalizationParser","1,18",2,20
"org.jabref.logic.l10n.LocalizationTest","1,00",1,10
"org.jabref.logic.layout.AbstractParamLayoutFormatter","5,00",9,10
"org.jabref.logic.layout.Layout","3,50",11,21
"org.jabref.logic.layout.LayoutEntry","6,85",18,89
"org.jabref.logic.layout.LayoutEntryTest","1,00",1,3
"org.jabref.logic.layout.LayoutFormatterBasedFormatter","1,00",1,6
"org.jabref.logic.layout.LayoutFormatterPreferences","1,00",1,7
"org.jabref.logic.layout.LayoutHelper","5,25",18,63
"org.jabref.logic.layout.LayoutHelperTest","1,00",1,3
"org.jabref.logic.layout.LayoutTest","1,00",1,13
"org.jabref.logic.layout.StringInt","1,00",1,1
"org.jabref.logic.layout.TextBasedPreviewLayout","1,14",2,8
"org.jabref.logic.layout.format.AuthorAbbreviator","1,00",1,1
"org.jabref.logic.layout.format.AuthorAbbreviatorTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorAndToSemicolonReplacer","1,00",1,1
"org.jabref.logic.layout.format.AuthorAndToSemicolonReplacerTest","1,00",1,2
"org.jabref.logic.layout.format.AuthorAndsCommaReplacer","5,00",5,5
"org.jabref.logic.layout.format.AuthorAndsCommaReplacerTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorAndsReplacer","3,00",3,3
"org.jabref.logic.layout.format.AuthorAndsReplacerTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastOxfordCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstAbbrLastOxfordCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstFirst","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstFirstCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstFirstCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstFirstTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstLastCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstLastCommasTest","1,00",1,2
"org.jabref.logic.layout.format.AuthorFirstLastOxfordCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorFirstLastOxfordCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorLF_FF","1,00",1,1
"org.jabref.logic.layout.format.AuthorLF_FFAbbr","1,00",1,1
"org.jabref.logic.layout.format.AuthorLF_FFAbbrTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorLF_FFTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirst","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrOxfordCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbrOxfordCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviator","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstAbbreviatorTester","1,00",1,6
"org.jabref.logic.layout.format.AuthorLastFirstCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstOxfordCommas","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstOxfordCommasTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorLastFirstTest","1,00",1,1
"org.jabref.logic.layout.format.AuthorNatBib","1,00",1,1
"org.jabref.logic.layout.format.AuthorNatBibTest","1,00",1,2
"org.jabref.logic.layout.format.AuthorOrgSci","3,00",3,3
"org.jabref.logic.layout.format.AuthorOrgSciTest","1,00",1,4
"org.jabref.logic.layout.format.Authors","11,20",33,56
"org.jabref.logic.layout.format.AuthorsTest","1,00",1,23
"org.jabref.logic.layout.format.CSLType","1,00",1,1
"org.jabref.logic.layout.format.CompositeFormat","1,25",2,5
"org.jabref.logic.layout.format.CompositeFormatTest","1,00",1,3
"org.jabref.logic.layout.format.CreateBibORDFAuthors","2,50",4,5
"org.jabref.logic.layout.format.CreateDocBook4Authors","1,00",1,1
"org.jabref.logic.layout.format.CreateDocBook4Editors","1,00",1,1
"org.jabref.logic.layout.format.CreateDocBook5Authors","1,00",1,1
"org.jabref.logic.layout.format.CreateDocBook5Editors","1,00",1,1
"org.jabref.logic.layout.format.CurrentDate","2,00",2,2
"org.jabref.logic.layout.format.DOICheck","3,00",3,3
"org.jabref.logic.layout.format.DOICheckTest","1,00",1,2
"org.jabref.logic.layout.format.DOIStrip","2,00",2,2
"org.jabref.logic.layout.format.DOIStripTest","1,00",1,2
"org.jabref.logic.layout.format.DateFormatter","1,00",1,2
"org.jabref.logic.layout.format.DateFormatterTest","1,00",1,4
"org.jabref.logic.layout.format.Default","1,50",2,3
"org.jabref.logic.layout.format.DefaultTest","1,50",2,3
"org.jabref.logic.layout.format.DocBookAuthorFormatter","5,00",5,5
"org.jabref.logic.layout.format.DocBookVersion",n/a,n/a,0
"org.jabref.logic.layout.format.EntryTypeFormatter","1,00",1,1
"org.jabref.logic.layout.format.EntryTypeFormatterTest","1,00",1,2
"org.jabref.logic.layout.format.FileLink","3,33",8,10
"org.jabref.logic.layout.format.FileLinkPreferences","1,00",1,3
"org.jabref.logic.layout.format.FileLinkTest","1,33",2,4
"org.jabref.logic.layout.format.FirstPage","3,00",3,3
"org.jabref.logic.layout.format.FirstPageTest","1,00",1,2
"org.jabref.logic.layout.format.FormatPagesForHTML","1,00",1,1
"org.jabref.logic.layout.format.FormatPagesForXML","1,00",1,1
"org.jabref.logic.layout.format.GetOpenOfficeType","15,00",15,15
"org.jabref.logic.layout.format.HTMLChars","14,50",19,29
"org.jabref.logic.layout.format.HTMLCharsTest","1,00",1,9
"org.jabref.logic.layout.format.HTMLParagraphs","5,00",5,5
"org.jabref.logic.layout.format.HTMLParagraphsTest","1,00",1,2
"org.jabref.logic.layout.format.IfPlural","2,50",3,5
"org.jabref.logic.layout.format.IfPluralTest","1,00",1,6
"org.jabref.logic.layout.format.Iso690FormatDate","5,00",5,5
"org.jabref.logic.layout.format.Iso690NamesAuthors","10,00",10,10
"org.jabref.logic.layout.format.JournalAbbreviator","1,00",1,2
"org.jabref.logic.layout.format.LastPage","4,00",4,4
"org.jabref.logic.layout.format.LastPageTest","1,00",1,2
"org.jabref.logic.layout.format.LatexToUnicodeFormatter","1,00",1,5
"org.jabref.logic.layout.format.LatexToUnicodeFormatterTest","1,00",1,34
"org.jabref.logic.layout.format.MarkdownFormatter","1,00",1,2
"org.jabref.logic.layout.format.MarkdownFormatterTest","1,00",1,7
"org.jabref.logic.layout.format.NameFormatter","4,00",9,20
"org.jabref.logic.layout.format.NameFormatterPreferences","1,00",1,3
"org.jabref.logic.layout.format.NameFormatterTest","1,00",1,2
"org.jabref.logic.layout.format.NoSpaceBetweenAbbreviations","1,00",1,1
"org.jabref.logic.layout.format.NoSpaceBetweenAbbreviationsTest","1,00",1,2
"org.jabref.logic.layout.format.NotFoundFormatter","1,00",1,3
"org.jabref.logic.layout.format.Number","1,00",1,2
"org.jabref.logic.layout.format.Ordinal","3,00",3,3
"org.jabref.logic.layout.format.OrdinalTest","1,00",1,7
"org.jabref.logic.layout.format.RTFChars","25,00",46,75
"org.jabref.logic.layout.format.RTFCharsTest","1,00",1,14
"org.jabref.logic.layout.format.RemoveBrackets","3,00",3,3
"org.jabref.logic.layout.format.RemoveBracketsAddComma","4,00",4,4
"org.jabref.logic.layout.format.RemoveBracketsAddCommaTest","1,00",1,3
"org.jabref.logic.layout.format.RemoveBracketsTest","1,00",1,6
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatter","14,00",14,14
"org.jabref.logic.layout.format.RemoveLatexCommandsFormatterTest","1,00",1,10
"org.jabref.logic.layout.format.RemoveTilde","4,00",4,4
"org.jabref.logic.layout.format.RemoveTildeTest","1,00",1,3
"org.jabref.logic.layout.format.RemoveWhitespace","4,00",4,4
"org.jabref.logic.layout.format.RemoveWhitespaceTest","1,00",1,5
"org.jabref.logic.layout.format.Replace","2,00",2,4
"org.jabref.logic.layout.format.ReplaceTest","1,00",1,6
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatter","1,33",2,8
"org.jabref.logic.layout.format.ReplaceUnicodeLigaturesFormatterTest","1,00",1,5
"org.jabref.logic.layout.format.RisAuthors","2,50",4,5
"org.jabref.logic.layout.format.RisKeywords","4,00",4,4
"org.jabref.logic.layout.format.RisKeywordsTest","1,00",1,5
"org.jabref.logic.layout.format.RisMonth","2,00",2,2
"org.jabref.logic.layout.format.RisMonthTest","1,00",1,4
"org.jabref.logic.layout.format.ShortMonthFormatter","1,00",1,1
"org.jabref.logic.layout.format.ShortMonthFormatterTest","1,00",1,4
"org.jabref.logic.layout.format.ToLowerCase","2,00",2,2
"org.jabref.logic.layout.format.ToLowerCaseTest","1,00",1,3
"org.jabref.logic.layout.format.ToUpperCase","2,00",2,2
"org.jabref.logic.layout.format.ToUpperCaseTest","1,00",1,2
"org.jabref.logic.layout.format.WrapContent","3,00",4,6
"org.jabref.logic.layout.format.WrapContentTest","1,50",2,3
"org.jabref.logic.layout.format.WrapFileLinks","5,80",2,29
"org.jabref.logic.layout.format.WrapFileLinks.FormatEntry","1,00",1,4
"org.jabref.logic.layout.format.WrapFileLinksTest","1,00",1,18
"org.jabref.logic.layout.format.XMLChars","3,50",8,14
"org.jabref.logic.logging.JabRefLogger","1,00",1,3
"org.jabref.logic.logging.LogMessages","1,00",1,5
"org.jabref.logic.msbib.BibTeXConverter","3,60",11,18
"org.jabref.logic.msbib.MSBibConverter","7,00",16,21
"org.jabref.logic.msbib.MSBibDatabase","2,20",4,11
"org.jabref.logic.msbib.MSBibEntry","3,08",11,40
"org.jabref.logic.msbib.MSBibEntryType",n/a,n/a,0
"org.jabref.logic.msbib.MSBibMapping","1,00",1,7
"org.jabref.logic.msbib.MsBibAuthor","1,38",2,11
"org.jabref.logic.msbib.MsBibAuthorTest","1,00",1,6
"org.jabref.logic.msbib.PageNumbers","1,60",2,8
"org.jabref.logic.net.ProgressInputStream","1,15",2,15
"org.jabref.logic.net.ProxyAuthenticator","3,00",3,3
"org.jabref.logic.net.ProxyPreferences","1,10",3,23
"org.jabref.logic.net.ProxyRegisterer","2,00",3,4
"org.jabref.logic.net.URLDownload","1,52",6,38
"org.jabref.logic.net.URLDownloadTest","1,08",2,13
"org.jabref.logic.net.URLUtilTest","1,00",1,3
"org.jabref.logic.openoffice.OOUtil","5,00",20,35
"org.jabref.logic.openoffice.OOUtil.Formatting",n/a,n/a,0
"org.jabref.logic.openoffice.OpenOfficeFileSearch","2,00",4,10
"org.jabref.logic.openoffice.OpenOfficePreferences","1,00",1,14
"org.jabref.logic.openoffice.UndefinedBibtexEntry","1,00",1,2
"org.jabref.logic.openoffice.UndefinedParagraphFormatException","1,00",1,2
"org.jabref.logic.openoffice.action.EditInsert","2,33",4,7
"org.jabref.logic.openoffice.action.EditMerge","5,60",14,28
"org.jabref.logic.openoffice.action.EditMerge.JoinableGroupData","1,00",1,1
"org.jabref.logic.openoffice.action.EditMerge.ScanState","1,00",1,2
"org.jabref.logic.openoffice.action.EditSeparate","2,50",4,5
"org.jabref.logic.openoffice.action.ExportCited","2,50",4,5
"org.jabref.logic.openoffice.action.ExportCited.GenerateDatabaseResult","1,00",1,1
"org.jabref.logic.openoffice.action.ManageCitations","1,00",1,3
"org.jabref.logic.openoffice.action.Update","1,75",4,7
"org.jabref.logic.openoffice.action.Update.SyncOptions","1,00",1,3
"org.jabref.logic.openoffice.backend.Backend52","2,72",12,49
"org.jabref.logic.openoffice.backend.Codec52","1,29",2,9
"org.jabref.logic.openoffice.backend.Codec52.ParsedMarkName","1,00",1,1
"org.jabref.logic.openoffice.backend.GetContext","4,00",7,8
"org.jabref.logic.openoffice.backend.NamedRangeManagerReferenceMark","1,00",1,3
"org.jabref.logic.openoffice.backend.NamedRangeReferenceMark","2,92",11,38
"org.jabref.logic.openoffice.frontend.OOFrontend","1,78",6,41
"org.jabref.logic.openoffice.frontend.RangeForOverlapCheck","1,00",1,3
"org.jabref.logic.openoffice.frontend.UpdateBibliography","1,17",2,7
"org.jabref.logic.openoffice.frontend.UpdateCitationMarkers","2,50",4,10
"org.jabref.logic.openoffice.style.OOBibStyle","1,83",6,179
"org.jabref.logic.openoffice.style.OOBibStyle.BibStyleMode",n/a,n/a,0
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker","5,75",22,69
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.AuthorYearMarkerPurpose",n/a,n/a,0
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.CitationMarkerNormEntryWrap","1,00",1,6
"org.jabref.logic.openoffice.style.OOBibStyleGetCitationMarker.FieldAndContent","1,00",1,1
"org.jabref.logic.openoffice.style.OOBibStyleGetNumCitationMarker","6,40",14,32
"org.jabref.logic.openoffice.style.OOBibStyleTest","1,33",8,44
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper","2,14",5,15
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericBibEntryImpl","1,00",1,3
"org.jabref.logic.openoffice.style.OOBibStyleTestHelper.CitationMarkerNumericEntryImpl","1,25",2,5
"org.jabref.logic.openoffice.style.OOFormatBibliography","2,57",6,18
"org.jabref.logic.openoffice.style.OOPreFormatter","14,50",19,29
"org.jabref.logic.openoffice.style.OOPreFormatterTest","1,00",1,7
"org.jabref.logic.openoffice.style.OOProcess","1,80",4,9
"org.jabref.logic.openoffice.style.OOProcessAuthorYearMarkers","3,40",8,17
"org.jabref.logic.openoffice.style.OOProcessCitationKeyMarkers","1,50",2,3
"org.jabref.logic.openoffice.style.OOProcessNumericMarkers","2,00",3,4
"org.jabref.logic.openoffice.style.StyleLoader","2,25",4,18
"org.jabref.logic.openoffice.style.StyleLoaderTest","1,47",4,25
"org.jabref.logic.pdf.EntryAnnotationImporter","1,33",2,4
"org.jabref.logic.pdf.EntryAnnotationImporterTest","1,50",2,3
"org.jabref.logic.pdf.FileAnnotationCache","1,00",1,5
"org.jabref.logic.pdf.PdfAnnotationImporter","4,25",7,17
"org.jabref.logic.pdf.PdfAnnotationImporterTest","1,00",1,16
"org.jabref.logic.pdf.TextExtractor","1,75",3,7
"org.jabref.logic.pdf.search.indexing.DocumentReader","1,60",3,16
"org.jabref.logic.pdf.search.indexing.DocumentReaderTest","1,00",1,4
"org.jabref.logic.pdf.search.indexing.IndexingTaskManager","1,55",3,17
"org.jabref.logic.pdf.search.indexing.PdfIndexer","1,92",6,25
"org.jabref.logic.pdf.search.indexing.PdfIndexerTest","1,00",1,8
"org.jabref.logic.pdf.search.retrieval.PdfSearcher","2,00",4,6
"org.jabref.logic.pdf.search.retrieval.PdfSearcherTest","1,00",1,9
"org.jabref.logic.preferences.DOIPreferences","1,00",1,7
"org.jabref.logic.preferences.OwnerPreferences","1,00",1,10
"org.jabref.logic.preferences.TimestampPreferences","1,00",1,11
"org.jabref.logic.protectedterms.ProtectedTermsList","1,20",3,18
"org.jabref.logic.protectedterms.ProtectedTermsListTest","1,00",1,14
"org.jabref.logic.protectedterms.ProtectedTermsLoader","2,08",11,25
"org.jabref.logic.protectedterms.ProtectedTermsLoaderTest","1,16",2,22
"org.jabref.logic.protectedterms.ProtectedTermsParser","1,33",2,8
"org.jabref.logic.protectedterms.ProtectedTermsPreferences","1,00",1,9
"org.jabref.logic.remote.RemoteCommunicationTest","1,00",1,7
"org.jabref.logic.remote.RemotePreferences","1,00",1,9
"org.jabref.logic.remote.RemotePreferencesTest","1,00",1,7
"org.jabref.logic.remote.RemoteSetupTest","1,00",1,8
"org.jabref.logic.remote.RemoteUtil","1,00",1,2
"org.jabref.logic.remote.RemoteUtilTest","1,00",1,4
"org.jabref.logic.remote.client.RemoteClient","1,25",2,5
"org.jabref.logic.remote.server.RemoteListenerServer","2,25",5,9
"org.jabref.logic.remote.server.RemoteListenerServerLifecycle","1,43",2,10
"org.jabref.logic.remote.server.RemoteListenerServerThread","1,00",1,3
"org.jabref.logic.remote.shared.Protocol","2,00",4,10
"org.jabref.logic.remote.shared.RemoteMessage",n/a,n/a,0
"org.jabref.logic.search.DatabaseSearcher","1,50",2,3
"org.jabref.logic.search.DatabaseSearcherTest","1,00",1,11
"org.jabref.logic.search.SearchQuery","1,44",4,26
"org.jabref.logic.search.SearchQuery.EscapeMode","1,00",1,2
"org.jabref.logic.search.SearchQueryTest","1,00",1,30
"org.jabref.logic.shared.DBMSConnection","1,50",2,6
"org.jabref.logic.shared.DBMSConnectionProperties","1,53",6,26
"org.jabref.logic.shared.DBMSConnectionPropertiesBuilder","1,09",2,12
"org.jabref.logic.shared.DBMSConnectionPropertiesTest","1,00",1,2
"org.jabref.logic.shared.DBMSConnectionTest","1,00",1,1
"org.jabref.logic.shared.DBMSProcessor","2,44",6,61
"org.jabref.logic.shared.DBMSProcessorTest","1,12",4,36
"org.jabref.logic.shared.DBMSSynchronizer","2,04",9,51
"org.jabref.logic.shared.DBMSSynchronizerTest","1,00",1,13
"org.jabref.logic.shared.DBMSType","1,00",1,6
"org.jabref.logic.shared.DBMSTypeTest","1,00",1,21
"org.jabref.logic.shared.DatabaseLocation",n/a,n/a,0
"org.jabref.logic.shared.DatabaseNotSupportedException","1,00",1,1
"org.jabref.logic.shared.MySQLProcessor","1,00",1,3
"org.jabref.logic.shared.OracleProcessor","1,75",5,14
"org.jabref.logic.shared.PostgreSQLProcessor","1,57",5,11
"org.jabref.logic.shared.SynchronizationTestEventListener","1,00",1,4
"org.jabref.logic.shared.SynchronizationTestSimulator","1,00",1,8
"org.jabref.logic.shared.TestConnector","3,00",5,6
"org.jabref.logic.shared.TestManager","2,50",4,5
"org.jabref.logic.shared.event.ConnectionLostEvent","1,00",1,2
"org.jabref.logic.shared.event.SharedEntriesNotPresentEvent","1,00",1,2
"org.jabref.logic.shared.event.UpdateRefusedEvent","1,00",1,4
"org.jabref.logic.shared.exception.InvalidDBMSConnectionPropertiesException","1,00",1,1
"org.jabref.logic.shared.exception.NotASharedDatabaseException","1,00",1,1
"org.jabref.logic.shared.exception.OfflineLockException","1,00",1,3
"org.jabref.logic.shared.exception.SharedEntryNotPresentException","1,00",1,2
"org.jabref.logic.shared.listener.OracleNotificationListener","1,00",1,2
"org.jabref.logic.shared.listener.PostgresSQLNotificationListener","2,33",5,7
"org.jabref.logic.shared.prefs.SharedDatabasePreferences","1,00",1,27
"org.jabref.logic.shared.security.Password","1,00",1,5
"org.jabref.logic.shared.security.PasswordTest","1,00",1,2
"org.jabref.logic.texparser.DefaultLatexParser","2,75",6,22
"org.jabref.logic.texparser.DefaultTexParserTest","1,00",1,14
"org.jabref.logic.texparser.LatexParserTest","1,00",1,3
"org.jabref.logic.texparser.TexBibEntriesResolver","1,00",1,4
"org.jabref.logic.texparser.TexBibEntriesResolverTest","1,00",1,7
"org.jabref.logic.undo.AddUndoableActionEvent","1,00",1,1
"org.jabref.logic.undo.UndoChangeEvent","1,00",1,5
"org.jabref.logic.undo.UndoRedoEvent","1,00",1,1
"org.jabref.logic.util.BuildInfo","1,67",2,5
"org.jabref.logic.util.BuildInfoTest","1,00",1,3
"org.jabref.logic.util.CoarseChangeFilter","1,20",2,6
"org.jabref.logic.util.DelayTaskThrottler","1,33",2,8
"org.jabref.logic.util.DevelopmentStageTest","1,00",1,4
"org.jabref.logic.util.ExternalLinkCreator","1,00",1,1
"org.jabref.logic.util.ExternalLinkCreatorTest","1,00",1,4
"org.jabref.logic.util.MetadataSerializationConfiguration","1,00",1,1
"org.jabref.logic.util.OS","1,00",1,1
"org.jabref.logic.util.StandardFileType","1,00",1,4
"org.jabref.logic.util.TestEntry","1,00",1,3
"org.jabref.logic.util.UnknownFileType","1,80",3,9
"org.jabref.logic.util.UpdateField","2,00",5,16
"org.jabref.logic.util.UpdateFieldTest","1,00",1,29
"org.jabref.logic.util.Version","2,60",1,39
"org.jabref.logic.util.Version.DevelopmentStage","2,33",5,7
"org.jabref.logic.util.VersionTest","1,00",1,39
"org.jabref.logic.util.io.AutoLinkPreferences","1,00",1,13
"org.jabref.logic.util.io.AutoLinkPreferences.CitationKeyDependency",n/a,n/a,0
"org.jabref.logic.util.io.CitationKeyBasedFileFinder","2,75",5,11
"org.jabref.logic.util.io.CitationKeyBasedFileFinderTest","1,00",1,5
"org.jabref.logic.util.io.DatabaseFileLookup","1,33",2,4
"org.jabref.logic.util.io.FileFinders","4,00",4,4
"org.jabref.logic.util.io.FileHistory","1,14",2,8
"org.jabref.logic.util.io.FileHistoryTest","1,00",1,7
"org.jabref.logic.util.io.FileNameCleaner","2,00",3,8
"org.jabref.logic.util.io.FileNameCleanerTest","1,00",1,4
"org.jabref.logic.util.io.FileNameUniqueness","4,00",7,12
"org.jabref.logic.util.io.FileNameUniquenessTest","1,00",1,9
"org.jabref.logic.util.io.FileUtil","1,78",8,41
"org.jabref.logic.util.io.FileUtilTest","1,00",1,50
"org.jabref.logic.util.io.RegExpBasedFileFinder","3,14",14,22
"org.jabref.logic.util.io.RegExpBasedFileFinderTests","1,11",2,10
"org.jabref.logic.util.io.XMLUtil","1,57",1,11
"org.jabref.logic.util.io.XMLUtil.NodeListWrapper","1,00",1,3
"org.jabref.logic.util.strings.HTMLUnicodeConversionMaps","5,50",1,11
"org.jabref.logic.util.strings.QuotedStringTokenizer","2,25",5,9
"org.jabref.logic.util.strings.RtfCharMap","1,00",1,3
"org.jabref.logic.util.strings.StringLengthComparator","3,00",3,3
"org.jabref.logic.util.strings.StringLengthComparatorTest","1,00",1,3
"org.jabref.logic.util.strings.StringManipulator","1,88",7,15
"org.jabref.logic.util.strings.StringManipulator.Direction","1,00",1,1
"org.jabref.logic.util.strings.StringManipulator.LetterCase",n/a,n/a,0
"org.jabref.logic.util.strings.StringManipulatorTest","1,00",1,15
"org.jabref.logic.util.strings.StringSimilarity","1,00",1,2
"org.jabref.logic.util.strings.StringSimilarityTest","1,00",1,1
"org.jabref.logic.util.strings.UnicodeLigaturesMap","1,00",1,1
"org.jabref.logic.util.strings.XmlCharsMap","1,00",1,1
"org.jabref.logic.xmp.DocumentInformationExtractor","2,14",4,15
"org.jabref.logic.xmp.DublinCoreExtractor","2,33",12,56
"org.jabref.logic.xmp.EncryptedPdfsNotSupportedException",n/a,n/a,0
"org.jabref.logic.xmp.XmpPreferences","1,00",1,4
"org.jabref.logic.xmp.XmpUtilReader","2,33",6,14
"org.jabref.logic.xmp.XmpUtilReaderTest","1,00",1,6
"org.jabref.logic.xmp.XmpUtilShared","1,00",1,3
"org.jabref.logic.xmp.XmpUtilWriter","2,80",11,28
"org.jabref.logic.xmp.XmpUtilWriterTest","1,00",1,5
"org.jabref.migrations.ConvertLegacyExplicitGroups","4,00",5,8
"org.jabref.migrations.ConvertLegacyExplicitGroupsTest","1,00",1,5
"org.jabref.migrations.ConvertMarkingToGroups","3,00",4,9
"org.jabref.migrations.ConvertMarkingToGroupsTest","1,00",1,1
"org.jabref.migrations.CustomEntryTypePreferenceMigration","2,00",3,6
"org.jabref.migrations.MergeReviewIntoCommentActionMigrationTest","1,00",1,7
"org.jabref.migrations.MergeReviewIntoCommentMigration","1,22",2,11
"org.jabref.migrations.PreferencesMigrations","2,72",7,49
"org.jabref.migrations.PreferencesMigrationsTest","1,00",1,12
"org.jabref.migrations.SpecialFieldsToSeparateFields","1,50",3,6
"org.jabref.migrations.SpecialFieldsToSeparateFieldsTest","1,00",1,5
"org.jabref.model.ChainNode","1,67",2,15
"org.jabref.model.FieldChange","2,50",13,20
"org.jabref.model.FieldChangeTest","1,00",1,7
"org.jabref.model.TreeNode","1,86",7,69
"org.jabref.model.TreeNodeTest","1,00",1,71
"org.jabref.model.TreeNodeTest.WrongTreeNodeImplementation","1,00",1,2
"org.jabref.model.TreeNodeTestData","1,00",1,5
"org.jabref.model.TreeNodeTestData.TreeNodeMock","1,00",1,6
"org.jabref.model.database.BibDatabase","1,55",7,85
"org.jabref.model.database.BibDatabaseContext","1,22",3,33
"org.jabref.model.database.BibDatabaseContextTest","1,00",1,12
"org.jabref.model.database.BibDatabaseMode","1,50",2,6
"org.jabref.model.database.BibDatabaseModeDetection","1,50",2,3
"org.jabref.model.database.BibDatabaseModeDetectionTest","1,00",1,6
"org.jabref.model.database.BibDatabaseTest","1,00",1,48
"org.jabref.model.database.BibDatabases","1,00",1,2
"org.jabref.model.database.DuplicationCheckerTest","1,00",1,8
"org.jabref.model.database.KeyChangeListener","2,50",4,15
"org.jabref.model.database.KeyChangeListenerTest","1,00",1,8
"org.jabref.model.database.KeyCollisionException","1,00",1,5
"org.jabref.model.database.event.AutosaveEvent",n/a,n/a,0
"org.jabref.model.database.event.AutosaveEventTest","1,00",1,1
"org.jabref.model.database.event.BibDatabaseContextChangedEvent","1,00",1,4
"org.jabref.model.database.event.ChangePropagation",n/a,n/a,0
"org.jabref.model.database.event.EntriesAddedEvent","1,00",1,3
"org.jabref.model.database.event.EntriesRemovedEvent","1,00",1,2
"org.jabref.model.entry.Author","3,18",17,54
"org.jabref.model.entry.AuthorList","1,16",3,36
"org.jabref.model.entry.AuthorListTest","1,01",2,125
"org.jabref.model.entry.AuthorTest","1,00",1,11
"org.jabref.model.entry.BibEntry","1,85",22,144
"org.jabref.model.entry.BibEntryTest","1,00",1,87
"org.jabref.model.entry.BibEntryType","1,25",3,20
"org.jabref.model.entry.BibEntryTypeBuilder","1,00",1,11
"org.jabref.model.entry.BibEntryTypesManager","2,00",2,26
"org.jabref.model.entry.BibEntryTypesManager.InternalEntryTypes","1,14",2,8
"org.jabref.model.entry.BibEntryTypesManagerTest","1,00",1,18
"org.jabref.model.entry.BibtexString","1,25",3,20
"org.jabref.model.entry.BibtexString.Type","3,00",5,6
"org.jabref.model.entry.BibtexStringTest","1,00",1,12
"org.jabref.model.entry.CanonicalBibEntry","2,50",4,5
"org.jabref.model.entry.CanonicalBibEntryTest","1,00",1,3
"org.jabref.model.entry.CrossrefTest","1,00",1,14
"org.jabref.model.entry.Date","1,44",4,23
"org.jabref.model.entry.DateTest","1,00",1,7
"org.jabref.model.entry.EntryConverter","1,00",1,1
"org.jabref.model.entry.EntryLinkList","1,67",3,5
"org.jabref.model.entry.EntryLinkListTest","1,00",1,10
"org.jabref.model.entry.EntryTypeFactoryTest","1,00",1,1
"org.jabref.model.entry.IdGenerator","1,00",1,2
"org.jabref.model.entry.IdGeneratorTest","2,00",2,2
"org.jabref.model.entry.Keyword","1,33",3,16
"org.jabref.model.entry.KeywordList","1,28",4,37
"org.jabref.model.entry.KeywordListTest","1,00",1,13
"org.jabref.model.entry.KeywordTest","1,00",1,2
"org.jabref.model.entry.LinkedFile","1,25",4,30
"org.jabref.model.entry.Month","3,10",14,31
"org.jabref.model.entry.MonthTest","1,00",1,26
"org.jabref.model.entry.ParsedEntryLink","1,25",3,10
"org.jabref.model.entry.SharedBibEntryData","1,00",1,5
"org.jabref.model.entry.event.EntriesEvent","1,00",1,4
"org.jabref.model.entry.event.EntriesEventSource",n/a,n/a,0
"org.jabref.model.entry.event.EntryChangedEvent","1,00",1,3
"org.jabref.model.entry.event.FieldAddedOrRemovedEvent","1,00",1,1
"org.jabref.model.entry.event.FieldChangedEvent","1,44",5,13
"org.jabref.model.entry.field.BibField","1,29",3,9
"org.jabref.model.entry.field.BibFieldTest","1,00",1,2
"org.jabref.model.entry.field.FieldFactory","1,00",1,21
"org.jabref.model.entry.field.FieldFactoryTest","1,00",1,2
"org.jabref.model.entry.field.FieldPriority",n/a,n/a,0
"org.jabref.model.entry.field.FieldProperty",n/a,n/a,0
"org.jabref.model.entry.field.IEEEField","1,00",1,5
"org.jabref.model.entry.field.InternalField","1,17",2,7
"org.jabref.model.entry.field.OrFields","1,17",2,7
"org.jabref.model.entry.field.SpecialField","1,11",2,10
"org.jabref.model.entry.field.SpecialFieldTest","1,00",1,2
"org.jabref.model.entry.field.SpecialFieldValue","1,00",1,5
"org.jabref.model.entry.field.StandardField","1,11",2,10
"org.jabref.model.entry.field.StandardFieldTest","1,00",1,1
"org.jabref.model.entry.field.UnknownField","1,29",3,9
"org.jabref.model.entry.field.UnknownFieldTest","1,00",1,2
"org.jabref.model.entry.identifier.ArXivIdentifier","1,62",3,21
"org.jabref.model.entry.identifier.ArXivIdentifierTest","1,00",1,25
"org.jabref.model.entry.identifier.DOI","1,60",5,24
"org.jabref.model.entry.identifier.DOITest","1,00",1,14
"org.jabref.model.entry.identifier.ISBN","1,71",4,24
"org.jabref.model.entry.identifier.ISBNTest","1,00",1,12
"org.jabref.model.entry.identifier.ISSN","2,00",5,10
"org.jabref.model.entry.identifier.ISSNTest","1,00",1,10
"org.jabref.model.entry.identifier.IacrEprint","1,14",2,8
"org.jabref.model.entry.identifier.IacrEprintTest","1,00",1,4
"org.jabref.model.entry.identifier.MathSciNetId","1,25",3,10
"org.jabref.model.entry.identifier.MathSciNetIdTest","1,00",1,1
"org.jabref.model.entry.types.BiblatexEntryTypeDefinitions",n/a,n/a,0
"org.jabref.model.entry.types.BiblatexSoftwareEntryTypeDefinitions",n/a,n/a,0
"org.jabref.model.entry.types.BibtexEntryTypeDefinitions","1,00",1,1
"org.jabref.model.entry.types.EntryTypeFactory","1,33",3,8
"org.jabref.model.entry.types.IEEETranEntryType","1,00",1,4
"org.jabref.model.entry.types.IEEETranEntryTypeDefinitions","1,00",1,1
"org.jabref.model.entry.types.StandardEntryType","1,00",1,3
"org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryType","1,00",1,4
"org.jabref.model.entry.types.SystematicLiteratureReviewStudyEntryTypeDefinitions","1,00",1,1
"org.jabref.model.entry.types.UnknownEntryType","1,33",3,8
"org.jabref.model.event.TestEventListener","1,00",1,7
"org.jabref.model.groups.AbstractGroup","1,47",3,28
"org.jabref.model.groups.AllEntriesGroup","1,00",1,6
"org.jabref.model.groups.AutomaticGroup","1,00",1,4
"org.jabref.model.groups.AutomaticKeywordGroup","1,22",3,11
"org.jabref.model.groups.AutomaticKeywordGroupTest","1,00",1,3
"org.jabref.model.groups.AutomaticPersonsGroup","1,33",3,8
"org.jabref.model.groups.AutomaticPersonsGroupTest","1,00",1,5
"org.jabref.model.groups.ExplicitGroup","1,25",3,10
"org.jabref.model.groups.ExplicitGroupTest","1,00",1,10
"org.jabref.model.groups.GroupHierarchyType","2,00",2,2
"org.jabref.model.groups.GroupTreeNode","1,92",6,48
"org.jabref.model.groups.GroupTreeNodeTest","1,00",1,29
"org.jabref.model.groups.KeywordGroup","1,43",4,10
"org.jabref.model.groups.LastNameGroup","1,00",1,4
"org.jabref.model.groups.RegexKeywordGroup","1,50",3,9
"org.jabref.model.groups.SearchGroup","1,22",3,11
"org.jabref.model.groups.SearchGroupTest","1,00",1,4
"org.jabref.model.groups.TexGroup","1,25",4,20
"org.jabref.model.groups.TexGroupTest","1,00",1,4
"org.jabref.model.groups.WordKeywordGroup","2,33",1,21
"org.jabref.model.groups.WordKeywordGroup.KeywordListSearchStrategy","1,00",1,2
"org.jabref.model.groups.WordKeywordGroup.StringSearchStrategy","1,50",2,3
"org.jabref.model.groups.WordKeywordGroup.TypeSearchStrategy","1,00",1,2
"org.jabref.model.groups.WordKeywordGroupTest","1,00",1,14
"org.jabref.model.groups.event.GroupUpdatedEvent","1,00",1,2
"org.jabref.model.metadata.ContentSelector","1,33",3,8
"org.jabref.model.metadata.ContentSelectors","1,89",4,17
"org.jabref.model.metadata.MetaData","1,15",3,54
"org.jabref.model.metadata.MetaDataTest","1,00",1,2
"org.jabref.model.metadata.SaveOrderConfig","1,64",3,18
"org.jabref.model.metadata.SaveOrderConfig.OrderType","1,67",3,5
"org.jabref.model.metadata.SaveOrderConfig.SortCriterion","1,33",3,8
"org.jabref.model.metadata.event.MetaDataChangedEvent","1,00",1,2
"org.jabref.model.openoffice.CitationEntry","1,22",3,11
"org.jabref.model.openoffice.CitationEntryTest","1,00",1,6
"org.jabref.model.openoffice.ootext.OOFormat","1,14",2,8
"org.jabref.model.openoffice.ootext.OOText","1,67",3,10
"org.jabref.model.openoffice.ootext.OOTextIntoOO","3,89",6,70
"org.jabref.model.openoffice.ootext.OOTextIntoOO.MyPropertyStack","3,60",8,18
"org.jabref.model.openoffice.rangesort.FunctionalTextViewCursor","2,40",5,12
"org.jabref.model.openoffice.rangesort.RangeOverlap","1,00",1,1
"org.jabref.model.openoffice.rangesort.RangeOverlapBetween","5,50",10,11
"org.jabref.model.openoffice.rangesort.RangeOverlapKind",n/a,n/a,0
"org.jabref.model.openoffice.rangesort.RangeOverlapWithin","4,00",10,12
"org.jabref.model.openoffice.rangesort.RangeSort","1,75",2,7
"org.jabref.model.openoffice.rangesort.RangeSort.HolderComparatorWithinPartition","1,00",1,2
"org.jabref.model.openoffice.rangesort.RangeSort.RangePartitions","1,00",1,3
"org.jabref.model.openoffice.rangesort.RangeSortEntry","1,00",1,6
"org.jabref.model.openoffice.rangesort.RangeSortVisual","2,75",3,11
"org.jabref.model.openoffice.rangesort.RangeSortVisual.ComparableMark","1,00",1,2
"org.jabref.model.openoffice.style.Citation","1,10",2,23
"org.jabref.model.openoffice.style.CitationGroup","1,18",3,13
"org.jabref.model.openoffice.style.CitationGroupId","1,00",1,2
"org.jabref.model.openoffice.style.CitationGroups","2,00",5,40
"org.jabref.model.openoffice.style.CitationLookupResult","1,67",3,5
"org.jabref.model.openoffice.style.CitationPath","1,00",1,1
"org.jabref.model.openoffice.style.CitationType","1,00",1,2
"org.jabref.model.openoffice.style.CitedKey","1,19",4,19
"org.jabref.model.openoffice.style.CitedKeys","1,78",3,16
"org.jabref.model.openoffice.style.CompareCitation","1,50",2,3
"org.jabref.model.openoffice.style.CompareCitedKey","3,00",5,6
"org.jabref.model.openoffice.style.NonUniqueCitationMarker",n/a,n/a,0
"org.jabref.model.openoffice.style.OODataModel","3,00",3,3
"org.jabref.model.openoffice.style.PageInfo","2,67",4,8
"org.jabref.model.openoffice.uno.CreationException","1,00",1,1
"org.jabref.model.openoffice.uno.NoDocumentException","1,00",1,2
"org.jabref.model.openoffice.uno.UnoBookmark","1,40",3,7
"org.jabref.model.openoffice.uno.UnoCast","1,00",1,2
"org.jabref.model.openoffice.uno.UnoCrossRef","1,00",1,3
"org.jabref.model.openoffice.uno.UnoCursor","1,50",3,6
"org.jabref.model.openoffice.uno.UnoNameAccess","1,00",1,2
"org.jabref.model.openoffice.uno.UnoNamed","1,00",1,2
"org.jabref.model.openoffice.uno.UnoProperties","1,10",2,11
"org.jabref.model.openoffice.uno.UnoRedlines","2,00",4,6
"org.jabref.model.openoffice.uno.UnoReferenceMark","1,43",3,10
"org.jabref.model.openoffice.uno.UnoScreenRefresh","1,00",1,4
"org.jabref.model.openoffice.uno.UnoSelection","2,50",4,10
"org.jabref.model.openoffice.uno.UnoStyle","1,00",1,7
"org.jabref.model.openoffice.uno.UnoTextDocument","2,40",4,12
"org.jabref.model.openoffice.uno.UnoTextRange","1,62",2,13
"org.jabref.model.openoffice.uno.UnoTextSection","1,00",1,4
"org.jabref.model.openoffice.uno.UnoUndo","1,50",2,6
"org.jabref.model.openoffice.uno.UnoUserDefinedProperty","1,86",4,13
"org.jabref.model.openoffice.util.OOListUtil","1,00",1,4
"org.jabref.model.openoffice.util.OOPair","1,00",1,1
"org.jabref.model.openoffice.util.OOResult","1,40",2,21
"org.jabref.model.openoffice.util.OOTuple3","1,00",1,1
"org.jabref.model.openoffice.util.OOVoidResult","1,25",2,10
"org.jabref.model.paging.Page","1,00",1,6
"org.jabref.model.paging.PageTest","1,00",1,5
"org.jabref.model.pdf.FileAnnotation","1,50",4,24
"org.jabref.model.pdf.FileAnnotationTest","1,00",1,5
"org.jabref.model.pdf.FileAnnotationType","1,00",1,5
"org.jabref.model.pdf.search.EnglishStemAnalyzer","1,00",1,1
"org.jabref.model.pdf.search.PdfSearchResults","1,33",3,8
"org.jabref.model.pdf.search.SearchFieldConstants",n/a,n/a,0
"org.jabref.model.pdf.search.SearchResult","1,11",2,10
"org.jabref.model.push.PushToApplicationConstants","1,00",1,1
"org.jabref.model.search.GroupSearchQuery","1,22",2,11
"org.jabref.model.search.matchers.AndMatcher","1,00",1,1
"org.jabref.model.search.matchers.MatcherSet","1,50",3,6
"org.jabref.model.search.matchers.MatcherSets","2,00",2,2
"org.jabref.model.search.matchers.MatcherSets.MatcherType",n/a,n/a,0
"org.jabref.model.search.matchers.MatcherSetsTest","1,00",1,4
"org.jabref.model.search.matchers.NotMatcher","1,00",1,2
"org.jabref.model.search.matchers.OrMatcher","1,00",1,1
"org.jabref.model.search.rules.ContainBasedSearchRule","2,60",7,13
"org.jabref.model.search.rules.ContainBasedSearchRuleTest","1,00",1,2
"org.jabref.model.search.rules.GrammarBasedSearchRule","1,22",1,11
"org.jabref.model.search.rules.GrammarBasedSearchRule.BibtexSearchVisitor","1,43",3,10
"org.jabref.model.search.rules.GrammarBasedSearchRule.Comparator","4,00",7,16
"org.jabref.model.search.rules.GrammarBasedSearchRule.ComparisonOperator","3,00",3,3
"org.jabref.model.search.rules.GrammarBasedSearchRule.ThrowingErrorListener","1,00",1,1
"org.jabref.model.search.rules.GrammarBasedSearchRuleTest","1,00",1,3
"org.jabref.model.search.rules.MockSearchMatcher","1,00",1,2
"org.jabref.model.search.rules.RegexBasedSearchRule","2,60",5,13
"org.jabref.model.search.rules.SearchRules","1,75",2,7
"org.jabref.model.search.rules.SearchRules.SearchFlags",n/a,n/a,0
"org.jabref.model.search.rules.SentenceAnalyzer","4,50",8,9
"org.jabref.model.search.rules.SentenceAnalyzerTest","1,00",1,2
"org.jabref.model.strings.LatexToUnicodeAdapter","1,50",2,3
"org.jabref.model.strings.StringUtil","2,74",9,115
"org.jabref.model.strings.StringUtilTest","1,00",1,48
"org.jabref.model.strings.UnicodeToReadableCharMap","1,00",1,1
"org.jabref.model.study.FetchResult","1,00",1,3
"org.jabref.model.study.QueryResult","1,00",1,3
"org.jabref.model.study.Study","2,33",14,42
"org.jabref.model.study.StudyDatabase","1,67",5,15
"org.jabref.model.study.StudyQuery","1,57",4,11
"org.jabref.model.texparser.Citation","1,70",4,17
"org.jabref.model.texparser.CitationTest","1,00",1,14
"org.jabref.model.texparser.LatexBibEntriesResolverResult","1,22",3,11
"org.jabref.model.texparser.LatexParserResult","1,21",3,17
"org.jabref.model.util.DummyFileUpdateMonitor","1,00",1,4
"org.jabref.model.util.FileHelper","2,00",4,16
"org.jabref.model.util.FileHelperTest","1,00",1,3
"org.jabref.model.util.ListUtil","3,00",3,6
"org.jabref.model.util.MultiKeyMap","1,50",2,6
"org.jabref.model.util.OptionalUtil","1,64",3,18
"org.jabref.model.util.ResultingStringState","1,00",1,1
"org.jabref.model.util.TreeCollector","1,62",3,13
"org.jabref.performance.BibtexEntryGenerator","1,50",2,3
"org.jabref.preferences.AppearancePreferences","1,00",1,10
"org.jabref.preferences.ExportComparator","1,00",1,1
"org.jabref.preferences.ExternalApplicationsPreferences","1,00",1,9
"org.jabref.preferences.FilePreferences","1,06",2,18
"org.jabref.preferences.GeneralPreferences","1,00",1,19
"org.jabref.preferences.GuiPreferences","1,00",1,27
"org.jabref.preferences.ImportExportPreferences","1,00",1,25
"org.jabref.preferences.JabRefPreferences","1,65",8,272
"org.jabref.preferences.MrDlibPreferences","1,00",1,13
"org.jabref.preferences.PreferencesFilter","1,00",1,3
"org.jabref.preferences.PreferencesFilter.PreferenceOption","1,30",3,13
"org.jabref.preferences.PreferencesFilter.PreferenceType",n/a,n/a,0
"org.jabref.preferences.PreviewPreferences","1,09",1,12
"org.jabref.preferences.PreviewPreferences.Builder","1,29",3,9
"org.jabref.preferences.PushToApplicationPreferences","1,00",1,7
"org.jabref.preferences.SearchPreferences","1,47",5,22
"org.jabref.preferences.SidePanePreferences","1,00",1,7
"org.jabref.preferences.TelemetryPreferences","1,00",1,7
"org.jabref.preferences.VersionPreferences","1,00",1,2
"org.jabref.styletester.StyleTesterMain","1,00",1,3
"org.jabref.styletester.StyleTesterView","1,00",1,3
"org.jabref.support.CIServerCondition","2,00",3,4
"org.jabref.testutils.TestUtils","1,50",2,3

Package,v(G)avg,v(G)tot
"java.org.jabref.logic.journals","1,76",74
"org.jabref","1,67",5
"org.jabref.architecture","1,13",17
"org.jabref.benchmarks","1,08",13
"org.jabref.cli","2,38",219
"org.jabref.gui","2,00",598
"org.jabref.gui.actions","1,36",61
"org.jabref.gui.autocompleter","1,18",171
"org.jabref.gui.auximport","2,29",16
"org.jabref.gui.bibtexextractor","1,90",38
"org.jabref.gui.citationkeypattern","2,32",44
"org.jabref.gui.cleanup","4,10",41
"org.jabref.gui.collab","1,57",77
"org.jabref.gui.commonfxcontrols","1,39",110
"org.jabref.gui.contentselector","1,25",64
"org.jabref.gui.copyfiles","1,71",41
"org.jabref.gui.customentrytypes","1,45",74
"org.jabref.gui.desktop","3,83",46
"org.jabref.gui.desktop.os","2,00",54
"org.jabref.gui.dialogs","1,50",6
"org.jabref.gui.documentviewer","1,22",89
"org.jabref.gui.duplicationFinder","3,20",48
"org.jabref.gui.edit","2,22",144
"org.jabref.gui.entryeditor","1,74",230
"org.jabref.gui.entryeditor.fileannotationtab","1,57",69
"org.jabref.gui.errorconsole","1,50",30
"org.jabref.gui.exporter","1,98",127
"org.jabref.gui.externalfiles","1,68",185
"org.jabref.gui.externalfiletype","1,76",127
"org.jabref.gui.fieldeditors","2,19",496
"org.jabref.gui.fieldeditors.contextmenu","1,68",37
"org.jabref.gui.groups","1,86",380
"org.jabref.gui.help","1,18",59
"org.jabref.gui.icon","1,20",55
"org.jabref.gui.importer","2,22",122
"org.jabref.gui.importer.actions","2,12",36
"org.jabref.gui.importer.fetcher","1,77",46
"org.jabref.gui.integrity","2,56",23
"org.jabref.gui.journals","3,33",30
"org.jabref.gui.keyboard","2,15",86
"org.jabref.gui.libraryproperties","1,40",42
"org.jabref.gui.linkedfile","1,80",27
"org.jabref.gui.logging","1,93",27
"org.jabref.gui.maintable","1,92",217
"org.jabref.gui.maintable.columns","2,05",41
"org.jabref.gui.menus","1,67",25
"org.jabref.gui.mergeentries","2,36",222
"org.jabref.gui.metadata","1,52",44
"org.jabref.gui.openoffice","2,92",389
"org.jabref.gui.preferences","1,65",66
"org.jabref.gui.preferences.appearance","1,83",33
"org.jabref.gui.preferences.citationkeypattern","1,35",27
"org.jabref.gui.preferences.customexporter","1,43",20
"org.jabref.gui.preferences.customimporter","1,92",25
"org.jabref.gui.preferences.entryeditor","1,45",32
"org.jabref.gui.preferences.entryeditortabs","1,40",14
"org.jabref.gui.preferences.external","1,15",30
"org.jabref.gui.preferences.file","1,00",13
"org.jabref.gui.preferences.general","1,13",26
"org.jabref.gui.preferences.groups","1,27",14
"org.jabref.gui.preferences.importexport","1,19",19
"org.jabref.gui.preferences.journals","1,44",148
"org.jabref.gui.preferences.keybindings","1,87",58
"org.jabref.gui.preferences.keybindings.presets","1,00",4
"org.jabref.gui.preferences.linkedfiles","1,45",29
"org.jabref.gui.preferences.nameformatter","1,36",30
"org.jabref.gui.preferences.network","1,45",42
"org.jabref.gui.preferences.preview","2,04",92
"org.jabref.gui.preferences.protectedterms","1,72",43
"org.jabref.gui.preferences.table","1,71",70
"org.jabref.gui.preferences.xmp","1,40",21
"org.jabref.gui.preview","1,62",65
"org.jabref.gui.push","1,78",107
"org.jabref.gui.remote","3,00",3
"org.jabref.gui.search","1,62",91
"org.jabref.gui.search.rules.describer","2,50",30
"org.jabref.gui.shared","1,60",72
"org.jabref.gui.sidepane","1,54",40
"org.jabref.gui.slr","1,55",82
"org.jabref.gui.specialfields","3,04",85
"org.jabref.gui.texparser","1,39",53
"org.jabref.gui.undo","1,48",92
"org.jabref.gui.util","1,61",591
"org.jabref.gui.util.comparator","1,77",55
"org.jabref.gui.util.component","1,58",49
"org.jabref.gui.util.uithreadaware","1,01",70
"org.jabref.logic","1,12",19
"org.jabref.logic.autosaveandbackup","1,52",38
"org.jabref.logic.auxparser","1,63",49
"org.jabref.logic.bibtex","1,47",147
"org.jabref.logic.bibtex.comparator","1,97",209
"org.jabref.logic.bst","3,32",522
"org.jabref.logic.citationkeypattern","1,76",469
"org.jabref.logic.citationstyle","1,54",83
"org.jabref.logic.cleanup","1,72",256
"org.jabref.logic.crawler","1,36",94
"org.jabref.logic.database","1,89",119
"org.jabref.logic.exporter","1,79",573
"org.jabref.logic.externalfiles","2,27",25
"org.jabref.logic.formatter","1,28",32
"org.jabref.logic.formatter.bibtexfields","1,23",408
"org.jabref.logic.formatter.casechanger","1,33",108
"org.jabref.logic.formatter.minifier","1,32",29
"org.jabref.logic.git","2,13",49
"org.jabref.logic.groups","1,00",2
"org.jabref.logic.help","1,00",4
"org.jabref.logic.importer","1,80",346
"org.jabref.logic.importer.fetcher","1,61",987
"org.jabref.logic.importer.fetcher.transformers","1,17",209
"org.jabref.logic.importer.fileformat","2,75",2 081
"org.jabref.logic.importer.util","2,68",190
"org.jabref.logic.integrity","1,37",455
"org.jabref.logic.journals","1,46",101
"org.jabref.logic.l10n","1,58",153
"org.jabref.logic.layout","4,49",328
"org.jabref.logic.layout.format","2,33",837
"org.jabref.logic.logging","1,00",8
"org.jabref.logic.msbib","2,62",136
"org.jabref.logic.net","1,59",118
"org.jabref.logic.openoffice","2,33",70
"org.jabref.logic.openoffice.action","2,58",67
"org.jabref.logic.openoffice.backend","2,66",117
"org.jabref.logic.openoffice.frontend","1,81",65
"org.jabref.logic.openoffice.style","2,46",551
"org.jabref.logic.pdf","1,76",58
"org.jabref.logic.pdf.search.indexing","1,74",80
"org.jabref.logic.pdf.search.retrieval","1,33",16
"org.jabref.logic.preferences","1,00",28
"org.jabref.logic.preview","1,00",1
"org.jabref.logic.protectedterms","1,45",109
"org.jabref.logic.remote","1,05",39
"org.jabref.logic.remote.client","2,00",8
"org.jabref.logic.remote.server","2,00",28
"org.jabref.logic.remote.shared","2,80",14
"org.jabref.logic.search","1,17",74
"org.jabref.logic.shared","1,76",338
"org.jabref.logic.shared.event","1,00",8
"org.jabref.logic.shared.exception","1,00",7
"org.jabref.logic.shared.listener","2,00",10
"org.jabref.logic.shared.prefs","1,04",28
"org.jabref.logic.shared.security","1,00",7
"org.jabref.logic.texparser","1,53",55
"org.jabref.logic.undo","1,00",7
"org.jabref.logic.util","1,52",205
"org.jabref.logic.util.io","1,51",240
"org.jabref.logic.util.strings","1,60",67
"org.jabref.logic.xmp","2,32",151
"org.jabref.migrations","1,88",130
"org.jabref.model","1,36",197
"org.jabref.model.database","1,28",235
"org.jabref.model.database.event","1,00",10
"org.jabref.model.entry","1,49",944
"org.jabref.model.entry.event","1,41",24
"org.jabref.model.entry.field","1,26",111
"org.jabref.model.entry.identifier","1,41",181
"org.jabref.model.entry.types","1,42",37
"org.jabref.model.event","1,00",7
"org.jabref.model.groups","1,51",311
"org.jabref.model.groups.event","1,00",2
"org.jabref.model.metadata","1,58",133
"org.jabref.model.metadata.event","1,00",2
"org.jabref.model.openoffice","1,13",17
"org.jabref.model.openoffice.ootext","3,11",112
"org.jabref.model.openoffice.rangesort","2,47",79
"org.jabref.model.openoffice.style","1,59",148
"org.jabref.model.openoffice.uno","1,79",150
"org.jabref.model.openoffice.util","1,29",36
"org.jabref.model.paging","1,00",11
"org.jabref.model.pdf","1,65",43
"org.jabref.model.pdf.search","1,31",21
"org.jabref.model.push","1,00",1
"org.jabref.model.search","1,22",11
"org.jabref.model.search.matchers","1,31",17
"org.jabref.model.search.rules","2,36",111
"org.jabref.model.strings","2,34",218
"org.jabref.model.study","1,95",78
"org.jabref.model.texparser","1,51",71
"org.jabref.model.util","1,78",73
"org.jabref.performance","1,50",3
"org.jabref.preferences","1,44",511
"org.jabref.styletester","1,00",6
"org.jabref.support","2,00",4
"org.jabref.testutils","1,50",3

Module,v(G)avg,v(G)tot
"JabRef.jmh","1,08",13
"JabRef.main","2,15",18 807
"JabRef.test","1,04",4 349
"SE2122_57464_58763_57677_58125_63764.buildSrc.main","1,76",74

Project,v(G)avg,v(G)tot
"project","1,79",23 243

